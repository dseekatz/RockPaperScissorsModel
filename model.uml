<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_M6WogMFeEeaVzb3gsu6Gyw" name="RootElement">
    <packagedElement xmi:type="uml:Class" xmi:id="_Tvla8MFeEeaVzb3gsu6Gyw" name="Top" isActive="true">
      <ownedAttribute xmi:type="uml:Property" xmi:id="_t3O5QMFeEeaVzb3gsu6Gyw" name="referee" visibility="protected" type="_VgfX4MFeEeaVzb3gsu6Gyw" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_uwfcgMFeEeaVzb3gsu6Gyw" name="player" visibility="protected" type="_Yr3HsMFeEeaVzb3gsu6Gyw" isOrdered="true" aggregation="composite">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_WObKAMFgEeaVzb3gsu6Gyw" value="2"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V_HisMFgEeaVzb3gsu6Gyw" value="2"/>
      </ownedAttribute>
      <ownedConnector xmi:type="uml:Connector" xmi:id="_xwZjMMFeEeaVzb3gsu6Gyw" name="RTConnector1">
        <end xmi:type="uml:ConnectorEnd" xmi:id="_xwfp0MFeEeaVzb3gsu6Gyw" partWithPort="_t3O5QMFeEeaVzb3gsu6Gyw" role="_oanfkMFeEeaVzb3gsu6Gyw"/>
        <end xmi:type="uml:ConnectorEnd" xmi:id="_xwfp0cFeEeaVzb3gsu6Gyw" partWithPort="_uwfcgMFeEeaVzb3gsu6Gyw" role="_r5uDsMFeEeaVzb3gsu6Gyw"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_VgfX4MFeEeaVzb3gsu6Gyw" name="Referee" classifierBehavior="_HfQcUMFfEeaVzb3gsu6Gyw" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_oanfkMFeEeaVzb3gsu6Gyw" name="play" visibility="public" type="_b9R1IMFeEeaVzb3gsu6Gyw" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ZOBusMFgEeaVzb3gsu6Gyw" value="2"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ZN82MMFgEeaVzb3gsu6Gyw" value="2"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_Dk4xIMFiEeaVzb3gsu6Gyw" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_Hcyk4MFkEeaVzb3gsu6Gyw" name="round">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_DiN60MFmEeaVzb3gsu6Gyw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_CqBnMMFpEeaVzb3gsu6Gyw" name="firstPlayerChoice" type="_hKm9MMGAEeaVzb3gsu6Gyw">
        <defaultValue xmi:type="uml:InstanceValue" xmi:id="_z7a7YMGBEeaVzb3gsu6Gyw" instance="_m3dLQMGAEeaVzb3gsu6Gyw"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_IwBVEMFpEeaVzb3gsu6Gyw" name="secondPlayerChoice" type="_hKm9MMGAEeaVzb3gsu6Gyw">
        <defaultValue xmi:type="uml:InstanceValue" xmi:id="_UhMJIMGBEeaVzb3gsu6Gyw" instance="_m3dLQMGAEeaVzb3gsu6Gyw"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_bkR98MFsEeaVzb3gsu6Gyw" name="firstPlayerScore">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_1gk7UMGBEeaVzb3gsu6Gyw" value="0"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_CM6LYMF_EeaVzb3gsu6Gyw" name="secondPlayerScore">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_FRhy8MF_EeaVzb3gsu6Gyw" value="0"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_WP3dwN9XEeaslsNogbStzw" name="timer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_HfQcUMFfEeaVzb3gsu6Gyw" name="RefereeStateMachine" isReentrant="false">
        <region xmi:type="uml:Region" xmi:id="_HfbbcMFfEeaVzb3gsu6Gyw" name="Region">
          <transition xmi:type="uml:Transition" xmi:id="_8MjZ0ExXEeeqN6OadgglSg" name="Initial" kind="external" source="_HfhiEMFfEeaVzb3gsu6Gyw" target="_0bctpUxaEeeqN6OadgglSg"/>
          <transition xmi:type="uml:Transition" xmi:id="_WZ_XEExYEeeqN6OadgglSg" kind="external" source="_0bmepkxaEeeqN6OadgglSg" target="_aNM7QExeEeeqN6OadgglSg"/>
          <transition xmi:type="uml:Transition" xmi:id="_tjGnsExYEeeqN6OadgglSg" kind="external" source="_aNWFMExeEeeqN6OadgglSg" target="_HzVJdE05EeeqN6OadgglSg"/>
          <transition xmi:type="uml:Transition" xmi:id="_5iVkYExZEeeqN6OadgglSg" kind="external" source="_aNfPIExeEeeqN6OadgglSg" target="_2OZucExZEeeqN6OadgglSg"/>
          <transition xmi:type="uml:Transition" xmi:id="_7C3jAExZEeeqN6OadgglSg" kind="external" source="_HzeTYE05EeeqN6OadgglSg" target="_2OZucExZEeeqN6OadgglSg"/>
          <transition xmi:type="uml:Transition" xmi:id="_-AFJ4U08EeeqN6OadgglSg" kind="external" source="_2OZucExZEeeqN6OadgglSg" target="_9_7Y4E08EeeqN6OadgglSg">
            <trigger xmi:type="uml:Trigger" xmi:id="_SGNMcKw5EeeCBPdMF60TmA" port="_WP3dwN9XEeaslsNogbStzw">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_HfhiEMFfEeaVzb3gsu6Gyw" name=""/>
          <subvertex xmi:type="uml:State" xmi:id="_6tCH0ExXEeeqN6OadgglSg" name="Round 1">
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_0bctpUxaEeeqN6OadgglSg" name="" kind="entryPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_0bmepkxaEeeqN6OadgglSg" name="" kind="exitPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_9_7Y4E08EeeqN6OadgglSg" name="" kind="entryPoint"/>
            <region xmi:type="uml:Region" xmi:id="_0bTjsExaEeeqN6OadgglSg" name="Region1">
              <transition xmi:type="uml:Transition" xmi:id="_HEeeQExbEeeqN6OadgglSg" name="in" kind="local" source="_0bctpUxaEeeqN6OadgglSg" target="_7R2kwExaEeeqN6OadgglSg"/>
              <transition xmi:type="uml:Transition" xmi:id="_LgCYsExdEeeqN6OadgglSg" kind="external" source="_IBC-wExcEeeqN6OadgglSg" target="_EyRgMExdEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_dnGEsExdEeeqN6OadgglSg">
                  <language>C++</language>
                  <body>    int player = msg->sapIndex();&#xD;
    log.show(&quot;Player %d played: &quot;, player);&#xD;
    switch (choice) {&#xD;
        case ROCK		:	log.show(&quot;ROCK&quot;); break;&#xD;
        case PAPER		:	log.show(&quot;PAPER&quot;); break;&#xD;
        case SCISSORS	:	log.show(&quot;SCISSORS&quot;); break;&#xD;
    }&#xD;
    if (player == 1) {&#xD;
    this->firstPlayerChoice = choice;&#xD;
    }&#xD;
    else if (player == 2){&#xD;
    this->secondPlayerChoice = choice;&#xD;
    } &#xD;
    log.show(&quot;\n&quot;);</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_ZHDoAExdEeeqN6OadgglSg" event="_BhCxcMFfEeaVzb3gsu6Gyw" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_sVMQ0ExdEeeqN6OadgglSg" name="" kind="external" source="_EyRgMExdEeeqN6OadgglSg" target="_0bmepkxaEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yc5O4ExdEeeqN6OadgglSg">
                  <language>C++</language>
                  <body>    int player = msg->sapIndex();&#xD;
    log.show(&quot;Player %d played: &quot;, player);&#xD;
    switch (choice) {&#xD;
    case ROCK		:	log.show(&quot;ROCK&quot;); break;&#xD;
    case PAPER		:	log.show(&quot;PAPER&quot;); break;&#xD;
    case SCISSORS	:	log.show(&quot;SCISSORS&quot;); break;&#xD;
    }&#xD;
    if (player == 1) {&#xD;
    this->firstPlayerChoice = choice;&#xD;
    }&#xD;
    else if (player == 2){&#xD;
    this->secondPlayerChoice = choice;&#xD;
    } &#xD;
    log.show(&quot;\n&quot;);&#xD;
    if (this->firstPlayerChoice == this->secondPlayerChoice) {&#xD;
    log.show(&quot;Round %d Tied&quot;, this->round);&#xD;
    } else if ((this->secondPlayerChoice + 1) % 3 == this->firstPlayerChoice) {&#xD;
    log.show(&quot;Player 1 Wins Round %d!&quot;, this->round);&#xD;
    this->firstPlayerScore++;&#xD;
    } else {&#xD;
    log.show(&quot;Player 2 Wins Round %d!&quot;, this->round);&#xD;
    this->secondPlayerScore++;&#xD;
    }&#xD;
    log.show(&quot;\n&quot;);&#xD;
    this->round++;</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_uBMfoExdEeeqN6OadgglSg" event="_BhCxcMFfEeaVzb3gsu6Gyw" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_ybyQEExnEeeqN6OadgglSg" kind="external" source="_7R2kwExaEeeqN6OadgglSg" target="_IBC-wExcEeeqN6OadgglSg">
                <trigger xmi:type="uml:Trigger" xmi:id="_zKo6IExnEeeqN6OadgglSg" port="_WP3dwN9XEeaslsNogbStzw">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_CzzXkE09EeeqN6OadgglSg" name="new game" kind="local" source="_9_7Y4E08EeeqN6OadgglSg" target="_7R2kwExaEeeqN6OadgglSg"/>
              <subvertex xmi:type="uml:State" xmi:id="_7R2kwExaEeeqN6OadgglSg" name="Waiting For Round">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_iN7X0ExbEeeqN6OadgglSg" name="setting timer">
                  <language>C++</language>
                  <body>timer.informIn(UMLRTTimespec(2,0));</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IBC-wExcEeeqN6OadgglSg" name="Starting Round">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_VMtu0ExcEeeqN6OadgglSg" name="starting round">
                  <language>C++</language>
                  <body>log.show(&quot;\n-- Starting round %d --\n&quot;, this->round);&#xD;
play.go(this->round).send();</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_EyRgMExdEeeqN6OadgglSg" name="Getting Player Choice"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_RKZswExYEeeqN6OadgglSg" name="Round 2">
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_aNM7QExeEeeqN6OadgglSg" kind="entryPoint">
              <name xsi:nil="true"/>
            </connectionPoint>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_aNWFMExeEeeqN6OadgglSg" name="" kind="exitPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_aNfPIExeEeeqN6OadgglSg" name="" kind="exitPoint"/>
            <region xmi:type="uml:Region" xmi:id="_aNHbsExeEeeqN6OadgglSg" name="Region1">
              <transition xmi:type="uml:Transition" xmi:id="_7A36wExgEeeqN6OadgglSg" name="in" kind="local" source="_aNM7QExeEeeqN6OadgglSg" target="_vmuLoExgEeeqN6OadgglSg"/>
              <transition xmi:type="uml:Transition" xmi:id="_zJbA4ExhEeeqN6OadgglSg" name="" kind="external" source="_bCA8AExhEeeqN6OadgglSg" target="_wdBFAExhEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_8GTcUExhEeeqN6OadgglSg">
                  <language>C++</language>
                  <body>    int player = msg->sapIndex();&#xD;
    log.show(&quot;Player %d played: &quot;, player);&#xD;
    switch (choice) {&#xD;
        case ROCK		:	log.show(&quot;ROCK&quot;); break;&#xD;
        case PAPER		:	log.show(&quot;PAPER&quot;); break;&#xD;
        case SCISSORS	:	log.show(&quot;SCISSORS&quot;); break;&#xD;
    }&#xD;
    if (player == 1) {&#xD;
    this->firstPlayerChoice = choice;&#xD;
    }&#xD;
    else if (player == 2){&#xD;
    this->secondPlayerChoice = choice;&#xD;
    } &#xD;
    log.show(&quot;\n&quot;);</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_0ivkQExhEeeqN6OadgglSg" event="_BhCxcMFfEeaVzb3gsu6Gyw" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_rmaF8ExiEeeqN6OadgglSg" name="" kind="external" source="_wdBFAExhEeeqN6OadgglSg" target="_SzEvMExiEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5lDLEExiEeeqN6OadgglSg">
                  <language>C++</language>
                  <body>    int player = msg->sapIndex();&#xD;
    log.show(&quot;Player %d played: &quot;, player);&#xD;
    switch (choice) {&#xD;
    case ROCK		:	log.show(&quot;ROCK&quot;); break;&#xD;
    case PAPER		:	log.show(&quot;PAPER&quot;); break;&#xD;
    case SCISSORS	:	log.show(&quot;SCISSORS&quot;); break;&#xD;
    }&#xD;
    if (player == 1) {&#xD;
    this->firstPlayerChoice = choice;&#xD;
    }&#xD;
    else if (player == 2){&#xD;
    this->secondPlayerChoice = choice;&#xD;
    } &#xD;
    log.show(&quot;\n&quot;);&#xD;
    if (this->firstPlayerChoice == this->secondPlayerChoice) {&#xD;
    log.show(&quot;Round %d Tied&quot;, this->round);&#xD;
    } else if ((this->secondPlayerChoice + 1) % 3 == this->firstPlayerChoice) {&#xD;
    log.show(&quot;Player 1 Wins Round %d!&quot;, this->round);&#xD;
    this->firstPlayerScore++;&#xD;
    } else {&#xD;
    log.show(&quot;Player 2 Wins Round %d!&quot;, this->round);&#xD;
    this->secondPlayerScore++;&#xD;
    }&#xD;
    log.show(&quot;\n&quot;);&#xD;
    this->round++;</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_tExhYExiEeeqN6OadgglSg" event="_BhCxcMFfEeaVzb3gsu6Gyw" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_WhivkExjEeeqN6OadgglSg" name="to round 3" guard="_q1ctoExjEeeqN6OadgglSg" kind="external" source="_SzEvMExiEeeqN6OadgglSg" target="_aNWFMExeEeeqN6OadgglSg">
                <ownedRule xmi:type="uml:Constraint" xmi:id="_q1ctoExjEeeqN6OadgglSg">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_3P9GgExjEeeqN6OadgglSg">
                    <language>C++</language>
                    <body>bool isNotOver = firstPlayerScore == secondPlayerScore;&#xD;
return isNotOver;</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_sqcOcExlEeeqN6OadgglSg" name="game over" kind="external" source="_SzEvMExiEeeqN6OadgglSg" target="_oFnYYExlEeeqN6OadgglSg"/>
              <transition xmi:type="uml:Transition" xmi:id="_xclHwExlEeeqN6OadgglSg" name="player 1 wins" guard="_GFTfQExmEeeqN6OadgglSg" kind="external" source="_oFnYYExlEeeqN6OadgglSg" target="_aNfPIExeEeeqN6OadgglSg">
                <ownedRule xmi:type="uml:Constraint" xmi:id="_GFTfQExmEeeqN6OadgglSg">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_N8NxIExmEeeqN6OadgglSg">
                    <language>C++</language>
                    <body>bool player1Wins = firstPlayerScore > secondPlayerScore;&#xD;
return player1Wins;</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_d_tC4ExmEeeqN6OadgglSg">
                  <language>C++</language>
                  <body>log.show(&quot;\nplayer 1 wins the game!&quot;);</body>
                </effect>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_01qjcExlEeeqN6OadgglSg" name="player 2 wins" kind="external" source="_oFnYYExlEeeqN6OadgglSg" target="_aNfPIExeEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_hlO_IExmEeeqN6OadgglSg">
                  <language>C++</language>
                  <body>log.show(&quot;\nplayer 2 wins the game!&quot;);</body>
                </effect>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_5uN74ExnEeeqN6OadgglSg" name="" kind="external" source="_vmuLoExgEeeqN6OadgglSg" target="_bCA8AExhEeeqN6OadgglSg">
                <trigger xmi:type="uml:Trigger" xmi:id="_6Ie2AExnEeeqN6OadgglSg" port="_WP3dwN9XEeaslsNogbStzw">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_vmuLoExgEeeqN6OadgglSg" name="Waiting for Round">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5cD5EExgEeeqN6OadgglSg" name="setting timer">
                  <language>C++</language>
                  <body>timer.informIn(UMLRTTimespec(2,0));</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_bCA8AExhEeeqN6OadgglSg" name="Starting Round">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_kZoysExhEeeqN6OadgglSg" name="starting round">
                  <language>C++</language>
                  <body>log.show(&quot;\n-- Starting round %d --\n&quot;, this->round);&#xD;
play.go(this->round).send();</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_wdBFAExhEeeqN6OadgglSg" name="Getting Player Choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_SzEvMExiEeeqN6OadgglSg" name="isGameOver?" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_oFnYYExlEeeqN6OadgglSg" name="whoWon?" kind="choice"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_qkeTYExYEeeqN6OadgglSg" name="Round 3">
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_HzVJdE05EeeqN6OadgglSg" kind="entryPoint">
              <name xsi:nil="true"/>
            </connectionPoint>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_HzeTYE05EeeqN6OadgglSg" name="" kind="exitPoint"/>
            <region xmi:type="uml:Region" xmi:id="_HzLYcE05EeeqN6OadgglSg" name="Region1">
              <transition xmi:type="uml:Transition" xmi:id="_PxTFkE05EeeqN6OadgglSg" name="in" kind="local" source="_HzVJdE05EeeqN6OadgglSg" target="_NMfmgE05EeeqN6OadgglSg"/>
              <transition xmi:type="uml:Transition" xmi:id="_e06OsE05EeeqN6OadgglSg" kind="external" source="_NMfmgE05EeeqN6OadgglSg" target="_aDJI0E05EeeqN6OadgglSg">
                <trigger xmi:type="uml:Trigger" xmi:id="_gSveoE05EeeqN6OadgglSg" port="_WP3dwN9XEeaslsNogbStzw">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_lbResE05EeeqN6OadgglSg" name="" kind="external" source="_aDJI0E05EeeqN6OadgglSg" target="_jaSeYE05EeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_soQp0E05EeeqN6OadgglSg">
                  <language>C++</language>
                  <body>    int player = msg->sapIndex();&#xD;
    log.show(&quot;Player %d played: &quot;, player);&#xD;
    switch (choice) {&#xD;
        case ROCK		:	log.show(&quot;ROCK&quot;); break;&#xD;
        case PAPER		:	log.show(&quot;PAPER&quot;); break;&#xD;
        case SCISSORS	:	log.show(&quot;SCISSORS&quot;); break;&#xD;
    }&#xD;
    if (player == 1) {&#xD;
    this->firstPlayerChoice = choice;&#xD;
    }&#xD;
    else if (player == 2){&#xD;
    this->secondPlayerChoice = choice;&#xD;
    } &#xD;
    log.show(&quot;\n&quot;);</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_mCIqYE05EeeqN6OadgglSg" event="_BhCxcMFfEeaVzb3gsu6Gyw" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_aTYHwE06EeeqN6OadgglSg" kind="external" source="_jaSeYE05EeeqN6OadgglSg" target="_XA5DUE06EeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_rGPA8E06EeeqN6OadgglSg">
                  <language>C++</language>
                  <body>    int player = msg->sapIndex();&#xD;
    log.show(&quot;Player %d played: &quot;, player);&#xD;
    switch (choice) {&#xD;
    case ROCK		:	log.show(&quot;ROCK&quot;); break;&#xD;
    case PAPER		:	log.show(&quot;PAPER&quot;); break;&#xD;
    case SCISSORS	:	log.show(&quot;SCISSORS&quot;); break;&#xD;
    }&#xD;
    if (player == 1) {&#xD;
    this->firstPlayerChoice = choice;&#xD;
    }&#xD;
    else if (player == 2){&#xD;
    this->secondPlayerChoice = choice;&#xD;
    } &#xD;
    log.show(&quot;\n&quot;);&#xD;
    if (this->firstPlayerChoice == this->secondPlayerChoice) {&#xD;
    log.show(&quot;Round %d Tied&quot;, this->round);&#xD;
    } else if ((this->secondPlayerChoice + 1) % 3 == this->firstPlayerChoice) {&#xD;
    log.show(&quot;Player 1 Wins Round %d!&quot;, this->round);&#xD;
    this->firstPlayerScore++;&#xD;
    } else {&#xD;
    log.show(&quot;Player 2 Wins Round %d!&quot;, this->round);&#xD;
    this->secondPlayerScore++;&#xD;
    }&#xD;
    log.show(&quot;\n&quot;);&#xD;
    this->round++;</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_gDtHoE06EeeqN6OadgglSg" event="_BhCxcMFfEeaVzb3gsu6Gyw" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_AsjpIE07EeeqN6OadgglSg" name="Tie" kind="external" source="_XA5DUE06EeeqN6OadgglSg" target="_HzeTYE05EeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IaF8kE07EeeqN6OadgglSg">
                  <language>C++</language>
                  <body>log.show(&quot;\nGame Tied!&quot;);</body>
                </effect>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_M5uwoE07EeeqN6OadgglSg" name="Player 2 Wins" guard="_UEtJkE07EeeqN6OadgglSg" kind="external" source="_XA5DUE06EeeqN6OadgglSg" target="_HzeTYE05EeeqN6OadgglSg">
                <ownedRule xmi:type="uml:Constraint" xmi:id="_UEtJkE07EeeqN6OadgglSg">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_dXlqME07EeeqN6OadgglSg">
                    <language>C++</language>
                    <body>bool player2Wins = secondPlayerScore > firstPlayerScore;&#xD;
return player2Wins;</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_smDYcE07EeeqN6OadgglSg">
                  <language>C++</language>
                  <body>log.show(&quot;\nPlayer 2 Wins!&quot;);</body>
                </effect>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_t44SQE07EeeqN6OadgglSg" name="Player 1 Wins" guard="_zhYL0E07EeeqN6OadgglSg" kind="external" source="_XA5DUE06EeeqN6OadgglSg" target="_HzeTYE05EeeqN6OadgglSg">
                <ownedRule xmi:type="uml:Constraint" xmi:id="_zhYL0E07EeeqN6OadgglSg">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_7EhNIE07EeeqN6OadgglSg">
                    <language>C++</language>
                    <body>bool player1Wins = firstPlayerScore > secondPlayerScore;&#xD;
return player1Wins;</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DT1_AE08EeeqN6OadgglSg">
                  <language>C++</language>
                  <body>log.show(&quot;\nPlayer 1 Wins!&quot;);</body>
                </effect>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_NMfmgE05EeeqN6OadgglSg" name="Waiting for Round">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Wl9QQE05EeeqN6OadgglSg" name="setting timer">
                  <language>C++</language>
                  <body>timer.informIn(UMLRTTimespec(2,0));</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_aDJI0E05EeeqN6OadgglSg" name="Starting Round">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_qr0D4E08EeeqN6OadgglSg" name="starting round">
                  <language>C++</language>
                  <body>log.show(&quot;\n-- Starting round %d --\n&quot;, this->round);&#xD;
play.go(this->round).send();</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_jaSeYE05EeeqN6OadgglSg" name="Getting Player Choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_XA5DUE06EeeqN6OadgglSg" name="whoWon?" kind="choice"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_2OZucExZEeeqN6OadgglSg" name="Game Over">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_C0js4E06EeeqN6OadgglSg" name="reset game">
              <language>C++</language>
              <body>log.show(&quot;\n\nStarting next game...\n\n&quot;);&#xD;
this->firstPlayerScore = 0;&#xD;
this->secondPlayerScore = 0;&#xD;
this->round = 1;
timer.informIn(UMLRTTimespec(2,0));</body>
            </entry>
          </subvertex>
        </region>
      </ownedBehavior>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_Yr3HsMFeEeaVzb3gsu6Gyw" name="Player" classifierBehavior="_SYFAAMFfEeaVzb3gsu6Gyw" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_r5uDsMFeEeaVzb3gsu6Gyw" name="play" visibility="public" type="_b9R1IMFeEeaVzb3gsu6Gyw" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_GZ4TMMFgEeaVzb3gsu6Gyw" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_SYFAAMFfEeaVzb3gsu6Gyw" name="PlayerStateMachine" isReentrant="false">
        <region xmi:type="uml:Region" xmi:id="_SYLGoMFfEeaVzb3gsu6Gyw" name="Region">
          <transition xmi:type="uml:Transition" xmi:id="_SYTpgMFfEeaVzb3gsu6Gyw" name="Initial" source="_SYNi4MFfEeaVzb3gsu6Gyw" target="_SYRNQMFfEeaVzb3gsu6Gyw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_grlLwMFoEeaVzb3gsu6Gyw">
              <language>C++</language>
              <body>srand(time(0));</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="__hrFQMFfEeaVzb3gsu6Gyw" name="picking" source="_SYRNQMFfEeaVzb3gsu6Gyw" target="_SYRNQMFfEeaVzb3gsu6Gyw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_mowZAMFhEeaVzb3gsu6Gyw">
              <language>C++</language>
              <body>    int random = rand() % 4;&#xD;
&#xD;
    // send choice to referee&#xD;
    play.picked(static_cast&lt;Choice>(random)).send();&#xD;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_CBn5gMFgEeaVzb3gsu6Gyw" event="_CYqV8MFfEeaVzb3gsu6Gyw" port="_r5uDsMFeEeaVzb3gsu6Gyw"/>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_SYNi4MFfEeaVzb3gsu6Gyw">
            <name xsi:nil="true"/>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_SYRNQMFfEeaVzb3gsu6Gyw" name="IDLE"/>
        </region>
      </ownedBehavior>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_b9a_EMFeEeaVzb3gsu6Gyw" name="Play">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_b9R1IMFeEeaVzb3gsu6Gyw" name="Play">
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_b9oacMFeEeaVzb3gsu6Gyw" client="_b9R1IMFeEeaVzb3gsu6Gyw" supplier="_b9hswMFeEeaVzb3gsu6Gyw" contract="_b9hswMFeEeaVzb3gsu6Gyw"/>
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_b91OwMFeEeaVzb3gsu6Gyw" client="_b9R1IMFeEeaVzb3gsu6Gyw" supplier="_b9w9UMFeEeaVzb3gsu6Gyw" contract="_b9w9UMFeEeaVzb3gsu6Gyw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_b9hswMFeEeaVzb3gsu6Gyw" name="Play">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_B7RPUMFfEeaVzb3gsu6Gyw" name="go">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_2HWcQOGSEeaj6NjEGxxytQ" name="round">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_b9q2sMFeEeaVzb3gsu6Gyw" name="Play~">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_3IRm0MFeEeaVzb3gsu6Gyw" name="picked">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_9jzf0MFeEeaVzb3gsu6Gyw" name="choice" type="_hKm9MMGAEeaVzb3gsu6Gyw"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_b9vIIMFeEeaVzb3gsu6Gyw" client="_b9R1IMFeEeaVzb3gsu6Gyw" supplier="_b9q2sMFeEeaVzb3gsu6Gyw"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_b9vvMMFeEeaVzb3gsu6Gyw" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_b9w9UMFeEeaVzb3gsu6Gyw" name="PlayIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_b92c4MFeEeaVzb3gsu6Gyw" client="_b9R1IMFeEeaVzb3gsu6Gyw" supplier="_b9w9UMFeEeaVzb3gsu6Gyw"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_BhCxcMFfEeaVzb3gsu6Gyw" operation="_3IRm0MFeEeaVzb3gsu6Gyw"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_CYqV8MFfEeaVzb3gsu6Gyw" operation="_B7RPUMFfEeaVzb3gsu6Gyw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_hKm9MMGAEeaVzb3gsu6Gyw" name="Choice">
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_m3dLQMGAEeaVzb3gsu6Gyw" name="ROCK"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_1ivT8MGAEeaVzb3gsu6Gyw" name="PAPER"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_2psU8MGAEeaVzb3gsu6Gyw" name="SCISSORS"/>
    </packagedElement>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_M9rCQMFeEeaVzb3gsu6Gyw">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_M9v6wMFeEeaVzb3gsu6Gyw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://UML_RT_PROFILE/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_S5m1MMFeEeaVzb3gsu6Gyw">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_S5oDUMFeEeaVzb3gsu6Gyw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://UMLRT_CPP/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_S5sUwMFeEeaVzb3gsu6Gyw">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_S5sUwcFeEeaVzb3gsu6Gyw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="__JGMMMFqEeaVzb3gsu6Gyw">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="__JGzQMFqEeaVzb3gsu6Gyw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://PAPYRUS_ACTIONLANGUAGE_PROFILE/ActionLanguage-Profile.profile.uml#_Kv8EIKFXEeS_KNX0nfvIVQ"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://PAPYRUS_ACTIONLANGUAGE_PROFILE/ActionLanguage-Profile.profile.uml#ActionLanguage"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:Capsule xmi:id="_TzfqkMFeEeaVzb3gsu6Gyw" base_Class="_Tvla8MFeEeaVzb3gsu6Gyw"/>
  <UMLRealTime:Capsule xmi:id="_VhD_oMFeEeaVzb3gsu6Gyw" base_Class="_VgfX4MFeEeaVzb3gsu6Gyw"/>
  <UMLRealTime:Capsule xmi:id="_YsahUMFeEeaVzb3gsu6Gyw" base_Class="_Yr3HsMFeEeaVzb3gsu6Gyw"/>
  <UMLRealTime:ProtocolContainer xmi:id="_b9fQgMFeEeaVzb3gsu6Gyw" base_Package="_b9a_EMFeEeaVzb3gsu6Gyw"/>
  <UMLRealTime:RTMessageSet xmi:id="_b9l-MMFeEeaVzb3gsu6Gyw" base_Interface="_b9hswMFeEeaVzb3gsu6Gyw"/>
  <UMLRealTime:RTMessageSet xmi:id="_b9t6AMFeEeaVzb3gsu6Gyw" base_Interface="_b9q2sMFeEeaVzb3gsu6Gyw" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_b9zZkMFeEeaVzb3gsu6Gyw" base_Interface="_b9w9UMFeEeaVzb3gsu6Gyw" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_b93D8MFeEeaVzb3gsu6Gyw" base_Collaboration="_b9R1IMFeEeaVzb3gsu6Gyw"/>
  <UMLRealTime:RTPort xmi:id="_oazs0MFeEeaVzb3gsu6Gyw" base_Port="_oanfkMFeEeaVzb3gsu6Gyw"/>
  <UMLRealTime:RTPort xmi:id="_r5zjQMFeEeaVzb3gsu6Gyw" base_Port="_r5uDsMFeEeaVzb3gsu6Gyw"/>
  <UMLRealTime:CapsulePart xmi:id="_t3TKsMFeEeaVzb3gsu6Gyw" base_Property="_t3O5QMFeEeaVzb3gsu6Gyw"/>
  <UMLRealTime:CapsulePart xmi:id="_uwjG4MFeEeaVzb3gsu6Gyw" base_Property="_uwfcgMFeEeaVzb3gsu6Gyw"/>
  <UMLRealTime:RTConnector xmi:id="_xwg38MFeEeaVzb3gsu6Gyw" base_Connector="_xwZjMMFeEeaVzb3gsu6Gyw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_HflzgMFfEeaVzb3gsu6Gyw" base_Pseudostate="_HfhiEMFfEeaVzb3gsu6Gyw"/>
  <UMLRTStateMachines:RTRegion xmi:id="_Hf25QMFfEeaVzb3gsu6Gyw" base_Region="_HfbbcMFfEeaVzb3gsu6Gyw"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_HgUzUMFfEeaVzb3gsu6Gyw" base_StateMachine="_HfQcUMFfEeaVzb3gsu6Gyw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_SYP_IMFfEeaVzb3gsu6Gyw" base_Pseudostate="_SYNi4MFfEeaVzb3gsu6Gyw"/>
  <UMLRTStateMachines:RTState xmi:id="_SYTCcMFfEeaVzb3gsu6Gyw" base_State="_SYRNQMFfEeaVzb3gsu6Gyw"/>
  <UMLRTStateMachines:RTRegion xmi:id="_SYUQkMFfEeaVzb3gsu6Gyw" base_Region="_SYLGoMFfEeaVzb3gsu6Gyw"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_SYxjkMFfEeaVzb3gsu6Gyw" base_StateMachine="_SYFAAMFfEeaVzb3gsu6Gyw"/>
  <UMLRealTime:RTPort xmi:id="_GZ8koMFgEeaVzb3gsu6Gyw" isWired="false" base_Port="_GZ4TMMFgEeaVzb3gsu6Gyw"/>
  <UMLRealTime:RTPort xmi:id="_Dk9CkMFiEeaVzb3gsu6Gyw" isWired="false" base_Port="_Dk4xIMFiEeaVzb3gsu6Gyw"/>
  <UMLRealTime:RTPort xmi:id="_WP56AN9XEeaslsNogbStzw" isWired="false" base_Port="_WP3dwN9XEeaslsNogbStzw"/>
  <UMLRTStateMachines:RTState xmi:id="_6tI1gExXEeeqN6OadgglSg" base_State="_6tCH0ExXEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_RKi2sExYEeeqN6OadgglSg" base_State="_RKZswExYEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_qkoEYExYEeeqN6OadgglSg" base_State="_qkeTYExYEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_2Oi4YExZEeeqN6OadgglSg" base_State="_2OZucExZEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_0bctoExaEeeqN6OadgglSg" base_Region="_0bTjsExaEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_0bctpkxaEeeqN6OadgglSg" base_Pseudostate="_0bctpUxaEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_0bmep0xaEeeqN6OadgglSg" base_Pseudostate="_0bmepkxaEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_7SAVwExaEeeqN6OadgglSg" base_State="_7R2kwExaEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_IBC-wUxcEeeqN6OadgglSg" base_State="_IBC-wExcEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_EyRgMUxdEeeqN6OadgglSg" base_State="_EyRgMExdEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_aNKfAExeEeeqN6OadgglSg" base_Region="_aNHbsExeEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_aNRMsExeEeeqN6OadgglSg" base_Pseudostate="_aNM7QExeEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_aNa9sExeEeeqN6OadgglSg" base_Pseudostate="_aNWFMExeEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_aNkusExeEeeqN6OadgglSg" base_Pseudostate="_aNfPIExeEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_vmxO8ExgEeeqN6OadgglSg" base_State="_vmuLoExgEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_bCA8AUxhEeeqN6OadgglSg" base_State="_bCA8AExhEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_wdBFAUxhEeeqN6OadgglSg" base_State="_wdBFAExhEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_SzN5IExiEeeqN6OadgglSg" base_Pseudostate="_SzEvMExiEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_oFwiUExlEeeqN6OadgglSg" base_Pseudostate="_oFnYYExlEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_HzLYg005EeeqN6OadgglSg" base_Region="_HzLYcE05EeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_HzVJdU05EeeqN6OadgglSg" base_Pseudostate="_HzVJdE05EeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_HzeTYU05EeeqN6OadgglSg" base_Pseudostate="_HzeTYE05EeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_NMfmgU05EeeqN6OadgglSg" base_State="_NMfmgE05EeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_aDJI0U05EeeqN6OadgglSg" base_State="_aDJI0E05EeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_jacPYE05EeeqN6OadgglSg" base_State="_jaSeYE05EeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_XBC0UE06EeeqN6OadgglSg" base_Pseudostate="_XA5DUE06EeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_-AFJ4E08EeeqN6OadgglSg" base_Pseudostate="_9_7Y4E08EeeqN6OadgglSg"/>
</xmi:XMI>
