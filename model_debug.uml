<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_M6WogMFeEeaVzb3gsu6Gyw" name="RootElement">
    <packagedElement xmi:type="uml:Class" xmi:id="_Tvla8MFeEeaVzb3gsu6Gyw" name="Top" isActive="true">
      <ownedAttribute xmi:id="_t3O5QMFeEeaVzb3gsu6Gyw" name="referee" visibility="protected" type="_VgfX4MFeEeaVzb3gsu6Gyw" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_uwfcgMFeEeaVzb3gsu6Gyw" name="player" visibility="protected" type="_Yr3HsMFeEeaVzb3gsu6Gyw" isOrdered="true" aggregation="composite">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_WObKAMFgEeaVzb3gsu6Gyw" value="2"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V_HisMFgEeaVzb3gsu6Gyw" value="2"/>
      </ownedAttribute>
      <ownedConnector xmi:id="_xwZjMMFeEeaVzb3gsu6Gyw" name="RTConnector1">
        <end xmi:id="_xwfp0MFeEeaVzb3gsu6Gyw" partWithPort="_t3O5QMFeEeaVzb3gsu6Gyw" role="_oanfkMFeEeaVzb3gsu6Gyw"/>
        <end xmi:id="_xwfp0cFeEeaVzb3gsu6Gyw" partWithPort="_uwfcgMFeEeaVzb3gsu6Gyw" role="_r5uDsMFeEeaVzb3gsu6Gyw"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_VgfX4MFeEeaVzb3gsu6Gyw" name="Referee" classifierBehavior="_HfQcUMFfEeaVzb3gsu6Gyw" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_oanfkMFeEeaVzb3gsu6Gyw" name="play" visibility="public" type="_b9R1IMFeEeaVzb3gsu6Gyw" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ZOBusMFgEeaVzb3gsu6Gyw" value="2"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ZN82MMFgEeaVzb3gsu6Gyw" value="2"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_Dk4xIMFiEeaVzb3gsu6Gyw" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_Hcyk4MFkEeaVzb3gsu6Gyw" name="round">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_DiN60MFmEeaVzb3gsu6Gyw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_CqBnMMFpEeaVzb3gsu6Gyw" name="firstPlayerChoice" type="_hKm9MMGAEeaVzb3gsu6Gyw">
        <defaultValue xmi:type="uml:InstanceValue" xmi:id="_z7a7YMGBEeaVzb3gsu6Gyw" instance="_m3dLQMGAEeaVzb3gsu6Gyw"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_IwBVEMFpEeaVzb3gsu6Gyw" name="secondPlayerChoice" type="_hKm9MMGAEeaVzb3gsu6Gyw">
        <defaultValue xmi:type="uml:InstanceValue" xmi:id="_UhMJIMGBEeaVzb3gsu6Gyw" instance="_m3dLQMGAEeaVzb3gsu6Gyw"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_bkR98MFsEeaVzb3gsu6Gyw" name="firstPlayerScore">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_1gk7UMGBEeaVzb3gsu6Gyw"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_CM6LYMF_EeaVzb3gsu6Gyw" name="secondPlayerScore">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_FRhy8MF_EeaVzb3gsu6Gyw"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_WP3dwN9XEeaslsNogbStzw" name="timer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_CPD1AK3jEeeHdMWUyAlTZg" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_CVlTwa3jEeeHdMWUyAlTZg" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_CVlTwq3jEeeHdMWUyAlTZg" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_CXle4K3jEeeHdMWUyAlTZg" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_CXle4a3jEeeHdMWUyAlTZg" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_CXmF8K3jEeeHdMWUyAlTZg" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_CYAVoK3jEeeHdMWUyAlTZg" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_HfQcUMFfEeaVzb3gsu6Gyw" name="RefereeStateMachine" isReentrant="false">
        <region xmi:id="_HfbbcMFfEeaVzb3gsu6Gyw" name="Region">
          <transition xmi:id="_8MjZ0ExXEeeqN6OadgglSg" name="Initial" source="_DGNfcK3jEeeHdMWUyAlTZg" target="_0bctpUxaEeeqN6OadgglSg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DHpp4K3jEeeHdMWUyAlTZg" name="Initial__332">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;Pseudo17&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_WZ_XEExYEeeqN6OadgglSg" name="Pseudo7__none__10" source="_Cz9R0K3jEeeHdMWUyAlTZg" target="_aNM7QExeEeeqN6OadgglSg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C1ZcQK3jEeeHdMWUyAlTZg" name="Pseudo7__none__10__197">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Pseudo7__none__10&quot;,(char *)&quot;Debug__Path__Pseudo7__none__10&quot;,(char *)&quot;Pseudo11&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_tjGnsExYEeeqN6OadgglSg" name="Pseudo5__none__18" source="_DHq4AK3jEeeHdMWUyAlTZg" target="_HzVJdE05EeeqN6OadgglSg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DJA70a3jEeeHdMWUyAlTZg" name="Pseudo5__none__18__346">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Pseudo5__none__18&quot;,(char *)&quot;Debug__Path__Pseudo5__none__18&quot;,(char *)&quot;Pseudo19&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5iVkYExZEeeqN6OadgglSg" name="none__Game Over__12" source="_C17AsK3jEeeHdMWUyAlTZg" target="_2OZucExZEeeqN6OadgglSg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C4gaoK3jEeeHdMWUyAlTZg" name="none__Game Over__12__221">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::none__Game Over__12&quot;,(char *)&quot;Debug__Path__none__Game Over__12&quot;,(char *)&quot;Game Over&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_7C3jAExZEeeqN6OadgglSg" name="none__Game Over__3" source="_CoCVsK3jEeeHdMWUyAlTZg" target="_2OZucExZEeeqN6OadgglSg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CqJ1kK3jEeeHdMWUyAlTZg" name="none__Game Over__3__100">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::none__Game Over__3&quot;,(char *)&quot;Debug__Path__none__Game Over__3&quot;,(char *)&quot;Game Over&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_-AFJ4U08EeeqN6OadgglSg" name="Game Over__Pseudo2__24" source="_Dcn0UK3jEeeHdMWUyAlTZg" target="_9_7Y4E08EeeqN6OadgglSg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Dexwca3jEeeHdMWUyAlTZg" name="Game Over__Pseudo2__24__576">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Game Over__Pseudo2__24&quot;,(char *)&quot;Debug__Path__Game Over__Pseudo2__24&quot;,(char *)&quot;Pseudo2&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_Cozxwa3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__3" source="_HzeTYE05EeeqN6OadgglSg" target="_CoCVsK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Cozxwq3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__3__78">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__none__Game Over__3&quot;,(char *)&quot;Pseudo4&quot;,(char *)&quot;Debug__Path__none__Game Over__3&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_Co5RUK3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__3__S" guard="_Co54Ya3jEeeHdMWUyAlTZg" source="_CoCVsK3jEeeHdMWUyAlTZg" target="_Cofosa3jEeeHdMWUyAlTZg">
            <ownedRule xmi:id="_Co54Ya3jEeeHdMWUyAlTZg" name="Debug__Guardnone__Game Over__3">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_Co54YK3jEeeHdMWUyAlTZg" name="Debug__Guardnone__Game Over__3">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo4&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Co54Yq3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__3__S__80">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__none__Game Over__3__S&quot;,(char *)&quot;Debug__Path__none__Game Over__3&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_Co6fcK3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__3__E" source="_Cou5QK3jEeeHdMWUyAlTZg" target="_2OZucExZEeeqN6OadgglSg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Co7GgK3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__3__E__81">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__none__Game Over__3__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Game Over&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_Co-J0K3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__3__dbg__varChange" source="_CoPxEa3jEeeHdMWUyAlTZg" target="_CoPxEa3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Co-w4a3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__3__dbg__varChange__83">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_Co-w4K3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_Co-w4q3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__3__dbg__setBreakPoint" source="_CoPxEa3jEeeHdMWUyAlTZg" target="_CoPxEa3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Co-w5K3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__3__dbg__setBreakPoint__84">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Co-w463jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_Co-w5a3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__3__dbg__remBreakPoint" source="_CoPxEa3jEeeHdMWUyAlTZg" target="_CoPxEa3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Co_X8a3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__3__dbg__remBreakPoint__85">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Co_X8K3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_Co_X8q3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__3__dbg__viewBreakPoints" source="_CoPxEa3jEeeHdMWUyAlTZg" target="_CoPxEa3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Co_X9K3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__3__dbg__viewBreakPoints__86">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Co_X863jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_Co_X9a3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__3__dbg__dbgSetExecMode" source="_CoPxEa3jEeeHdMWUyAlTZg" target="_CoPxEa3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Co_X963jEeeHdMWUyAlTZg" name="Debug__none__Game Over__3__dbg__dbgSetExecMode__87">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_Co_X9q3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_Co__AK3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__3__dbg__dbgDeferMsg" source="_CoPxEa3jEeeHdMWUyAlTZg" target="_CoPxEa3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Co__Aq3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__3__dbg__dbgDeferMsg__88">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Co__Aa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
          </transition>
          <transition xmi:id="_C0lj8a3jEeeHdMWUyAlTZg" name="Debug__Pseudo7__none__10" source="_0bmepkxaEeeqN6OadgglSg" target="_Cz9R0K3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C0lj8q3jEeeHdMWUyAlTZg" name="Debug__Pseudo7__none__10__185">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__Pseudo7__none__10&quot;,(char *)&quot;Pseudo7&quot;,(char *)&quot;Debug__Path__Pseudo7__none__10&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_C0mLAK3jEeeHdMWUyAlTZg" name="Debug__Pseudo7__none__10__S" guard="_C0pOUa3jEeeHdMWUyAlTZg" source="_Cz9R0K3jEeeHdMWUyAlTZg" target="_C0KtMa3jEeeHdMWUyAlTZg">
            <ownedRule xmi:id="_C0pOUa3jEeeHdMWUyAlTZg" name="Debug__GuardPseudo7__none__10">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_C0pOUK3jEeeHdMWUyAlTZg" name="Debug__GuardPseudo7__none__10">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo7&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C0pOUq3jEeeHdMWUyAlTZg" name="Debug__Pseudo7__none__10__S__187">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__Pseudo7__none__10__S&quot;,(char *)&quot;Debug__Path__Pseudo7__none__10&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_C0qccK3jEeeHdMWUyAlTZg" name="Debug__Pseudo7__none__10__E" source="_C0TQEa3jEeeHdMWUyAlTZg" target="_aNM7QExeEeeqN6OadgglSg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C0qcca3jEeeHdMWUyAlTZg" name="Debug__Pseudo7__none__10__E__188">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__Pseudo7__none__10__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Pseudo11&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_C0330K3jEeeHdMWUyAlTZg" name="Debug__Pseudo7__none__10__dbg__varChange" source="_C0HC0a3jEeeHdMWUyAlTZg" target="_C0HC0a3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C0330q3jEeeHdMWUyAlTZg" name="Debug__Pseudo7__none__10__dbg__varChange__190">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_C0330a3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_C04e4K3jEeeHdMWUyAlTZg" name="Debug__Pseudo7__none__10__dbg__setBreakPoint" source="_C0HC0a3jEeeHdMWUyAlTZg" target="_C0HC0a3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C04e4q3jEeeHdMWUyAlTZg" name="Debug__Pseudo7__none__10__dbg__setBreakPoint__191">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_C04e4a3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_C04e463jEeeHdMWUyAlTZg" name="Debug__Pseudo7__none__10__dbg__remBreakPoint" source="_C0HC0a3jEeeHdMWUyAlTZg" target="_C0HC0a3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C05tAK3jEeeHdMWUyAlTZg" name="Debug__Pseudo7__none__10__dbg__remBreakPoint__192">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_C04e5K3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_C05tAa3jEeeHdMWUyAlTZg" name="Debug__Pseudo7__none__10__dbg__viewBreakPoints" source="_C0HC0a3jEeeHdMWUyAlTZg" target="_C0HC0a3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C05tA63jEeeHdMWUyAlTZg" name="Debug__Pseudo7__none__10__dbg__viewBreakPoints__193">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_C05tAq3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_C05tBK3jEeeHdMWUyAlTZg" name="Debug__Pseudo7__none__10__dbg__dbgSetExecMode" source="_C0HC0a3jEeeHdMWUyAlTZg" target="_C0HC0a3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C05tBq3jEeeHdMWUyAlTZg" name="Debug__Pseudo7__none__10__dbg__dbgSetExecMode__194">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_C05tBa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_C08wUK3jEeeHdMWUyAlTZg" name="Debug__Pseudo7__none__10__dbg__dbgDeferMsg" source="_C0HC0a3jEeeHdMWUyAlTZg" target="_C0HC0a3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C08wUq3jEeeHdMWUyAlTZg" name="Debug__Pseudo7__none__10__dbg__dbgDeferMsg__195">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_C08wUa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
          </transition>
          <transition xmi:id="_C21msa3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__12" source="_aNfPIExeEeeqN6OadgglSg" target="_C17AsK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C21msq3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__12__199">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__none__Game Over__12&quot;,(char *)&quot;Pseudo13&quot;,(char *)&quot;Debug__Path__none__Game Over__12&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_C22NwK3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__12__S" guard="_C22Nwq3jEeeHdMWUyAlTZg" source="_C17AsK3jEeeHdMWUyAlTZg" target="_C2clIa3jEeeHdMWUyAlTZg">
            <ownedRule xmi:id="_C22Nwq3jEeeHdMWUyAlTZg" name="Debug__Guardnone__Game Over__12">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_C22Nwa3jEeeHdMWUyAlTZg" name="Debug__Guardnone__Game Over__12">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo13&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C25REK3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__12__S__201">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__none__Game Over__12__S&quot;,(char *)&quot;Debug__Path__none__Game Over__12&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_C254IK3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__12__E" source="_C2nkQa3jEeeHdMWUyAlTZg" target="_2OZucExZEeeqN6OadgglSg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C254Ia3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__12__E__202">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__none__Game Over__12__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Game Over&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_C27GQK3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__12__dbg__varChange" source="_C2PJwK3jEeeHdMWUyAlTZg" target="_C2PJwK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C27GQq3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__12__dbg__varChange__204">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_C27GQa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_C27GQ63jEeeHdMWUyAlTZg" name="Debug__none__Game Over__12__dbg__setBreakPoint" source="_C2PJwK3jEeeHdMWUyAlTZg" target="_C2PJwK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C27GRa3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__12__dbg__setBreakPoint__205">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_C27GRK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_C3GscK3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__12__dbg__remBreakPoint" source="_C2PJwK3jEeeHdMWUyAlTZg" target="_C2PJwK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C3Gscq3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__12__dbg__remBreakPoint__206">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_C3Gsca3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_C3Gsc63jEeeHdMWUyAlTZg" name="Debug__none__Game Over__12__dbg__viewBreakPoints" source="_C2PJwK3jEeeHdMWUyAlTZg" target="_C2PJwK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C3Gsda3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__12__dbg__viewBreakPoints__207">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_C3GsdK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_C3HTgK3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__12__dbg__dbgSetExecMode" source="_C2PJwK3jEeeHdMWUyAlTZg" target="_C2PJwK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C3HTgq3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__12__dbg__dbgSetExecMode__208">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_C3HTga3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_C3HTg63jEeeHdMWUyAlTZg" name="Debug__none__Game Over__12__dbg__dbgDeferMsg" source="_C2PJwK3jEeeHdMWUyAlTZg" target="_C2PJwK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C3HTha3jEeeHdMWUyAlTZg" name="Debug__none__Game Over__12__dbg__dbgDeferMsg__209">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_C3HThK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
          </transition>
          <transition xmi:id="_DG4N0a3jEeeHdMWUyAlTZg" name="Debug__Initial" source="_De_L0K3jEeeHdMWUyAlTZg" target="_DGNfcK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DG4N0q3jEeeHdMWUyAlTZg" name="Debug__Initial__320">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;Pseudo19&quot;,&quot;in&quot;,&quot;Waiting for Round&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Getting Player Choice&quot;,&quot;&quot;,&quot;whoWon?&quot;,&quot;picked&quot;,&quot;Play&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;new game&quot;,&quot;Waiting For Round&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;isGameOver?&quot;,&quot;game over&quot;,&quot;whoWon?&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Getting Player Choice&quot;,&quot;&quot;,&quot;isGameOver?&quot;,&quot;picked&quot;,&quot;Play&quot;);
Debug__SRO.addTransitionsFromState(&quot;Waiting For Round&quot;,&quot;&quot;,&quot;Starting Round&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Waiting for Round&quot;,&quot;&quot;,&quot;Starting Round&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Waiting for Round&quot;,&quot;&quot;,&quot;Starting Round&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Pseudo7&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;whoWon?&quot;,&quot;player 1 wins&quot;,&quot;Pseudo13&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;whoWon?&quot;,&quot;player 2 wins&quot;,&quot;Pseudo13&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;&quot;,&quot;Game Over&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;whoWon?&quot;,&quot;Tie&quot;,&quot;Pseudo4&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Game Over&quot;,&quot;&quot;,&quot;Pseudo2&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Pseudo5&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;picking&quot;,&quot;IDLE&quot;,&quot;go&quot;,&quot;Play&quot;);
Debug__SRO.addTransitionsFromState(&quot;Pseudo11&quot;,&quot;in&quot;,&quot;Waiting for Round&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;whoWon?&quot;,&quot;Player 2 Wins&quot;,&quot;Pseudo4&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Getting Player Choice&quot;,&quot;&quot;,&quot;&quot;,&quot;picked&quot;,&quot;Play&quot;);
Debug__SRO.addTransitionsFromState(&quot;Starting Round&quot;,&quot;&quot;,&quot;Getting Player Choice&quot;,&quot;picked&quot;,&quot;Play&quot;);
Debug__SRO.addTransitionsFromState(&quot;Starting Round&quot;,&quot;&quot;,&quot;Getting Player Choice&quot;,&quot;picked&quot;,&quot;Play&quot;);
Debug__SRO.addTransitionsFromState(&quot;Pseudo17&quot;,&quot;in&quot;,&quot;Waiting For Round&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;isGameOver?&quot;,&quot;to round 3&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;whoWon?&quot;,&quot;Player 1 Wins&quot;,&quot;Pseudo4&quot;,&quot;&quot;,&quot;&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_DfFSc63jEeeHdMWUyAlTZg" name="ConnectionEstablished" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_DG9tYK3jEeeHdMWUyAlTZg" name="Debug__Initial__S" guard="_DG9tYq3jEeeHdMWUyAlTZg" source="_DGNfcK3jEeeHdMWUyAlTZg" target="_DGjdsa3jEeeHdMWUyAlTZg">
            <ownedRule xmi:id="_DG9tYq3jEeeHdMWUyAlTZg" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_DG9tYa3jEeeHdMWUyAlTZg" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo16&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DG-UcK3jEeeHdMWUyAlTZg" name="Debug__Initial__S__322">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_DG-7gK3jEeeHdMWUyAlTZg" name="Debug__Initial__E" source="_DGxgIa3jEeeHdMWUyAlTZg" target="_0bctpUxaEeeqN6OadgglSg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DG-7ga3jEeeHdMWUyAlTZg" name="Debug__Initial__E__323">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Pseudo17&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_DHDM8K3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__varChange" source="_DGWCUa3jEeeHdMWUyAlTZg" target="_DGWCUa3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DHDM8q3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__varChange__325">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_DHDM8a3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_DHDM863jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__setBreakPoint" source="_DGWCUa3jEeeHdMWUyAlTZg" target="_DGWCUa3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DHDM9a3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__setBreakPoint__326">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_DHDM9K3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_DHD0AK3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__remBreakPoint" source="_DGWCUa3jEeeHdMWUyAlTZg" target="_DGWCUa3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DHD0Aq3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__remBreakPoint__327">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_DHD0Aa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_DHD0A63jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__viewBreakPoints" source="_DGWCUa3jEeeHdMWUyAlTZg" target="_DGWCUa3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DHD0Ba3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__viewBreakPoints__328">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_DHD0BK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_DHD0Bq3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__dbgSetExecMode" source="_DGWCUa3jEeeHdMWUyAlTZg" target="_DGWCUa3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DHD0CK3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__dbgSetExecMode__329">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_DHD0B63jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_DHEbEK3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__dbgDeferMsg" source="_DGWCUa3jEeeHdMWUyAlTZg" target="_DGWCUa3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DHEbEq3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__dbgDeferMsg__330">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_DHEbEa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
          </transition>
          <transition xmi:id="_DIRU8K3jEeeHdMWUyAlTZg" name="Debug__Pseudo5__none__18" source="_aNWFMExeEeeqN6OadgglSg" target="_DHq4AK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DIRU8a3jEeeHdMWUyAlTZg" name="Debug__Pseudo5__none__18__334">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__Pseudo5__none__18&quot;,(char *)&quot;Pseudo5&quot;,(char *)&quot;Debug__Path__Pseudo5__none__18&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_DIR8AK3jEeeHdMWUyAlTZg" name="Debug__Pseudo5__none__18__S" guard="_DIVmYa3jEeeHdMWUyAlTZg" source="_DHq4AK3jEeeHdMWUyAlTZg" target="_DH79wa3jEeeHdMWUyAlTZg">
            <ownedRule xmi:id="_DIVmYa3jEeeHdMWUyAlTZg" name="Debug__GuardPseudo5__none__18">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_DIVmYK3jEeeHdMWUyAlTZg" name="Debug__GuardPseudo5__none__18">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo5&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DIVmYq3jEeeHdMWUyAlTZg" name="Debug__Pseudo5__none__18__S__336">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__Pseudo5__none__18__S&quot;,(char *)&quot;Debug__Path__Pseudo5__none__18&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_DIWNcK3jEeeHdMWUyAlTZg" name="Debug__Pseudo5__none__18__E" source="_DIG84a3jEeeHdMWUyAlTZg" target="_HzVJdE05EeeqN6OadgglSg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DIW0gK3jEeeHdMWUyAlTZg" name="Debug__Pseudo5__none__18__E__337">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__Pseudo5__none__18__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Pseudo19&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_DIc7IK3jEeeHdMWUyAlTZg" name="Debug__Pseudo5__none__18__dbg__varChange" source="_DHxlsa3jEeeHdMWUyAlTZg" target="_DHxlsa3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DIc7Iq3jEeeHdMWUyAlTZg" name="Debug__Pseudo5__none__18__dbg__varChange__339">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_DIc7Ia3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_DIc7I63jEeeHdMWUyAlTZg" name="Debug__Pseudo5__none__18__dbg__setBreakPoint" source="_DHxlsa3jEeeHdMWUyAlTZg" target="_DHxlsa3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DIdiMa3jEeeHdMWUyAlTZg" name="Debug__Pseudo5__none__18__dbg__setBreakPoint__340">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_DIdiMK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_DIdiMq3jEeeHdMWUyAlTZg" name="Debug__Pseudo5__none__18__dbg__remBreakPoint" source="_DHxlsa3jEeeHdMWUyAlTZg" target="_DHxlsa3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DIdiNK3jEeeHdMWUyAlTZg" name="Debug__Pseudo5__none__18__dbg__remBreakPoint__341">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_DIdiM63jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_DIdiNa3jEeeHdMWUyAlTZg" name="Debug__Pseudo5__none__18__dbg__viewBreakPoints" source="_DHxlsa3jEeeHdMWUyAlTZg" target="_DHxlsa3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DIdiN63jEeeHdMWUyAlTZg" name="Debug__Pseudo5__none__18__dbg__viewBreakPoints__342">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_DIdiNq3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_DIeJQK3jEeeHdMWUyAlTZg" name="Debug__Pseudo5__none__18__dbg__dbgSetExecMode" source="_DHxlsa3jEeeHdMWUyAlTZg" target="_DHxlsa3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DIeJQq3jEeeHdMWUyAlTZg" name="Debug__Pseudo5__none__18__dbg__dbgSetExecMode__343">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_DIeJQa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_DIeJQ63jEeeHdMWUyAlTZg" name="Debug__Pseudo5__none__18__dbg__dbgDeferMsg" source="_DHxlsa3jEeeHdMWUyAlTZg" target="_DHxlsa3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DIhMkK3jEeeHdMWUyAlTZg" name="Debug__Pseudo5__none__18__dbg__dbgDeferMsg__344">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_DIeJRK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
          </transition>
          <transition xmi:id="_DdPfYa3jEeeHdMWUyAlTZg" name="Debug__Game Over__Pseudo2__24" source="_2OZucExZEeeqN6OadgglSg" target="_Dcn0UK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DdPfYq3jEeeHdMWUyAlTZg" name="Debug__Game Over__Pseudo2__24__555">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__Game Over__Pseudo2__24&quot;,(char *)&quot;Game Over&quot;,(char *)&quot;Debug__Path__Game Over__Pseudo2__24&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_SGNMcKw5EeeCBPdMF60TmA" port="_WP3dwN9XEeaslsNogbStzw">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_DdQtgK3jEeeHdMWUyAlTZg" name="Debug__Game Over__Pseudo2__24__S" guard="_DdTJwa3jEeeHdMWUyAlTZg" source="_Dcn0UK3jEeeHdMWUyAlTZg" target="_Dc6IMa3jEeeHdMWUyAlTZg">
            <ownedRule xmi:id="_DdTJwa3jEeeHdMWUyAlTZg" name="Debug__GuardGame Over__Pseudo2__24">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_DdTJwK3jEeeHdMWUyAlTZg" name="Debug__GuardGame Over__Pseudo2__24">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Game Over&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DdTw0K3jEeeHdMWUyAlTZg" name="Debug__Game Over__Pseudo2__24__S__557">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__Game Over__Pseudo2__24__S&quot;,(char *)&quot;Debug__Path__Game Over__Pseudo2__24&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_DdUX4K3jEeeHdMWUyAlTZg" name="Debug__Game Over__Pseudo2__24__E" source="_DdDSIa3jEeeHdMWUyAlTZg" target="_9_7Y4E08EeeqN6OadgglSg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DdUX4a3jEeeHdMWUyAlTZg" name="Debug__Game Over__Pseudo2__24__E__558">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__Game Over__Pseudo2__24__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Pseudo2&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_DdU-8K3jEeeHdMWUyAlTZg" name="Debug__Game Over__Pseudo2__24__dbg__varChange" source="_DcuiAK3jEeeHdMWUyAlTZg" target="_DcuiAK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DdVmAK3jEeeHdMWUyAlTZg" name="Debug__Game Over__Pseudo2__24__dbg__varChange__560">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_DdU-8a3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_DdYCQK3jEeeHdMWUyAlTZg" name="Debug__Game Over__Pseudo2__24__dbg__setBreakPoint" source="_DcuiAK3jEeeHdMWUyAlTZg" target="_DcuiAK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DdYCQq3jEeeHdMWUyAlTZg" name="Debug__Game Over__Pseudo2__24__dbg__setBreakPoint__561">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_DdYCQa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_DdYpUK3jEeeHdMWUyAlTZg" name="Debug__Game Over__Pseudo2__24__dbg__remBreakPoint" source="_DcuiAK3jEeeHdMWUyAlTZg" target="_DcuiAK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DdYpUq3jEeeHdMWUyAlTZg" name="Debug__Game Over__Pseudo2__24__dbg__remBreakPoint__562">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_DdYpUa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_DdYpU63jEeeHdMWUyAlTZg" name="Debug__Game Over__Pseudo2__24__dbg__viewBreakPoints" source="_DcuiAK3jEeeHdMWUyAlTZg" target="_DcuiAK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DdYpVa3jEeeHdMWUyAlTZg" name="Debug__Game Over__Pseudo2__24__dbg__viewBreakPoints__563">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_DdYpVK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_DdYpVq3jEeeHdMWUyAlTZg" name="Debug__Game Over__Pseudo2__24__dbg__dbgSetExecMode" source="_DcuiAK3jEeeHdMWUyAlTZg" target="_DcuiAK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DdZQYa3jEeeHdMWUyAlTZg" name="Debug__Game Over__Pseudo2__24__dbg__dbgSetExecMode__564">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_DdZQYK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_DdZQYq3jEeeHdMWUyAlTZg" name="Debug__Game Over__Pseudo2__24__dbg__dbgDeferMsg" source="_DcuiAK3jEeeHdMWUyAlTZg" target="_DcuiAK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DdZQZK3jEeeHdMWUyAlTZg" name="Debug__Game Over__Pseudo2__24__dbg__dbgDeferMsg__565">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_DdZQY63jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
          </transition>
          <transition xmi:id="_DfFSca3jEeeHdMWUyAlTZg" name="Debug__InitDebug" source="_HfhiEMFfEeaVzb3gsu6Gyw" target="_De_L0K3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DfFScq3jEeeHdMWUyAlTZg" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_HfhiEMFfEeaVzb3gsu6Gyw" name="Pseudo16"/>
          <subvertex xmi:type="uml:State" xmi:id="_6tCH0ExXEeeqN6OadgglSg" name="Round 1">
            <connectionPoint xmi:id="_0bctpUxaEeeqN6OadgglSg" name="Pseudo17" kind="entryPoint"/>
            <connectionPoint xmi:id="_0bmepkxaEeeqN6OadgglSg" name="Pseudo7" kind="exitPoint"/>
            <connectionPoint xmi:id="_9_7Y4E08EeeqN6OadgglSg" name="Pseudo2" kind="entryPoint"/>
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DgJCYK3jEeeHdMWUyAlTZg" name="Round 1__586">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DgJCYa3jEeeHdMWUyAlTZg" name="Round 1__587">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
            <region xmi:id="_0bTjsExaEeeqN6OadgglSg" name="Region1">
              <transition xmi:id="_HEeeQExbEeeqN6OadgglSg" name="in" kind="local" source="_DZUBoK3jEeeHdMWUyAlTZg" target="_7R2kwExaEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DbDHAK3jEeeHdMWUyAlTZg" name="in__540">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::in&quot;,(char *)&quot;Debug__Path__in&quot;,(char *)&quot;Waiting For Round&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_LgCYsExdEeeqN6OadgglSg" name="Starting Round__Getting Player Choice__14" source="_C_JOIK3jEeeHdMWUyAlTZg" target="_EyRgMExdEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_dnGEsExdEeeqN6OadgglSg">
                  <language>C++</language>
                  <body>    int player = msg->sapIndex();&#xD;
    log.show(&quot;Player %d played: &quot;, player);&#xD;
    switch (choice) {&#xD;
        case ROCK		:	log.show(&quot;ROCK&quot;); break;&#xD;
        case PAPER		:	log.show(&quot;PAPER&quot;); break;&#xD;
        case SCISSORS	:	log.show(&quot;SCISSORS&quot;); break;&#xD;
    }&#xD;
    if (player == 1) {&#xD;
    this->firstPlayerChoice = choice;&#xD;
    }&#xD;
    else if (player == 2){&#xD;
    this->secondPlayerChoice = choice;&#xD;
    } &#xD;
    log.show(&quot;\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Starting Round__Getting Player Choice__14&quot;,(char *)&quot;Debug__Path__Starting Round__Getting Player Choice__14&quot;,(char *)&quot;Getting Player Choice&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_sVMQ0ExdEeeqN6OadgglSg" name="Getting Player Choice__none__6" source="_Ctk9AK3jEeeHdMWUyAlTZg" target="_0bmepkxaEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yc5O4ExdEeeqN6OadgglSg">
                  <language>C++</language>
                  <body>    int player = msg->sapIndex();&#xD;
    log.show(&quot;Player %d played: &quot;, player);&#xD;
    switch (choice) {&#xD;
    case ROCK		:	log.show(&quot;ROCK&quot;); break;&#xD;
    case PAPER		:	log.show(&quot;PAPER&quot;); break;&#xD;
    case SCISSORS	:	log.show(&quot;SCISSORS&quot;); break;&#xD;
    }&#xD;
    if (player == 1) {&#xD;
    this->firstPlayerChoice = choice;&#xD;
    }&#xD;
    else if (player == 2){&#xD;
    this->secondPlayerChoice = choice;&#xD;
    } &#xD;
    log.show(&quot;\n&quot;);&#xD;
    if (this->firstPlayerChoice == this->secondPlayerChoice) {&#xD;
    log.show(&quot;Round %d Tied&quot;, this->round);&#xD;
    } else if ((this->secondPlayerChoice + 1) % 3 == this->firstPlayerChoice) {&#xD;
    log.show(&quot;Player 1 Wins Round %d!&quot;, this->round);&#xD;
    this->firstPlayerScore++;&#xD;
    } else {&#xD;
    log.show(&quot;Player 2 Wins Round %d!&quot;, this->round);&#xD;
    this->secondPlayerScore++;&#xD;
    }&#xD;
    log.show(&quot;\n&quot;);&#xD;
    this->round++;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Getting Player Choice__none__6&quot;,(char *)&quot;Debug__Path__Getting Player Choice__none__6&quot;,(char *)&quot;Pseudo7&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_ybyQEExnEeeqN6OadgglSg" name="Waiting For Round__Starting Round__20" source="_DLCVEK3jEeeHdMWUyAlTZg" target="_IBC-wExcEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DNBSEK3jEeeHdMWUyAlTZg" name="Waiting For Round__Starting Round__20__397">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Waiting For Round__Starting Round__20&quot;,(char *)&quot;Debug__Path__Waiting For Round__Starting Round__20&quot;,(char *)&quot;Starting Round&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_CzzXkE09EeeqN6OadgglSg" name="new game" kind="local" source="_Cl95IK3jEeeHdMWUyAlTZg" target="_7R2kwExaEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CnzsMK3jEeeHdMWUyAlTZg" name="new game__76">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::new game&quot;,(char *)&quot;Debug__Path__new game&quot;,(char *)&quot;Waiting For Round&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_CmmyUa3jEeeHdMWUyAlTZg" name="Debug__new game" source="_9_7Y4E08EeeqN6OadgglSg" target="_Cl95IK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CmuuIK3jEeeHdMWUyAlTZg" name="Debug__new game__54">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__new game&quot;,(char *)&quot;Pseudo2&quot;,(char *)&quot;Debug__Path__new game&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_CmvVMK3jEeeHdMWUyAlTZg" name="Debug__new game__S" guard="_CmvVMq3jEeeHdMWUyAlTZg" source="_Cl95IK3jEeeHdMWUyAlTZg" target="_CmNJsa3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_CmvVMq3jEeeHdMWUyAlTZg" name="Debug__Guardnew game">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_CmvVMa3jEeeHdMWUyAlTZg" name="Debug__Guardnew game">
                    <language>C++</language>
                    <body>return Debug__SRO.checkDebug(&quot;Pseudo2&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Cmv8QK3jEeeHdMWUyAlTZg" name="Debug__new game__S__56">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__new game__S&quot;,(char *)&quot;Debug__Path__new game&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_Cm2C4K3jEeeHdMWUyAlTZg" name="Debug__new game__E" source="_Cmig4K3jEeeHdMWUyAlTZg" target="_7R2kwExaEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Cm2C4a3jEeeHdMWUyAlTZg" name="Debug__new game__E__57">
                  <language>C++</language>
                  <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__new game__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Waiting For Round&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_Cm3RAK3jEeeHdMWUyAlTZg" name="Debug__new game__dbg__varChange" source="_CmBjga3jEeeHdMWUyAlTZg" target="_CmBjga3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Cm3RAq3jEeeHdMWUyAlTZg" name="Debug__new game__dbg__varChange__59">
                  <language>C++</language>
                  <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                </effect>
                <trigger xmi:id="_Cm3RAa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_Cm34EK3jEeeHdMWUyAlTZg" name="Debug__new game__dbg__setBreakPoint" source="_CmBjga3jEeeHdMWUyAlTZg" target="_CmBjga3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CnBpEK3jEeeHdMWUyAlTZg" name="Debug__new game__dbg__setBreakPoint__60">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_Cm34Ea3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CnCQIK3jEeeHdMWUyAlTZg" name="Debug__new game__dbg__remBreakPoint" source="_CmBjga3jEeeHdMWUyAlTZg" target="_CmBjga3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CnCQIq3jEeeHdMWUyAlTZg" name="Debug__new game__dbg__remBreakPoint__61">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_CnCQIa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CnCQI63jEeeHdMWUyAlTZg" name="Debug__new game__dbg__viewBreakPoints" source="_CmBjga3jEeeHdMWUyAlTZg" target="_CmBjga3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CnCQJa3jEeeHdMWUyAlTZg" name="Debug__new game__dbg__viewBreakPoints__62">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_CnCQJK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CnC3MK3jEeeHdMWUyAlTZg" name="Debug__new game__dbg__dbgSetExecMode" source="_CmBjga3jEeeHdMWUyAlTZg" target="_CmBjga3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CnC3Mq3jEeeHdMWUyAlTZg" name="Debug__new game__dbg__dbgSetExecMode__63">
                  <language>C++</language>
                  <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                </effect>
                <trigger xmi:id="_CnC3Ma3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CnC3M63jEeeHdMWUyAlTZg" name="Debug__new game__dbg__dbgDeferMsg" source="_CmBjga3jEeeHdMWUyAlTZg" target="_CmBjga3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CnC3Na3jEeeHdMWUyAlTZg" name="Debug__new game__dbg__dbgDeferMsg__64">
                  <language>C++</language>
                  <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                </effect>
                <trigger xmi:id="_CnC3NK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_Cu3Wca3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__none__6" source="_EyRgMExdEeeqN6OadgglSg" target="_Ctk9AK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Cu39gK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__none__6__116">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__Getting Player Choice__none__6&quot;,(char *)&quot;Getting Player Choice&quot;,(char *)&quot;Debug__Path__Getting Player Choice__none__6&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_uBMfoExdEeeqN6OadgglSg" event="_BhCxcMFfEeaVzb3gsu6Gyw" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_Cu7A0K3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__none__6__S" guard="_Cu7n4a3jEeeHdMWUyAlTZg" source="_Ctk9AK3jEeeHdMWUyAlTZg" target="_CuT80K3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_Cu7n4a3jEeeHdMWUyAlTZg" name="Debug__GuardGetting Player Choice__none__6">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_Cu7n4K3jEeeHdMWUyAlTZg" name="Debug__GuardGetting Player Choice__none__6">
                    <language>C++</language>
                    <body>return Debug__SRO.checkDebug(&quot;Getting Player Choice&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Cu7n4q3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__none__6__S__118">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__Getting Player Choice__none__6__S&quot;,(char *)&quot;Debug__Path__Getting Player Choice__none__6&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_Cu8O8K3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__none__6__E" source="_Cum3wa3jEeeHdMWUyAlTZg" target="_0bmepkxaEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Cu82AK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__none__6__E__119">
                  <language>C++</language>
                  <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__Getting Player Choice__none__6__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Pseudo7&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_CvCVkK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__none__6__dbg__varChange" source="_Ct3Q4a3jEeeHdMWUyAlTZg" target="_Ct3Q4a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CvC8oa3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__none__6__dbg__varChange__121">
                  <language>C++</language>
                  <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                </effect>
                <trigger xmi:id="_CvC8oK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CvDjsK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__none__6__dbg__setBreakPoint" source="_Ct3Q4a3jEeeHdMWUyAlTZg" target="_Ct3Q4a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CvDjsq3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__none__6__dbg__setBreakPoint__122">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_CvDjsa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CvDjs63jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__none__6__dbg__remBreakPoint" source="_Ct3Q4a3jEeeHdMWUyAlTZg" target="_Ct3Q4a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CvDjta3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__none__6__dbg__remBreakPoint__123">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_CvDjtK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CvEKwK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__none__6__dbg__viewBreakPoints" source="_Ct3Q4a3jEeeHdMWUyAlTZg" target="_Ct3Q4a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CvEKwq3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__none__6__dbg__viewBreakPoints__124">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_CvEKwa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CvEKw63jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__none__6__dbg__dbgSetExecMode" source="_Ct3Q4a3jEeeHdMWUyAlTZg" target="_Ct3Q4a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CvEKxa3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__none__6__dbg__dbgSetExecMode__125">
                  <language>C++</language>
                  <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                </effect>
                <trigger xmi:id="_CvEKxK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CvEKxq3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__none__6__dbg__dbgDeferMsg" source="_Ct3Q4a3jEeeHdMWUyAlTZg" target="_Ct3Q4a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CvEKyK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__none__6__dbg__dbgDeferMsg__126">
                  <language>C++</language>
                  <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                </effect>
                <trigger xmi:id="_CvEKx63jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_DAfR8a3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__14" source="_IBC-wExcEeeqN6OadgglSg" target="_C_JOIK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DAfR8q3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__14__273">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__Starting Round__Getting Player Choice__14&quot;,(char *)&quot;Starting Round&quot;,(char *)&quot;Debug__Path__Starting Round__Getting Player Choice__14&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_ZHDoAExdEeeqN6OadgglSg" event="_BhCxcMFfEeaVzb3gsu6Gyw" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_DAf5AK3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__14__S" guard="_DAn00a3jEeeHdMWUyAlTZg" source="_C_JOIK3jEeeHdMWUyAlTZg" target="_C_dXMK3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_DAn00a3jEeeHdMWUyAlTZg" name="Debug__GuardStarting Round__Getting Player Choice__14">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_DAn00K3jEeeHdMWUyAlTZg" name="Debug__GuardStarting Round__Getting Player Choice__14">
                    <language>C++</language>
                    <body>return Debug__SRO.checkDebug(&quot;Starting Round&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DAn00q3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__14__S__275">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__Starting Round__Getting Player Choice__14__S&quot;,(char *)&quot;Debug__Path__Starting Round__Getting Player Choice__14&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DAob4K3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__14__E" source="_DAPaUa3jEeeHdMWUyAlTZg" target="_EyRgMExdEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DAob4a3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__14__E__276">
                  <language>C++</language>
                  <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__Starting Round__Getting Player Choice__14__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Getting Player Choice&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DApC8K3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__14__dbg__varChange" source="_C_X3oa3jEeeHdMWUyAlTZg" target="_C_X3oa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DApqAa3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__14__dbg__varChange__278">
                  <language>C++</language>
                  <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                </effect>
                <trigger xmi:id="_DApqAK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DApqAq3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__14__dbg__setBreakPoint" source="_C_X3oa3jEeeHdMWUyAlTZg" target="_C_X3oa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DApqBK3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__14__dbg__setBreakPoint__279">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DApqA63jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DAt7cK3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__14__dbg__remBreakPoint" source="_C_X3oa3jEeeHdMWUyAlTZg" target="_C_X3oa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DAt7cq3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__14__dbg__remBreakPoint__280">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DAt7ca3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DAt7c63jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__14__dbg__viewBreakPoints" source="_C_X3oa3jEeeHdMWUyAlTZg" target="_C_X3oa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DAt7da3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__14__dbg__viewBreakPoints__281">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DAt7dK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DAuigK3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__14__dbg__dbgSetExecMode" source="_C_X3oa3jEeeHdMWUyAlTZg" target="_C_X3oa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DAuigq3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__14__dbg__dbgSetExecMode__282">
                  <language>C++</language>
                  <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                </effect>
                <trigger xmi:id="_DAuiga3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DAuig63jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__14__dbg__dbgDeferMsg" source="_C_X3oa3jEeeHdMWUyAlTZg" target="_C_X3oa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DAuiha3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__14__dbg__dbgDeferMsg__283">
                  <language>C++</language>
                  <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DAuihK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_DLdy4a3jEeeHdMWUyAlTZg" name="Debug__Waiting For Round__Starting Round__20" source="_7R2kwExaEeeqN6OadgglSg" target="_DLCVEK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DLdy4q3jEeeHdMWUyAlTZg" name="Debug__Waiting For Round__Starting Round__20__372">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__Waiting For Round__Starting Round__20&quot;,(char *)&quot;Waiting For Round&quot;,(char *)&quot;Debug__Path__Waiting For Round__Starting Round__20&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_zKo6IExnEeeqN6OadgglSg" port="_WP3dwN9XEeaslsNogbStzw">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:id="_DLeZ8K3jEeeHdMWUyAlTZg" name="Debug__Waiting For Round__Starting Round__20__S" guard="_DLfBAa3jEeeHdMWUyAlTZg" source="_DLCVEK3jEeeHdMWUyAlTZg" target="_DLLfAa3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_DLfBAa3jEeeHdMWUyAlTZg" name="Debug__GuardWaiting For Round__Starting Round__20">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_DLfBAK3jEeeHdMWUyAlTZg" name="Debug__GuardWaiting For Round__Starting Round__20">
                    <language>C++</language>
                    <body>return Debug__SRO.checkDebug(&quot;Waiting For Round&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DLfBAq3jEeeHdMWUyAlTZg" name="Debug__Waiting For Round__Starting Round__20__S__374">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__Waiting For Round__Starting Round__20__S&quot;,(char *)&quot;Debug__Path__Waiting For Round__Starting Round__20&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DLlHoK3jEeeHdMWUyAlTZg" name="Debug__Waiting For Round__Starting Round__20__E" source="_DLavkK3jEeeHdMWUyAlTZg" target="_IBC-wExcEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DLlHoa3jEeeHdMWUyAlTZg" name="Debug__Waiting For Round__Starting Round__20__E__375">
                  <language>C++</language>
                  <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__Waiting For Round__Starting Round__20__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Starting Round&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DLlusK3jEeeHdMWUyAlTZg" name="Debug__Waiting For Round__Starting Round__20__dbg__varChange" source="_DLIbsa3jEeeHdMWUyAlTZg" target="_DLIbsa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DLmVwa3jEeeHdMWUyAlTZg" name="Debug__Waiting For Round__Starting Round__20__dbg__varChange__377">
                  <language>C++</language>
                  <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                </effect>
                <trigger xmi:id="_DLmVwK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DLmVwq3jEeeHdMWUyAlTZg" name="Debug__Waiting For Round__Starting Round__20__dbg__setBreakPoint" source="_DLIbsa3jEeeHdMWUyAlTZg" target="_DLIbsa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DLoyAK3jEeeHdMWUyAlTZg" name="Debug__Waiting For Round__Starting Round__20__dbg__setBreakPoint__378">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DLmVw63jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DLpZEK3jEeeHdMWUyAlTZg" name="Debug__Waiting For Round__Starting Round__20__dbg__remBreakPoint" source="_DLIbsa3jEeeHdMWUyAlTZg" target="_DLIbsa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DLpZEq3jEeeHdMWUyAlTZg" name="Debug__Waiting For Round__Starting Round__20__dbg__remBreakPoint__379">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DLpZEa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DLpZE63jEeeHdMWUyAlTZg" name="Debug__Waiting For Round__Starting Round__20__dbg__viewBreakPoints" source="_DLIbsa3jEeeHdMWUyAlTZg" target="_DLIbsa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DLpZFa3jEeeHdMWUyAlTZg" name="Debug__Waiting For Round__Starting Round__20__dbg__viewBreakPoints__380">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DLpZFK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DLpZFq3jEeeHdMWUyAlTZg" name="Debug__Waiting For Round__Starting Round__20__dbg__dbgSetExecMode" source="_DLIbsa3jEeeHdMWUyAlTZg" target="_DLIbsa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DLqAIK3jEeeHdMWUyAlTZg" name="Debug__Waiting For Round__Starting Round__20__dbg__dbgSetExecMode__381">
                  <language>C++</language>
                  <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                </effect>
                <trigger xmi:id="_DLpZF63jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DLqAIa3jEeeHdMWUyAlTZg" name="Debug__Waiting For Round__Starting Round__20__dbg__dbgDeferMsg" source="_DLIbsa3jEeeHdMWUyAlTZg" target="_DLIbsa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DLqAI63jEeeHdMWUyAlTZg" name="Debug__Waiting For Round__Starting Round__20__dbg__dbgDeferMsg__382">
                  <language>C++</language>
                  <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DLqAIq3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_DaH58a3jEeeHdMWUyAlTZg" name="Debug__in" source="_0bctpUxaEeeqN6OadgglSg" target="_DZUBoK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DaH58q3jEeeHdMWUyAlTZg" name="Debug__in__518">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__in&quot;,(char *)&quot;Pseudo17&quot;,(char *)&quot;Debug__Path__in&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DaJIEK3jEeeHdMWUyAlTZg" name="Debug__in__S" guard="_DaJIEq3jEeeHdMWUyAlTZg" source="_DZUBoK3jEeeHdMWUyAlTZg" target="_DZx7sa3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_DaJIEq3jEeeHdMWUyAlTZg" name="Debug__Guardin">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_DaJIEa3jEeeHdMWUyAlTZg" name="Debug__Guardin">
                    <language>C++</language>
                    <body>return Debug__SRO.checkDebug(&quot;Pseudo17&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DaJIE63jEeeHdMWUyAlTZg" name="Debug__in__S__520">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__in__S&quot;,(char *)&quot;Debug__Path__in&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DaJvIK3jEeeHdMWUyAlTZg" name="Debug__in__E" source="_DZ6eka3jEeeHdMWUyAlTZg" target="_7R2kwExaEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DaJvIa3jEeeHdMWUyAlTZg" name="Debug__in__E__521">
                  <language>C++</language>
                  <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__in__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Waiting For Round&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DaK9QK3jEeeHdMWUyAlTZg" name="Debug__in__dbg__varChange" source="_DZg18a3jEeeHdMWUyAlTZg" target="_DZg18a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DaOAkK3jEeeHdMWUyAlTZg" name="Debug__in__dbg__varChange__523">
                  <language>C++</language>
                  <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                </effect>
                <trigger xmi:id="_DaK9Qa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DaOAka3jEeeHdMWUyAlTZg" name="Debug__in__dbg__setBreakPoint" source="_DZg18a3jEeeHdMWUyAlTZg" target="_DZg18a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DaOAk63jEeeHdMWUyAlTZg" name="Debug__in__dbg__setBreakPoint__524">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DaOAkq3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DaOAlK3jEeeHdMWUyAlTZg" name="Debug__in__dbg__remBreakPoint" source="_DZg18a3jEeeHdMWUyAlTZg" target="_DZg18a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DaOAlq3jEeeHdMWUyAlTZg" name="Debug__in__dbg__remBreakPoint__525">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DaOAla3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DaOnoK3jEeeHdMWUyAlTZg" name="Debug__in__dbg__viewBreakPoints" source="_DZg18a3jEeeHdMWUyAlTZg" target="_DZg18a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DaOnoq3jEeeHdMWUyAlTZg" name="Debug__in__dbg__viewBreakPoints__526">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DaOnoa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DaOno63jEeeHdMWUyAlTZg" name="Debug__in__dbg__dbgSetExecMode" source="_DZg18a3jEeeHdMWUyAlTZg" target="_DZg18a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DaOnpa3jEeeHdMWUyAlTZg" name="Debug__in__dbg__dbgSetExecMode__527">
                  <language>C++</language>
                  <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                </effect>
                <trigger xmi:id="_DaOnpK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DaOnpq3jEeeHdMWUyAlTZg" name="Debug__in__dbg__dbgDeferMsg" source="_DZg18a3jEeeHdMWUyAlTZg" target="_DZg18a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DaPOsK3jEeeHdMWUyAlTZg" name="Debug__in__dbg__dbgDeferMsg__528">
                  <language>C++</language>
                  <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DaOnp63jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_7R2kwExaEeeqN6OadgglSg" name="Waiting For Round">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_iN7X0ExbEeeqN6OadgglSg" name="setting timer">
                  <language>C++</language>
                  <body>if( not Debug__SRO.checkDebug(&quot;Waiting For Round&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
timer.informIn(UMLRTTimespec(2,0));
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Waiting For Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DgTacK3jEeeHdMWUyAlTZg" name="Waiting For Round__593">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Waiting For Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IBC-wExcEeeqN6OadgglSg" name="Starting Round">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_VMtu0ExcEeeqN6OadgglSg" name="starting round">
                  <language>C++</language>
                  <body>if( not Debug__SRO.checkDebug(&quot;Starting Round&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
log.show(&quot;\n-- Starting round %d --\n&quot;, this->round);&#xD;
play.go(this->round).send();
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Starting Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DgDi0K3jEeeHdMWUyAlTZg" name="Starting Round__583">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Starting Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_EyRgMExdEeeqN6OadgglSg" name="Getting Player Choice">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DgH0QK3jEeeHdMWUyAlTZg" name="Getting Player Choice__584">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Getting Player Choice&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DgIbUK3jEeeHdMWUyAlTZg" name="Getting Player Choice__585">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Getting Player Choice&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_Cl95IK3jEeeHdMWUyAlTZg" name="Debug__Path__new game" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_CmBjga3jEeeHdMWUyAlTZg" name="Debug__C__new game">
                <connectionPoint xmi:id="_CmNJsa3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
                <connectionPoint xmi:id="_Cmig4K3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
                <region xmi:id="_CmBjgq3jEeeHdMWUyAlTZg" name="Region1">
                  <transition xmi:id="_CnN2UK3jEeeHdMWUyAlTZg" name="Debug__init__trans__new game" source="_CmNJsa3jEeeHdMWUyAlTZg" target="_CnMoMa3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CnuMoK3jEeeHdMWUyAlTZg" name="Debug__init__trans__new game__69">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__new game::Region1::Debug__init__trans__new game&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__new game&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                    </effect>
                  </transition>
                  <transition xmi:id="_CnRgsK3jEeeHdMWUyAlTZg" name="Debug__Ac__new game" source="_CnMoMa3jEeeHdMWUyAlTZg" target="_CnNPQK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CnvawK3jEeeHdMWUyAlTZg" name="Debug__Ac__new game__71">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__new game::Region1::Debug__Ac__new game&quot;,(char *)&quot;Debug__B__Ac__new game&quot;,(char *)&quot;Debug__A__Ac__new game&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_CnSHwK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_CnSHwa3jEeeHdMWUyAlTZg" name="Debug__En__Waiting For Round" source="_CnNPQK3jEeeHdMWUyAlTZg" target="_CnNPQq3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CnSHw63jEeeHdMWUyAlTZg" name="setting timer" visibility="public" isReentrant="true">
                      <language>C++</language>
                      <body>timer.informIn(UMLRTTimespec(2,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__new game::Region1::Debug__En__Waiting For Round&quot;,(char *)&quot;Debug__A__Ac__new game&quot;,(char *)&quot;Debug__A__En__new game&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_CnSHwq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_CnSHxK3jEeeHdMWUyAlTZg" name="Debug__end__trans__new game" source="_CnNPQq3jEeeHdMWUyAlTZg" target="_Cmig4K3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CnzFIK3jEeeHdMWUyAlTZg" name="Debug__end__trans__new game__74">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__new game::Region1::Debug__end__trans__new game&quot;,(char *)&quot;Debug__A__En__new game&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_CnSHxa3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_CnMoMa3jEeeHdMWUyAlTZg" name="Debug__B__Ac__new game">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_CnMoMq3jEeeHdMWUyAlTZg" name="Debug__B__Ac__new game">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;new game&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__new game::Region1::Debug__B__Ac__new game&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_CnbRsa3jEeeHdMWUyAlTZg" name="Debug__B__Ac__new game__65">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__new game::Region1::Debug__B__Ac__new game&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_CnNPQK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__new game">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_CnNPQa3jEeeHdMWUyAlTZg" name="Debug__A__Ac__new game">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;new game&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Waiting For Round&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__new game::Region1::Debug__A__Ac__new game&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Cnkboa3jEeeHdMWUyAlTZg" name="Debug__A__Ac__new game__66">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__new game::Region1::Debug__A__Ac__new game&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_CnNPQq3jEeeHdMWUyAlTZg" name="Debug__A__En__new game">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_CnNPQ63jEeeHdMWUyAlTZg" name="Debug__A__En__new game">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Waiting For Round&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__new game::Region1::Debug__A__En__new game&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_CnrJUK3jEeeHdMWUyAlTZg" name="Debug__A__En__new game__67">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__new game::Region1::Debug__A__En__new game&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_Ctk9AK3jEeeHdMWUyAlTZg" name="Debug__Path__Getting Player Choice__none__6" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_Ct3Q4a3jEeeHdMWUyAlTZg" name="Debug__C__Getting Player Choice__none__6">
                <connectionPoint xmi:id="_CuT80K3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
                <connectionPoint xmi:id="_Cum3wa3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
                <region xmi:id="_Ct3Q4q3jEeeHdMWUyAlTZg" name="Region1">
                  <transition xmi:id="_CvPJ4q3jEeeHdMWUyAlTZg" name="Debug__init__trans__Getting Player Choice__none__6" source="_CuT80K3jEeeHdMWUyAlTZg" target="_CvMGkK3jEeeHdMWUyAlTZg"/>
                  <transition xmi:id="_CvPJ463jEeeHdMWUyAlTZg" name="Debug__Ex__Getting Player Choice" source="_CvMGkK3jEeeHdMWUyAlTZg" target="_CvOi0a3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CvyjgK3jEeeHdMWUyAlTZg" name="Debug__Ex__Getting Player Choice__131">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Getting Player Choice__none__6::Region1::Debug__Ex__Getting Player Choice&quot;,(char *)&quot;Debug__B__Ex__Getting Player Choice&quot;,(char *)&quot;Debug__B__Ac__Getting Player Choice__none__6&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_CvPJ5K3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_CvPw8K3jEeeHdMWUyAlTZg" name="Debug__AC__Getting Player Choice__none__6" source="_CvOi0a3jEeeHdMWUyAlTZg" target="_CvPJ4K3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CvPw8q3jEeeHdMWUyAlTZg" visibility="public" isReentrant="true">
                      <name xsi:nil="true"/>
                      <language>C++</language>
                      <body>    int player = msg->sapIndex();&#xD;
    log.show(&quot;Player %d played: &quot;, player);&#xD;
    switch (choice) {&#xD;
    case ROCK		:	log.show(&quot;ROCK&quot;); break;&#xD;
    case PAPER		:	log.show(&quot;PAPER&quot;); break;&#xD;
    case SCISSORS	:	log.show(&quot;SCISSORS&quot;); break;&#xD;
    }&#xD;
    if (player == 1) {&#xD;
    this->firstPlayerChoice = choice;&#xD;
    }&#xD;
    else if (player == 2){&#xD;
    this->secondPlayerChoice = choice;&#xD;
    } &#xD;
    log.show(&quot;\n&quot;);&#xD;
    if (this->firstPlayerChoice == this->secondPlayerChoice) {&#xD;
    log.show(&quot;Round %d Tied&quot;, this->round);&#xD;
    } else if ((this->secondPlayerChoice + 1) % 3 == this->firstPlayerChoice) {&#xD;
    log.show(&quot;Player 1 Wins Round %d!&quot;, this->round);&#xD;
    this->firstPlayerScore++;&#xD;
    } else {&#xD;
    log.show(&quot;Player 2 Wins Round %d!&quot;, this->round);&#xD;
    this->secondPlayerScore++;&#xD;
    }&#xD;
    log.show(&quot;\n&quot;);&#xD;
    this->round++;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Getting Player Choice__none__6::Region1::Debug__AC__Getting Player Choice__none__6&quot;,(char *)&quot;Debug__B__Ac__Getting Player Choice__none__6&quot;,(char *)&quot;Debug__A__Ac__Getting Player Choice__none__6&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_CvPw8a3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_CvPw863jEeeHdMWUyAlTZg" name="Debug__end__trans__Getting Player Choice__none__6" source="_CvPJ4K3jEeeHdMWUyAlTZg" target="_Cum3wa3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Cv208K3jEeeHdMWUyAlTZg" name="Debug__end__trans__Getting Player Choice__none__6__134">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Getting Player Choice__none__6::Region1::Debug__end__trans__Getting Player Choice__none__6&quot;,(char *)&quot;Debug__A__Ac__Getting Player Choice__none__6&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_CvPw9K3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_CvMGkK3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Getting Player Choice">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_CvOi0K3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Getting Player Choice">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Getting Player Choice&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Getting Player Choice__none__6::Region1::Debug__B__Ex__Getting Player Choice&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_CvYT0a3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Getting Player Choice__127">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Getting Player Choice__none__6::Region1::Debug__B__Ex__Getting Player Choice&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_CvOi0a3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Getting Player Choice__none__6">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_CvOi0q3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Getting Player Choice__none__6">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Getting Player Choice&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;Getting Player Choice__none__6&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Getting Player Choice__none__6::Region1::Debug__B__Ac__Getting Player Choice__none__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_CvfBgK3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Getting Player Choice__none__6__128">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Getting Player Choice__none__6::Region1::Debug__B__Ac__Getting Player Choice__none__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_CvPJ4K3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Getting Player Choice__none__6">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_CvPJ4a3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Getting Player Choice__none__6">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Getting Player Choice__none__6&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Getting Player Choice__none__6::Region1::Debug__A__Ac__Getting Player Choice__none__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Cvx8ca3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Getting Player Choice__none__6__129">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Getting Player Choice__none__6::Region1::Debug__A__Ac__Getting Player Choice__none__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_C_JOIK3jEeeHdMWUyAlTZg" name="Debug__Path__Starting Round__Getting Player Choice__14" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_C_X3oa3jEeeHdMWUyAlTZg" name="Debug__C__Starting Round__Getting Player Choice__14">
                <connectionPoint xmi:id="_C_dXMK3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
                <connectionPoint xmi:id="_DAPaUa3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
                <region xmi:id="_C_X3oq3jEeeHdMWUyAlTZg" name="Region1">
                  <transition xmi:id="_DBAPUq3jEeeHdMWUyAlTZg" name="Debug__init__trans__Starting Round__Getting Player Choice__14" source="_C_dXMK3jEeeHdMWUyAlTZg" target="_DA3sca3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DD3WEa3jEeeHdMWUyAlTZg" name="Debug__init__trans__Starting Round__Getting Player Choice__14__289">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Starting Round__Getting Player Choice__14::Region1::Debug__init__trans__Starting Round__Getting Player Choice__14&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__Starting Round&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                    </effect>
                  </transition>
                  <transition xmi:id="_DBAPU63jEeeHdMWUyAlTZg" name="Debug__Ex__Starting Round" source="_DA3sca3jEeeHdMWUyAlTZg" target="_DA3sc63jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DD39IK3jEeeHdMWUyAlTZg" name="Debug__Ex__Starting Round__291">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Starting Round__Getting Player Choice__14::Region1::Debug__Ex__Starting Round&quot;,(char *)&quot;Debug__B__Ex__Starting Round&quot;,(char *)&quot;Debug__B__Ac__Starting Round__Getting Player Choice__14&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DBAPVK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DBAPVa3jEeeHdMWUyAlTZg" name="Debug__AC__Starting Round__Getting Player Choice__14" source="_DA3sc63jEeeHdMWUyAlTZg" target="_DA4TgK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DBA2Ya3jEeeHdMWUyAlTZg" visibility="public" isReentrant="true">
                      <name xsi:nil="true"/>
                      <language>C++</language>
                      <body>    int player = msg->sapIndex();&#xD;
    log.show(&quot;Player %d played: &quot;, player);&#xD;
    switch (choice) {&#xD;
        case ROCK		:	log.show(&quot;ROCK&quot;); break;&#xD;
        case PAPER		:	log.show(&quot;PAPER&quot;); break;&#xD;
        case SCISSORS	:	log.show(&quot;SCISSORS&quot;); break;&#xD;
    }&#xD;
    if (player == 1) {&#xD;
    this->firstPlayerChoice = choice;&#xD;
    }&#xD;
    else if (player == 2){&#xD;
    this->secondPlayerChoice = choice;&#xD;
    } &#xD;
    log.show(&quot;\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Starting Round__Getting Player Choice__14::Region1::Debug__AC__Starting Round__Getting Player Choice__14&quot;,(char *)&quot;Debug__B__Ac__Starting Round__Getting Player Choice__14&quot;,(char *)&quot;Debug__A__Ac__Starting Round__Getting Player Choice__14&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DBA2YK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DBA2Yq3jEeeHdMWUyAlTZg" name="Debug__En__Getting Player Choice" source="_DA4TgK3jEeeHdMWUyAlTZg" target="_DBAPUK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DEBHEK3jEeeHdMWUyAlTZg" name="Debug__En__Getting Player Choice__294">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Starting Round__Getting Player Choice__14::Region1::Debug__En__Getting Player Choice&quot;,(char *)&quot;Debug__A__Ac__Starting Round__Getting Player Choice__14&quot;,(char *)&quot;Debug__A__En__Getting Player Choice&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DBA2Y63jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DBA2ZK3jEeeHdMWUyAlTZg" name="Debug__end__trans__Starting Round__Getting Player Choice__14" source="_DBAPUK3jEeeHdMWUyAlTZg" target="_DAPaUa3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DEBuIK3jEeeHdMWUyAlTZg" name="Debug__end__trans__Starting Round__Getting Player Choice__14__296">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Starting Round__Getting Player Choice__14::Region1::Debug__end__trans__Starting Round__Getting Player Choice__14&quot;,(char *)&quot;Debug__A__En__Getting Player Choice&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DBA2Za3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_DA3sca3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Starting Round">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DA3scq3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Starting Round">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Starting Round&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Starting Round__Getting Player Choice__14::Region1::Debug__B__Ex__Starting Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DBYp0K3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Starting Round__284">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Starting Round__Getting Player Choice__14::Region1::Debug__B__Ex__Starting Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DA3sc63jEeeHdMWUyAlTZg" name="Debug__B__Ac__Starting Round__Getting Player Choice__14">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DA3sdK3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Starting Round__Getting Player Choice__14">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Starting Round&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;Starting Round__Getting Player Choice__14&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Starting Round__Getting Player Choice__14::Region1::Debug__B__Ac__Starting Round__Getting Player Choice__14&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DDQ5IK3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Starting Round__Getting Player Choice__14__285">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Starting Round__Getting Player Choice__14::Region1::Debug__B__Ac__Starting Round__Getting Player Choice__14&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DA4TgK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Starting Round__Getting Player Choice__14">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DA4Tga3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Starting Round__Getting Player Choice__14">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Starting Round__Getting Player Choice__14&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Getting Player Choice&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Starting Round__Getting Player Choice__14::Region1::Debug__A__Ac__Starting Round__Getting Player Choice__14&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DDoskK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Starting Round__Getting Player Choice__14__286">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Starting Round__Getting Player Choice__14::Region1::Debug__A__Ac__Starting Round__Getting Player Choice__14&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DBAPUK3jEeeHdMWUyAlTZg" name="Debug__A__En__Getting Player Choice">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DBAPUa3jEeeHdMWUyAlTZg" name="Debug__A__En__Getting Player Choice">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Getting Player Choice&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Starting Round__Getting Player Choice__14::Region1::Debug__A__En__Getting Player Choice&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DDpToK3jEeeHdMWUyAlTZg" name="Debug__A__En__Getting Player Choice__287">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Starting Round__Getting Player Choice__14::Region1::Debug__A__En__Getting Player Choice&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_DLCVEK3jEeeHdMWUyAlTZg" name="Debug__Path__Waiting For Round__Starting Round__20" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_DLIbsa3jEeeHdMWUyAlTZg" name="Debug__C__Waiting For Round__Starting Round__20">
                <connectionPoint xmi:id="_DLLfAa3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
                <connectionPoint xmi:id="_DLavkK3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
                <region xmi:id="_DLIbsq3jEeeHdMWUyAlTZg" name="Region1">
                  <transition xmi:id="_DLx78K3jEeeHdMWUyAlTZg" name="Debug__init__trans__Waiting For Round__Starting Round__20" source="_DLLfAa3jEeeHdMWUyAlTZg" target="_DLwt0K3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DM4vMa3jEeeHdMWUyAlTZg" name="Debug__init__trans__Waiting For Round__Starting Round__20__388">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Waiting For Round__Starting Round__20::Region1::Debug__init__trans__Waiting For Round__Starting Round__20&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__Waiting For Round&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                    </effect>
                  </transition>
                  <transition xmi:id="_DLx78a3jEeeHdMWUyAlTZg" name="Debug__Ex__Waiting For Round" source="_DLwt0K3jEeeHdMWUyAlTZg" target="_DLwt0q3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DM8ZkK3jEeeHdMWUyAlTZg" name="Debug__Ex__Waiting For Round__390">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Waiting For Round__Starting Round__20::Region1::Debug__Ex__Waiting For Round&quot;,(char *)&quot;Debug__B__Ex__Waiting For Round&quot;,(char *)&quot;Debug__B__Ac__Waiting For Round__Starting Round__20&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DLx78q3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DLx7863jEeeHdMWUyAlTZg" name="Debug__AC__Waiting For Round__Starting Round__20" source="_DLwt0q3jEeeHdMWUyAlTZg" target="_DLxU4K3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DM9AoK3jEeeHdMWUyAlTZg" name="Debug__AC__Waiting For Round__Starting Round__20__392">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Waiting For Round__Starting Round__20::Region1::Debug__AC__Waiting For Round__Starting Round__20&quot;,(char *)&quot;Debug__B__Ac__Waiting For Round__Starting Round__20&quot;,(char *)&quot;Debug__A__Ac__Waiting For Round__Starting Round__20&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DLx79K3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DLx79a3jEeeHdMWUyAlTZg" name="Debug__En__Starting Round" source="_DLxU4K3jEeeHdMWUyAlTZg" target="_DLxU4q3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DLx7963jEeeHdMWUyAlTZg" name="starting round" visibility="public" isReentrant="true">
                      <language>C++</language>
                      <body>log.show(&quot;\n-- Starting round %d --\n&quot;, this->round);&#xD;
play.go(this->round).send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Waiting For Round__Starting Round__20::Region1::Debug__En__Starting Round&quot;,(char *)&quot;Debug__A__Ac__Waiting For Round__Starting Round__20&quot;,(char *)&quot;Debug__A__En__Starting Round&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DLx79q3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DLx7-K3jEeeHdMWUyAlTZg" name="Debug__end__trans__Waiting For Round__Starting Round__20" source="_DLxU4q3jEeeHdMWUyAlTZg" target="_DLavkK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DM-OwK3jEeeHdMWUyAlTZg" name="Debug__end__trans__Waiting For Round__Starting Round__20__395">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Waiting For Round__Starting Round__20::Region1::Debug__end__trans__Waiting For Round__Starting Round__20&quot;,(char *)&quot;Debug__A__En__Starting Round&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DLyjAK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_DLwt0K3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Waiting For Round">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DLwt0a3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Waiting For Round">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Waiting For Round&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Waiting For Round__Starting Round__20::Region1::Debug__B__Ex__Waiting For Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DMBzkK3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Waiting For Round__383">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Waiting For Round__Starting Round__20::Region1::Debug__B__Ex__Waiting For Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DLwt0q3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Waiting For Round__Starting Round__20">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DLwt063jEeeHdMWUyAlTZg" name="Debug__B__Ac__Waiting For Round__Starting Round__20">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Waiting For Round&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;Waiting For Round__Starting Round__20&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Waiting For Round__Starting Round__20::Region1::Debug__B__Ac__Waiting For Round__Starting Round__20&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DMFd8a3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Waiting For Round__Starting Round__20__384">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Waiting For Round__Starting Round__20::Region1::Debug__B__Ac__Waiting For Round__Starting Round__20&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DLxU4K3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Waiting For Round__Starting Round__20">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DLxU4a3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Waiting For Round__Starting Round__20">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Waiting For Round__Starting Round__20&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Starting Round&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Waiting For Round__Starting Round__20::Region1::Debug__A__Ac__Waiting For Round__Starting Round__20&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DMtJAK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Waiting For Round__Starting Round__20__385">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Waiting For Round__Starting Round__20::Region1::Debug__A__Ac__Waiting For Round__Starting Round__20&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DLxU4q3jEeeHdMWUyAlTZg" name="Debug__A__En__Starting Round">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DLxU463jEeeHdMWUyAlTZg" name="Debug__A__En__Starting Round">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Starting Round&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Waiting For Round__Starting Round__20::Region1::Debug__A__En__Starting Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DMtwEK3jEeeHdMWUyAlTZg" name="Debug__A__En__Starting Round__386">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__Waiting For Round__Starting Round__20::Region1::Debug__A__En__Starting Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_DZUBoK3jEeeHdMWUyAlTZg" name="Debug__Path__in" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_DZg18a3jEeeHdMWUyAlTZg" name="Debug__C__in">
                <connectionPoint xmi:id="_DZx7sa3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
                <connectionPoint xmi:id="_DZ6eka3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
                <region xmi:id="_DZg18q3jEeeHdMWUyAlTZg" name="Region1">
                  <transition xmi:id="_DacDAK3jEeeHdMWUyAlTZg" name="Debug__init__trans__in" source="_DZx7sa3jEeeHdMWUyAlTZg" target="_DaYYoa3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Da7LMK3jEeeHdMWUyAlTZg" name="Debug__init__trans__in__533">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__in::Region1::Debug__init__trans__in&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__in&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                    </effect>
                  </transition>
                  <transition xmi:id="_DacqEK3jEeeHdMWUyAlTZg" name="Debug__Ac__in" source="_DaYYoa3jEeeHdMWUyAlTZg" target="_DaY_sK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Da-1kK3jEeeHdMWUyAlTZg" name="Debug__Ac__in__535">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__in::Region1::Debug__Ac__in&quot;,(char *)&quot;Debug__B__Ac__in&quot;,(char *)&quot;Debug__A__Ac__in&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DacqEa3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DacqEq3jEeeHdMWUyAlTZg" name="Debug__En__Waiting For Round" source="_DaY_sK3jEeeHdMWUyAlTZg" target="_DaY_sq3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DacqFK3jEeeHdMWUyAlTZg" name="setting timer" visibility="public" isReentrant="true">
                      <language>C++</language>
                      <body>timer.informIn(UMLRTTimespec(2,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__in::Region1::Debug__En__Waiting For Round&quot;,(char *)&quot;Debug__A__Ac__in&quot;,(char *)&quot;Debug__A__En__in&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DacqE63jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DacqFa3jEeeHdMWUyAlTZg" name="Debug__end__trans__in" source="_DaY_sq3jEeeHdMWUyAlTZg" target="_DZ6eka3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DbADsK3jEeeHdMWUyAlTZg" name="Debug__end__trans__in__538">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__in::Region1::Debug__end__trans__in&quot;,(char *)&quot;Debug__A__En__in&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DacqFq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_DaYYoa3jEeeHdMWUyAlTZg" name="Debug__B__Ac__in">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DaYYoq3jEeeHdMWUyAlTZg" name="Debug__B__Ac__in">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;in&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__in::Region1::Debug__B__Ac__in&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DalM8a3jEeeHdMWUyAlTZg" name="Debug__B__Ac__in__529">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__in::Region1::Debug__B__Ac__in&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DaY_sK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__in">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DaY_sa3jEeeHdMWUyAlTZg" name="Debug__A__Ac__in">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;in&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Waiting For Round&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__in::Region1::Debug__A__Ac__in&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DawzIa3jEeeHdMWUyAlTZg" name="Debug__A__Ac__in__530">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__in::Region1::Debug__A__Ac__in&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DaY_sq3jEeeHdMWUyAlTZg" name="Debug__A__En__in">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DaY_s63jEeeHdMWUyAlTZg" name="Debug__A__En__in">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Waiting For Round&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__in::Region1::Debug__A__En__in&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Da6kIa3jEeeHdMWUyAlTZg" name="Debug__A__En__in__531">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 1::Region1::Debug__C__in::Region1::Debug__A__En__in&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                </region>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_RKZswExYEeeqN6OadgglSg" name="Round 2">
            <connectionPoint xmi:id="_aNM7QExeEeeqN6OadgglSg" name="Pseudo11" kind="entryPoint"/>
            <connectionPoint xmi:id="_aNWFMExeEeeqN6OadgglSg" name="Pseudo5" kind="exitPoint"/>
            <connectionPoint xmi:id="_aNfPIExeEeeqN6OadgglSg" name="Pseudo13" kind="exitPoint"/>
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Df6_8K3jEeeHdMWUyAlTZg" name="Round 2__581">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Df6_8a3jEeeHdMWUyAlTZg" name="Round 2__582">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
            <region xmi:id="_aNHbsExeEeeqN6OadgglSg" name="Region1">
              <transition xmi:id="_7A36wExgEeeqN6OadgglSg" name="in" kind="local" source="_C6qWwK3jEeeHdMWUyAlTZg" target="_vmuLoExgEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C9UpMK3jEeeHdMWUyAlTZg" name="in__258">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::in&quot;,(char *)&quot;Debug__Path__in&quot;,(char *)&quot;Waiting for Round&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_zJbA4ExhEeeqN6OadgglSg" name="Starting Round__Getting Player Choice__21" source="_DP4Y0K3jEeeHdMWUyAlTZg" target="_wdBFAExhEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_8GTcUExhEeeqN6OadgglSg">
                  <language>C++</language>
                  <body>    int player = msg->sapIndex();&#xD;
    log.show(&quot;Player %d played: &quot;, player);&#xD;
    switch (choice) {&#xD;
        case ROCK		:	log.show(&quot;ROCK&quot;); break;&#xD;
        case PAPER		:	log.show(&quot;PAPER&quot;); break;&#xD;
        case SCISSORS	:	log.show(&quot;SCISSORS&quot;); break;&#xD;
    }&#xD;
    if (player == 1) {&#xD;
    this->firstPlayerChoice = choice;&#xD;
    }&#xD;
    else if (player == 2){&#xD;
    this->secondPlayerChoice = choice;&#xD;
    } &#xD;
    log.show(&quot;\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Starting Round__Getting Player Choice__21&quot;,(char *)&quot;Debug__Path__Starting Round__Getting Player Choice__21&quot;,(char *)&quot;Getting Player Choice&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_rmaF8ExiEeeqN6OadgglSg" name="Getting Player Choice__isGameOver?__8" source="_Cv9ioK3jEeeHdMWUyAlTZg" target="_SzEvMExiEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5lDLEExiEeeqN6OadgglSg">
                  <language>C++</language>
                  <body>    int player = msg->sapIndex();&#xD;
    log.show(&quot;Player %d played: &quot;, player);&#xD;
    switch (choice) {&#xD;
    case ROCK		:	log.show(&quot;ROCK&quot;); break;&#xD;
    case PAPER		:	log.show(&quot;PAPER&quot;); break;&#xD;
    case SCISSORS	:	log.show(&quot;SCISSORS&quot;); break;&#xD;
    }&#xD;
    if (player == 1) {&#xD;
    this->firstPlayerChoice = choice;&#xD;
    }&#xD;
    else if (player == 2){&#xD;
    this->secondPlayerChoice = choice;&#xD;
    } &#xD;
    log.show(&quot;\n&quot;);&#xD;
    if (this->firstPlayerChoice == this->secondPlayerChoice) {&#xD;
    log.show(&quot;Round %d Tied&quot;, this->round);&#xD;
    } else if ((this->secondPlayerChoice + 1) % 3 == this->firstPlayerChoice) {&#xD;
    log.show(&quot;Player 1 Wins Round %d!&quot;, this->round);&#xD;
    this->firstPlayerScore++;&#xD;
    } else {&#xD;
    log.show(&quot;Player 2 Wins Round %d!&quot;, this->round);&#xD;
    this->secondPlayerScore++;&#xD;
    }&#xD;
    log.show(&quot;\n&quot;);&#xD;
    this->round++;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Getting Player Choice__isGameOver?__8&quot;,(char *)&quot;Debug__Path__Getting Player Choice__isGameOver?__8&quot;,(char *)&quot;isGameOver?&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_WhivkExjEeeqN6OadgglSg" name="to round 3" source="_CqOuEK3jEeeHdMWUyAlTZg" target="_aNWFMExeEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Ctju4K3jEeeHdMWUyAlTZg" name="to round 3__114">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::to round 3&quot;,(char *)&quot;Debug__Path__to round 3&quot;,(char *)&quot;Pseudo5&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_sqcOcExlEeeqN6OadgglSg" name="game over" source="_DOU5oK3jEeeHdMWUyAlTZg" target="_oFnYYExlEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DPv18a3jEeeHdMWUyAlTZg" name="game over__424">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::game over&quot;,(char *)&quot;Debug__Path__game over&quot;,(char *)&quot;whoWon?&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_xclHwExlEeeqN6OadgglSg" name="player 1 wins" source="_C4howK3jEeeHdMWUyAlTZg" target="_aNfPIExeEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_d_tC4ExmEeeqN6OadgglSg">
                  <language>C++</language>
                  <body>log.show(&quot;\nplayer 1 wins the game!&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::player 1 wins&quot;,(char *)&quot;Debug__Path__player 1 wins&quot;,(char *)&quot;Pseudo13&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_01qjcExlEeeqN6OadgglSg" name="player 2 wins" source="_DbJNoK3jEeeHdMWUyAlTZg" target="_aNfPIExeEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_hlO_IExmEeeqN6OadgglSg">
                  <language>C++</language>
                  <body>log.show(&quot;\nplayer 2 wins the game!&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::player 2 wins&quot;,(char *)&quot;Debug__Path__player 2 wins&quot;,(char *)&quot;Pseudo13&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_5uN74ExnEeeqN6OadgglSg" name="Waiting for Round__Starting Round__9" source="_CxzVsK3jEeeHdMWUyAlTZg" target="_bCA8AExhEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Czq98K3jEeeHdMWUyAlTZg" name="Waiting for Round__Starting Round__9__183">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Waiting for Round__Starting Round__9&quot;,(char *)&quot;Debug__Path__Waiting for Round__Starting Round__9&quot;,(char *)&quot;Starting Round&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_CsTxsa3jEeeHdMWUyAlTZg" name="Debug__to round 3" guard="_q1ctoExjEeeqN6OadgglSg" source="_SzEvMExiEeeqN6OadgglSg" target="_CqOuEK3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_q1ctoExjEeeqN6OadgglSg">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_3P9GgExjEeeqN6OadgglSg">
                    <language>C++</language>
                    <body>bool isNotOver = firstPlayerScore == secondPlayerScore;&#xD;
return isNotOver;</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CsTxsq3jEeeHdMWUyAlTZg" name="Debug__to round 3__102">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__to round 3&quot;,(char *)&quot;isGameOver?&quot;,(char *)&quot;Debug__Path__to round 3&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_CsU_0K3jEeeHdMWUyAlTZg" name="Debug__to round 3__S" guard="_CscUka3jEeeHdMWUyAlTZg" source="_CqOuEK3jEeeHdMWUyAlTZg" target="_Cry0UK3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_CscUka3jEeeHdMWUyAlTZg" name="Debug__Guardto round 3">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_CscUkK3jEeeHdMWUyAlTZg" name="Debug__Guardto round 3">
                    <language>C++</language>
                    <body>return Debug__SRO.checkDebug(&quot;isGameOver?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Csc7oK3jEeeHdMWUyAlTZg" name="Debug__to round 3__S__104">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__to round 3__S&quot;,(char *)&quot;Debug__Path__to round 3&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_CsdisK3jEeeHdMWUyAlTZg" name="Debug__to round 3__E" source="_Cr_BkK3jEeeHdMWUyAlTZg" target="_aNWFMExeEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Csdisa3jEeeHdMWUyAlTZg" name="Debug__to round 3__E__105">
                  <language>C++</language>
                  <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__to round 3__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Pseudo5&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_Csew0K3jEeeHdMWUyAlTZg" name="Debug__to round 3__dbg__varChange" source="_CqZtMa3jEeeHdMWUyAlTZg" target="_CqZtMa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CsmFkK3jEeeHdMWUyAlTZg" name="Debug__to round 3__dbg__varChange__107">
                  <language>C++</language>
                  <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                </effect>
                <trigger xmi:id="_CshNEK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CsmFka3jEeeHdMWUyAlTZg" name="Debug__to round 3__dbg__setBreakPoint" source="_CqZtMa3jEeeHdMWUyAlTZg" target="_CqZtMa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CsmFk63jEeeHdMWUyAlTZg" name="Debug__to round 3__dbg__setBreakPoint__108">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_CsmFkq3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CsmsoK3jEeeHdMWUyAlTZg" name="Debug__to round 3__dbg__remBreakPoint" source="_CqZtMa3jEeeHdMWUyAlTZg" target="_CqZtMa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Csmsoq3jEeeHdMWUyAlTZg" name="Debug__to round 3__dbg__remBreakPoint__109">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_Csmsoa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_Csmso63jEeeHdMWUyAlTZg" name="Debug__to round 3__dbg__viewBreakPoints" source="_CqZtMa3jEeeHdMWUyAlTZg" target="_CqZtMa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Csmspa3jEeeHdMWUyAlTZg" name="Debug__to round 3__dbg__viewBreakPoints__110">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_CsmspK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_Csmspq3jEeeHdMWUyAlTZg" name="Debug__to round 3__dbg__dbgSetExecMode" source="_CqZtMa3jEeeHdMWUyAlTZg" target="_CqZtMa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CsnTsa3jEeeHdMWUyAlTZg" name="Debug__to round 3__dbg__dbgSetExecMode__111">
                  <language>C++</language>
                  <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                </effect>
                <trigger xmi:id="_CsnTsK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CsnTsq3jEeeHdMWUyAlTZg" name="Debug__to round 3__dbg__dbgDeferMsg" source="_CqZtMa3jEeeHdMWUyAlTZg" target="_CqZtMa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CsnTtK3jEeeHdMWUyAlTZg" name="Debug__to round 3__dbg__dbgDeferMsg__112">
                  <language>C++</language>
                  <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                </effect>
                <trigger xmi:id="_CsnTs63jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_Cwmb0K3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__isGameOver?__8" source="_wdBFAExhEeeqN6OadgglSg" target="_Cv9ioK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Cwmb0a3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__isGameOver?__8__137">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__Getting Player Choice__isGameOver?__8&quot;,(char *)&quot;Getting Player Choice&quot;,(char *)&quot;Debug__Path__Getting Player Choice__isGameOver?__8&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_tExhYExiEeeqN6OadgglSg" event="_BhCxcMFfEeaVzb3gsu6Gyw" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_CwrUUK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__isGameOver?__8__S" guard="_CwrUUq3jEeeHdMWUyAlTZg" source="_Cv9ioK3jEeeHdMWUyAlTZg" target="_CwSSwK3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_CwrUUq3jEeeHdMWUyAlTZg" name="Debug__GuardGetting Player Choice__isGameOver?__8">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_CwrUUa3jEeeHdMWUyAlTZg" name="Debug__GuardGetting Player Choice__isGameOver?__8">
                    <language>C++</language>
                    <body>return Debug__SRO.checkDebug(&quot;Getting Player Choice&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Cwr7YK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__isGameOver?__8__S__139">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__Getting Player Choice__isGameOver?__8__S&quot;,(char *)&quot;Debug__Path__Getting Player Choice__isGameOver?__8&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_CwtJgK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__isGameOver?__8__E" source="_CwcDwa3jEeeHdMWUyAlTZg" target="_SzEvMExiEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CwtwkK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__isGameOver?__8__E__140">
                  <language>C++</language>
                  <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__Getting Player Choice__isGameOver?__8__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;isGameOver?&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_Cwwz4K3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__isGameOver?__8__dbg__varChange" source="_CwMMIa3jEeeHdMWUyAlTZg" target="_CwMMIa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Cwwz4q3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__isGameOver?__8__dbg__varChange__142">
                  <language>C++</language>
                  <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                </effect>
                <trigger xmi:id="_Cwwz4a3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_Cwxa8K3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__isGameOver?__8__dbg__setBreakPoint" source="_CwMMIa3jEeeHdMWUyAlTZg" target="_CwMMIa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CwyCAK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__isGameOver?__8__dbg__setBreakPoint__143">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_Cwxa8a3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_Cw1FUK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__isGameOver?__8__dbg__remBreakPoint" source="_CwMMIa3jEeeHdMWUyAlTZg" target="_CwMMIa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Cw1FUq3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__isGameOver?__8__dbg__remBreakPoint__144">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_Cw1FUa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_Cw1FU63jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__isGameOver?__8__dbg__viewBreakPoints" source="_CwMMIa3jEeeHdMWUyAlTZg" target="_CwMMIa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Cw1FVa3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__isGameOver?__8__dbg__viewBreakPoints__145">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_Cw1FVK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_Cw1sYK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__isGameOver?__8__dbg__dbgSetExecMode" source="_CwMMIa3jEeeHdMWUyAlTZg" target="_CwMMIa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Cw1sYq3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__isGameOver?__8__dbg__dbgSetExecMode__146">
                  <language>C++</language>
                  <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                </effect>
                <trigger xmi:id="_Cw1sYa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_Cw1sY63jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__isGameOver?__8__dbg__dbgDeferMsg" source="_CwMMIa3jEeeHdMWUyAlTZg" target="_CwMMIa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Cw2Tca3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__isGameOver?__8__dbg__dbgDeferMsg__147">
                  <language>C++</language>
                  <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                </effect>
                <trigger xmi:id="_Cw2TcK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_CyU6Ia3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__9" source="_vmuLoExgEeeqN6OadgglSg" target="_CxzVsK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CyU6Iq3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__9__158">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__Waiting for Round__Starting Round__9&quot;,(char *)&quot;Waiting for Round&quot;,(char *)&quot;Debug__Path__Waiting for Round__Starting Round__9&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_6Ie2AExnEeeqN6OadgglSg" port="_WP3dwN9XEeaslsNogbStzw">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:id="_CyX9cK3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__9__S" guard="_CyX9cq3jEeeHdMWUyAlTZg" source="_CxzVsK3jEeeHdMWUyAlTZg" target="_CyCmQa3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_CyX9cq3jEeeHdMWUyAlTZg" name="Debug__GuardWaiting for Round__Starting Round__9">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_CyX9ca3jEeeHdMWUyAlTZg" name="Debug__GuardWaiting for Round__Starting Round__9">
                    <language>C++</language>
                    <body>return Debug__SRO.checkDebug(&quot;Waiting for Round&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CyYkgK3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__9__S__160">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__Waiting for Round__Starting Round__9__S&quot;,(char *)&quot;Debug__Path__Waiting for Round__Starting Round__9&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_CycO4K3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__9__E" source="_CyMXQa3jEeeHdMWUyAlTZg" target="_bCA8AExhEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CycO4a3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__9__E__161">
                  <language>C++</language>
                  <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__Waiting for Round__Starting Round__9__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Starting Round&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_CyddAK3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__9__dbg__varChange" source="_Cx9GsK3jEeeHdMWUyAlTZg" target="_Cx9GsK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CyddAq3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__9__dbg__varChange__163">
                  <language>C++</language>
                  <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                </effect>
                <trigger xmi:id="_CyddAa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CyggUK3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__9__dbg__setBreakPoint" source="_Cx9GsK3jEeeHdMWUyAlTZg" target="_Cx9GsK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CyggUq3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__9__dbg__setBreakPoint__164">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_CyggUa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CyggU63jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__9__dbg__remBreakPoint" source="_Cx9GsK3jEeeHdMWUyAlTZg" target="_Cx9GsK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CyggVa3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__9__dbg__remBreakPoint__165">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_CyggVK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CyhHYK3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__9__dbg__viewBreakPoints" source="_Cx9GsK3jEeeHdMWUyAlTZg" target="_Cx9GsK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CyhHYq3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__9__dbg__viewBreakPoints__166">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_CyhHYa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CyhHY63jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__9__dbg__dbgSetExecMode" source="_Cx9GsK3jEeeHdMWUyAlTZg" target="_Cx9GsK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CyhHZa3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__9__dbg__dbgSetExecMode__167">
                  <language>C++</language>
                  <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                </effect>
                <trigger xmi:id="_CyhHZK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CyhucK3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__9__dbg__dbgDeferMsg" source="_Cx9GsK3jEeeHdMWUyAlTZg" target="_Cx9GsK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Cyhucq3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__9__dbg__dbgDeferMsg__168">
                  <language>C++</language>
                  <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                </effect>
                <trigger xmi:id="_Cyhuca3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_C5nN4a3jEeeHdMWUyAlTZg" name="Debug__player 1 wins" guard="_GFTfQExmEeeqN6OadgglSg" source="_oFnYYExlEeeqN6OadgglSg" target="_C4howK3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_GFTfQExmEeeqN6OadgglSg">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_N8NxIExmEeeqN6OadgglSg">
                    <language>C++</language>
                    <body>bool player1Wins = firstPlayerScore > secondPlayerScore;&#xD;
return player1Wins;</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C5nN4q3jEeeHdMWUyAlTZg" name="Debug__player 1 wins__223">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__player 1 wins&quot;,(char *)&quot;whoWon?&quot;,(char *)&quot;Debug__Path__player 1 wins&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_C5n08K3jEeeHdMWUyAlTZg" name="Debug__player 1 wins__S" guard="_C5ocAa3jEeeHdMWUyAlTZg" source="_C4howK3jEeeHdMWUyAlTZg" target="_C5FCYa3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_C5ocAa3jEeeHdMWUyAlTZg" name="Debug__Guardplayer 1 wins">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_C5ocAK3jEeeHdMWUyAlTZg" name="Debug__Guardplayer 1 wins">
                    <language>C++</language>
                    <body>return Debug__SRO.checkDebug(&quot;whoWon?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C5ocAq3jEeeHdMWUyAlTZg" name="Debug__player 1 wins__S__225">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__player 1 wins__S&quot;,(char *)&quot;Debug__Path__player 1 wins&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_C5rfUK3jEeeHdMWUyAlTZg" name="Debug__player 1 wins__E" source="_C5U6Aa3jEeeHdMWUyAlTZg" target="_aNfPIExeEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C5rfUa3jEeeHdMWUyAlTZg" name="Debug__player 1 wins__E__226">
                  <language>C++</language>
                  <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__player 1 wins__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Pseudo13&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_C5sGYK3jEeeHdMWUyAlTZg" name="Debug__player 1 wins__dbg__varChange" source="_C4vrMK3jEeeHdMWUyAlTZg" target="_C4vrMK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C5sGYq3jEeeHdMWUyAlTZg" name="Debug__player 1 wins__dbg__varChange__228">
                  <language>C++</language>
                  <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                </effect>
                <trigger xmi:id="_C5sGYa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_C5stcK3jEeeHdMWUyAlTZg" name="Debug__player 1 wins__dbg__setBreakPoint" source="_C4vrMK3jEeeHdMWUyAlTZg" target="_C4vrMK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C5stcq3jEeeHdMWUyAlTZg" name="Debug__player 1 wins__dbg__setBreakPoint__229">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_C5stca3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_C5stc63jEeeHdMWUyAlTZg" name="Debug__player 1 wins__dbg__remBreakPoint" source="_C4vrMK3jEeeHdMWUyAlTZg" target="_C4vrMK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C5stda3jEeeHdMWUyAlTZg" name="Debug__player 1 wins__dbg__remBreakPoint__230">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_C5stdK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_C5tUgK3jEeeHdMWUyAlTZg" name="Debug__player 1 wins__dbg__viewBreakPoints" source="_C4vrMK3jEeeHdMWUyAlTZg" target="_C4vrMK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C5tUgq3jEeeHdMWUyAlTZg" name="Debug__player 1 wins__dbg__viewBreakPoints__231">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_C5tUga3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_C5tUg63jEeeHdMWUyAlTZg" name="Debug__player 1 wins__dbg__dbgSetExecMode" source="_C4vrMK3jEeeHdMWUyAlTZg" target="_C4vrMK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C5tUha3jEeeHdMWUyAlTZg" name="Debug__player 1 wins__dbg__dbgSetExecMode__232">
                  <language>C++</language>
                  <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                </effect>
                <trigger xmi:id="_C5tUhK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_C5tUhq3jEeeHdMWUyAlTZg" name="Debug__player 1 wins__dbg__dbgDeferMsg" source="_C4vrMK3jEeeHdMWUyAlTZg" target="_C4vrMK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C5tUiK3jEeeHdMWUyAlTZg" name="Debug__player 1 wins__dbg__dbgDeferMsg__233">
                  <language>C++</language>
                  <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                </effect>
                <trigger xmi:id="_C5tUh63jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_C7xxEa3jEeeHdMWUyAlTZg" name="Debug__in" source="_aNM7QExeEeeqN6OadgglSg" target="_C6qWwK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C7yYIK3jEeeHdMWUyAlTZg" name="Debug__in__236">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__in&quot;,(char *)&quot;Pseudo11&quot;,(char *)&quot;Debug__Path__in&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_C7y_MK3jEeeHdMWUyAlTZg" name="Debug__in__S" guard="_C7y_Mq3jEeeHdMWUyAlTZg" source="_C6qWwK3jEeeHdMWUyAlTZg" target="_C7Qzsa3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_C7y_Mq3jEeeHdMWUyAlTZg" name="Debug__Guardin">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_C7y_Ma3jEeeHdMWUyAlTZg" name="Debug__Guardin">
                    <language>C++</language>
                    <body>return Debug__SRO.checkDebug(&quot;Pseudo11&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C7y_M63jEeeHdMWUyAlTZg" name="Debug__in__S__238">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__in__S&quot;,(char *)&quot;Debug__Path__in&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_C7zmQK3jEeeHdMWUyAlTZg" name="Debug__in__E" source="_C7kVsK3jEeeHdMWUyAlTZg" target="_vmuLoExgEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C7zmQa3jEeeHdMWUyAlTZg" name="Debug__in__E__239">
                  <language>C++</language>
                  <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__in__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Waiting for Round&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_C73QoK3jEeeHdMWUyAlTZg" name="Debug__in__dbg__varChange" source="_C7CKMa3jEeeHdMWUyAlTZg" target="_C7CKMa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C733sK3jEeeHdMWUyAlTZg" name="Debug__in__dbg__varChange__241">
                  <language>C++</language>
                  <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                </effect>
                <trigger xmi:id="_C73Qoa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_C733sa3jEeeHdMWUyAlTZg" name="Debug__in__dbg__setBreakPoint" source="_C7CKMa3jEeeHdMWUyAlTZg" target="_C7CKMa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C733s63jEeeHdMWUyAlTZg" name="Debug__in__dbg__setBreakPoint__242">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_C733sq3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_C733tK3jEeeHdMWUyAlTZg" name="Debug__in__dbg__remBreakPoint" source="_C7CKMa3jEeeHdMWUyAlTZg" target="_C7CKMa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C733tq3jEeeHdMWUyAlTZg" name="Debug__in__dbg__remBreakPoint__243">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_C733ta3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_C74ewK3jEeeHdMWUyAlTZg" name="Debug__in__dbg__viewBreakPoints" source="_C7CKMa3jEeeHdMWUyAlTZg" target="_C7CKMa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C74ewq3jEeeHdMWUyAlTZg" name="Debug__in__dbg__viewBreakPoints__244">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_C74ewa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_C74ew63jEeeHdMWUyAlTZg" name="Debug__in__dbg__dbgSetExecMode" source="_C7CKMa3jEeeHdMWUyAlTZg" target="_C7CKMa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C74exa3jEeeHdMWUyAlTZg" name="Debug__in__dbg__dbgSetExecMode__245">
                  <language>C++</language>
                  <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                </effect>
                <trigger xmi:id="_C74exK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_C74exq3jEeeHdMWUyAlTZg" name="Debug__in__dbg__dbgDeferMsg" source="_C7CKMa3jEeeHdMWUyAlTZg" target="_C7CKMa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C8Aaka3jEeeHdMWUyAlTZg" name="Debug__in__dbg__dbgDeferMsg__246">
                  <language>C++</language>
                  <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                </effect>
                <trigger xmi:id="_C8AakK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_DO3sMa3jEeeHdMWUyAlTZg" name="Debug__game over" source="_SzEvMExiEeeqN6OadgglSg" target="_DOU5oK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DO3sMq3jEeeHdMWUyAlTZg" name="Debug__game over__412">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__game over&quot;,(char *)&quot;isGameOver?&quot;,(char *)&quot;Debug__Path__game over&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DO9LwK3jEeeHdMWUyAlTZg" name="Debug__game over__S" guard="_DPA2Ia3jEeeHdMWUyAlTZg" source="_DOU5oK3jEeeHdMWUyAlTZg" target="_DOn0ka3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_DPA2Ia3jEeeHdMWUyAlTZg" name="Debug__Guardgame over">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_DPA2IK3jEeeHdMWUyAlTZg" name="Debug__Guardgame over">
                    <language>C++</language>
                    <body>return Debug__SRO.checkDebug(&quot;isGameOver?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DPA2Iq3jEeeHdMWUyAlTZg" name="Debug__game over__S__414">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__game over__S&quot;,(char *)&quot;Debug__Path__game over&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DPBdMK3jEeeHdMWUyAlTZg" name="Debug__game over__E" source="_DOstEa3jEeeHdMWUyAlTZg" target="_oFnYYExlEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DPBdMa3jEeeHdMWUyAlTZg" name="Debug__game over__E__415">
                  <language>C++</language>
                  <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__game over__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;whoWon?&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DPD5cK3jEeeHdMWUyAlTZg" name="Debug__game over__dbg__varChange" source="_DOeqoa3jEeeHdMWUyAlTZg" target="_DOeqoa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DPD5cq3jEeeHdMWUyAlTZg" name="Debug__game over__dbg__varChange__417">
                  <language>C++</language>
                  <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                </effect>
                <trigger xmi:id="_DPD5ca3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DPD5c63jEeeHdMWUyAlTZg" name="Debug__game over__dbg__setBreakPoint" source="_DOeqoa3jEeeHdMWUyAlTZg" target="_DOeqoa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DPEggK3jEeeHdMWUyAlTZg" name="Debug__game over__dbg__setBreakPoint__418">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DPD5dK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DPEgga3jEeeHdMWUyAlTZg" name="Debug__game over__dbg__remBreakPoint" source="_DOeqoa3jEeeHdMWUyAlTZg" target="_DOeqoa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DPEgg63jEeeHdMWUyAlTZg" name="Debug__game over__dbg__remBreakPoint__419">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DPEggq3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DPEghK3jEeeHdMWUyAlTZg" name="Debug__game over__dbg__viewBreakPoints" source="_DOeqoa3jEeeHdMWUyAlTZg" target="_DOeqoa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DPEghq3jEeeHdMWUyAlTZg" name="Debug__game over__dbg__viewBreakPoints__420">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DPEgha3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DPFHkK3jEeeHdMWUyAlTZg" name="Debug__game over__dbg__dbgSetExecMode" source="_DOeqoa3jEeeHdMWUyAlTZg" target="_DOeqoa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DPFHkq3jEeeHdMWUyAlTZg" name="Debug__game over__dbg__dbgSetExecMode__421">
                  <language>C++</language>
                  <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                </effect>
                <trigger xmi:id="_DPFHka3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DPFHk63jEeeHdMWUyAlTZg" name="Debug__game over__dbg__dbgDeferMsg" source="_DOeqoa3jEeeHdMWUyAlTZg" target="_DOeqoa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DPFHla3jEeeHdMWUyAlTZg" name="Debug__game over__dbg__dbgDeferMsg__422">
                  <language>C++</language>
                  <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DPFHlK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_DQfc0K3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__21" source="_bCA8AExhEeeqN6OadgglSg" target="_DP4Y0K3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DQfc0a3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__21__426">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__Starting Round__Getting Player Choice__21&quot;,(char *)&quot;Starting Round&quot;,(char *)&quot;Debug__Path__Starting Round__Getting Player Choice__21&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_0ivkQExhEeeqN6OadgglSg" event="_BhCxcMFfEeaVzb3gsu6Gyw" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_DQgD4K3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__21__S" guard="_DQgD4q3jEeeHdMWUyAlTZg" source="_DP4Y0K3jEeeHdMWUyAlTZg" target="_DQLTwa3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_DQgD4q3jEeeHdMWUyAlTZg" name="Debug__GuardStarting Round__Getting Player Choice__21">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_DQgD4a3jEeeHdMWUyAlTZg" name="Debug__GuardStarting Round__Getting Player Choice__21">
                    <language>C++</language>
                    <body>return Debug__SRO.checkDebug(&quot;Starting Round&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DQgq8K3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__21__S__428">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__Starting Round__Getting Player Choice__21__S&quot;,(char *)&quot;Debug__Path__Starting Round__Getting Player Choice__21&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DQhSAK3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__21__E" source="_DQRaYa3jEeeHdMWUyAlTZg" target="_wdBFAExhEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DQhSAa3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__21__E__429">
                  <language>C++</language>
                  <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__Starting Round__Getting Player Choice__21__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Getting Player Choice&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DQh5EK3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__21__dbg__varChange" source="_DQA7sa3jEeeHdMWUyAlTZg" target="_DQA7sa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DQh5Eq3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__21__dbg__varChange__431">
                  <language>C++</language>
                  <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                </effect>
                <trigger xmi:id="_DQh5Ea3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DQigIK3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__21__dbg__setBreakPoint" source="_DQA7sa3jEeeHdMWUyAlTZg" target="_DQA7sa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DQigIq3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__21__dbg__setBreakPoint__432">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DQigIa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DQigI63jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__21__dbg__remBreakPoint" source="_DQA7sa3jEeeHdMWUyAlTZg" target="_DQA7sa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DQigJa3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__21__dbg__remBreakPoint__433">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DQigJK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DQigJq3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__21__dbg__viewBreakPoints" source="_DQA7sa3jEeeHdMWUyAlTZg" target="_DQA7sa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DQigKK3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__21__dbg__viewBreakPoints__434">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DQigJ63jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DQjHMK3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__21__dbg__dbgSetExecMode" source="_DQA7sa3jEeeHdMWUyAlTZg" target="_DQA7sa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DQjHMq3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__21__dbg__dbgSetExecMode__435">
                  <language>C++</language>
                  <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                </effect>
                <trigger xmi:id="_DQjHMa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DQjHM63jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__21__dbg__dbgDeferMsg" source="_DQA7sa3jEeeHdMWUyAlTZg" target="_DQA7sa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DQjHNa3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__21__dbg__dbgDeferMsg__436">
                  <language>C++</language>
                  <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DQjHNK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_DbwRoa3jEeeHdMWUyAlTZg" name="Debug__player 2 wins" source="_oFnYYExlEeeqN6OadgglSg" target="_DbJNoK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DbwRoq3jEeeHdMWUyAlTZg" name="Debug__player 2 wins__542">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__player 2 wins&quot;,(char *)&quot;whoWon?&quot;,(char *)&quot;Debug__Path__player 2 wins&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_Dbw4sK3jEeeHdMWUyAlTZg" name="Debug__player 2 wins__S" guard="_Dbxfwa3jEeeHdMWUyAlTZg" source="_DbJNoK3jEeeHdMWUyAlTZg" target="_DbhBEa3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_Dbxfwa3jEeeHdMWUyAlTZg" name="Debug__Guardplayer 2 wins">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_DbxfwK3jEeeHdMWUyAlTZg" name="Debug__Guardplayer 2 wins">
                    <language>C++</language>
                    <body>return Debug__SRO.checkDebug(&quot;whoWon?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Db0jEK3jEeeHdMWUyAlTZg" name="Debug__player 2 wins__S__544">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__player 2 wins__S&quot;,(char *)&quot;Debug__Path__player 2 wins&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_Db1KIK3jEeeHdMWUyAlTZg" name="Debug__player 2 wins__E" source="_DbsnQK3jEeeHdMWUyAlTZg" target="_aNfPIExeEeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Db1KIa3jEeeHdMWUyAlTZg" name="Debug__player 2 wins__E__545">
                  <language>C++</language>
                  <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__player 2 wins__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Pseudo13&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_Db1xMK3jEeeHdMWUyAlTZg" name="Debug__player 2 wins__dbg__varChange" source="_DbTlsa3jEeeHdMWUyAlTZg" target="_DbTlsa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Db1xMq3jEeeHdMWUyAlTZg" name="Debug__player 2 wins__dbg__varChange__547">
                  <language>C++</language>
                  <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                </effect>
                <trigger xmi:id="_Db1xMa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_Db1xM63jEeeHdMWUyAlTZg" name="Debug__player 2 wins__dbg__setBreakPoint" source="_DbTlsa3jEeeHdMWUyAlTZg" target="_DbTlsa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Db1xNa3jEeeHdMWUyAlTZg" name="Debug__player 2 wins__dbg__setBreakPoint__548">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_Db1xNK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_Db9F8K3jEeeHdMWUyAlTZg" name="Debug__player 2 wins__dbg__remBreakPoint" source="_DbTlsa3jEeeHdMWUyAlTZg" target="_DbTlsa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Db9tAa3jEeeHdMWUyAlTZg" name="Debug__player 2 wins__dbg__remBreakPoint__549">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_Db9tAK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DcAJQK3jEeeHdMWUyAlTZg" name="Debug__player 2 wins__dbg__viewBreakPoints" source="_DbTlsa3jEeeHdMWUyAlTZg" target="_DbTlsa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DcAwUK3jEeeHdMWUyAlTZg" name="Debug__player 2 wins__dbg__viewBreakPoints__550">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DcAJQa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DcAwUa3jEeeHdMWUyAlTZg" name="Debug__player 2 wins__dbg__dbgSetExecMode" source="_DbTlsa3jEeeHdMWUyAlTZg" target="_DbTlsa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DcAwU63jEeeHdMWUyAlTZg" name="Debug__player 2 wins__dbg__dbgSetExecMode__551">
                  <language>C++</language>
                  <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                </effect>
                <trigger xmi:id="_DcAwUq3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DcAwVK3jEeeHdMWUyAlTZg" name="Debug__player 2 wins__dbg__dbgDeferMsg" source="_DbTlsa3jEeeHdMWUyAlTZg" target="_DbTlsa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DcAwVq3jEeeHdMWUyAlTZg" name="Debug__player 2 wins__dbg__dbgDeferMsg__552">
                  <language>C++</language>
                  <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DcAwVa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_vmuLoExgEeeqN6OadgglSg" name="Waiting for Round">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5cD5EExgEeeqN6OadgglSg" name="setting timer">
                  <language>C++</language>
                  <body>if( not Debug__SRO.checkDebug(&quot;Waiting for Round&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
timer.informIn(UMLRTTimespec(2,0));
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Waiting for Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Df05UK3jEeeHdMWUyAlTZg" name="Waiting for Round__577">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Waiting for Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_bCA8AExhEeeqN6OadgglSg" name="Starting Round">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_kZoysExhEeeqN6OadgglSg" name="starting round">
                  <language>C++</language>
                  <body>if( not Debug__SRO.checkDebug(&quot;Starting Round&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
log.show(&quot;\n-- Starting round %d --\n&quot;, this->round);&#xD;
play.go(this->round).send();
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Starting Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DgJpcK3jEeeHdMWUyAlTZg" name="Starting Round__588">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Starting Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_wdBFAExhEeeqN6OadgglSg" name="Getting Player Choice">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Df1gYK3jEeeHdMWUyAlTZg" name="Getting Player Choice__578">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Getting Player Choice&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Df1gYa3jEeeHdMWUyAlTZg" name="Getting Player Choice__579">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Getting Player Choice&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_SzEvMExiEeeqN6OadgglSg" name="isGameOver?" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_oFnYYExlEeeqN6OadgglSg" name="whoWon?" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_CqOuEK3jEeeHdMWUyAlTZg" name="Debug__Path__to round 3" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_CqZtMa3jEeeHdMWUyAlTZg" name="Debug__C__to round 3">
                <connectionPoint xmi:id="_Cry0UK3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
                <connectionPoint xmi:id="_Cr_BkK3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
                <region xmi:id="_CqZtMq3jEeeHdMWUyAlTZg" name="Region1">
                  <transition xmi:id="_Cs61sa3jEeeHdMWUyAlTZg" name="Debug__init__trans__to round 3" source="_Cry0UK3jEeeHdMWUyAlTZg" target="_Cs6Ooa3jEeeHdMWUyAlTZg"/>
                  <transition xmi:id="_Cs61sq3jEeeHdMWUyAlTZg" name="Debug__Ac__to round 3" source="_Cs6Ooa3jEeeHdMWUyAlTZg" target="_Cs6Oo63jEeeHdMWUyAlTZg">
                    <trigger xmi:id="_Cs61s63jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_Cs61tK3jEeeHdMWUyAlTZg" name="Debug__end__trans__to round 3" source="_Cs6Oo63jEeeHdMWUyAlTZg" target="_Cr_BkK3jEeeHdMWUyAlTZg">
                    <trigger xmi:id="_Cs61ta3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_Cs6Ooa3jEeeHdMWUyAlTZg" name="Debug__B__Ac__to round 3">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Cs6Ooq3jEeeHdMWUyAlTZg" name="Debug__B__Ac__to round 3">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;to round 3&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                    </entry>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_Cs6Oo63jEeeHdMWUyAlTZg" name="Debug__A__Ac__to round 3">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Cs61sK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__to round 3">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;to round 3&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}
</body>
                    </entry>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_Cv9ioK3jEeeHdMWUyAlTZg" name="Debug__Path__Getting Player Choice__isGameOver?__8" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_CwMMIa3jEeeHdMWUyAlTZg" name="Debug__C__Getting Player Choice__isGameOver?__8">
                <connectionPoint xmi:id="_CwSSwK3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
                <connectionPoint xmi:id="_CwcDwa3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
                <region xmi:id="_CwMMIq3jEeeHdMWUyAlTZg" name="Region1">
                  <transition xmi:id="_CxArgq3jEeeHdMWUyAlTZg" name="Debug__init__trans__Getting Player Choice__isGameOver?__8" source="_CwSSwK3jEeeHdMWUyAlTZg" target="_Cw_dYa3jEeeHdMWUyAlTZg"/>
                  <transition xmi:id="_CxArg63jEeeHdMWUyAlTZg" name="Debug__Ex__Getting Player Choice" source="_Cw_dYa3jEeeHdMWUyAlTZg" target="_CxAEcK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CxpksK3jEeeHdMWUyAlTZg" name="Debug__Ex__Getting Player Choice__152">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Getting Player Choice__isGameOver?__8::Region1::Debug__Ex__Getting Player Choice&quot;,(char *)&quot;Debug__B__Ex__Getting Player Choice&quot;,(char *)&quot;Debug__B__Ac__Getting Player Choice__isGameOver?__8&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_CxArhK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_CxArha3jEeeHdMWUyAlTZg" name="Debug__AC__Getting Player Choice__isGameOver?__8" source="_CxAEcK3jEeeHdMWUyAlTZg" target="_CxArgK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CxArh63jEeeHdMWUyAlTZg" visibility="public" isReentrant="true">
                      <name xsi:nil="true"/>
                      <language>C++</language>
                      <body>    int player = msg->sapIndex();&#xD;
    log.show(&quot;Player %d played: &quot;, player);&#xD;
    switch (choice) {&#xD;
    case ROCK		:	log.show(&quot;ROCK&quot;); break;&#xD;
    case PAPER		:	log.show(&quot;PAPER&quot;); break;&#xD;
    case SCISSORS	:	log.show(&quot;SCISSORS&quot;); break;&#xD;
    }&#xD;
    if (player == 1) {&#xD;
    this->firstPlayerChoice = choice;&#xD;
    }&#xD;
    else if (player == 2){&#xD;
    this->secondPlayerChoice = choice;&#xD;
    } &#xD;
    log.show(&quot;\n&quot;);&#xD;
    if (this->firstPlayerChoice == this->secondPlayerChoice) {&#xD;
    log.show(&quot;Round %d Tied&quot;, this->round);&#xD;
    } else if ((this->secondPlayerChoice + 1) % 3 == this->firstPlayerChoice) {&#xD;
    log.show(&quot;Player 1 Wins Round %d!&quot;, this->round);&#xD;
    this->firstPlayerScore++;&#xD;
    } else {&#xD;
    log.show(&quot;Player 2 Wins Round %d!&quot;, this->round);&#xD;
    this->secondPlayerScore++;&#xD;
    }&#xD;
    log.show(&quot;\n&quot;);&#xD;
    this->round++;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Getting Player Choice__isGameOver?__8::Region1::Debug__AC__Getting Player Choice__isGameOver?__8&quot;,(char *)&quot;Debug__B__Ac__Getting Player Choice__isGameOver?__8&quot;,(char *)&quot;Debug__A__Ac__Getting Player Choice__isGameOver?__8&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_CxArhq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_CxDu0K3jEeeHdMWUyAlTZg" name="Debug__end__trans__Getting Player Choice__isGameOver?__8" source="_CxArgK3jEeeHdMWUyAlTZg" target="_CwcDwa3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CxudMK3jEeeHdMWUyAlTZg" name="Debug__end__trans__Getting Player Choice__isGameOver?__8__155">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Getting Player Choice__isGameOver?__8::Region1::Debug__end__trans__Getting Player Choice__isGameOver?__8&quot;,(char *)&quot;Debug__A__Ac__Getting Player Choice__isGameOver?__8&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_CxDu0a3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_Cw_dYa3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Getting Player Choice">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Cw_dYq3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Getting Player Choice">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Getting Player Choice&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Getting Player Choice__isGameOver?__8::Region1::Debug__B__Ex__Getting Player Choice&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_CxJ1ca3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Getting Player Choice__148">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Getting Player Choice__isGameOver?__8::Region1::Debug__B__Ex__Getting Player Choice&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_CxAEcK3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Getting Player Choice__isGameOver?__8">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_CxAEca3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Getting Player Choice__isGameOver?__8">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Getting Player Choice&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;Getting Player Choice__isGameOver?__8&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Getting Player Choice__isGameOver?__8::Region1::Debug__B__Ac__Getting Player Choice__isGameOver?__8&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_CxZtEa3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Getting Player Choice__isGameOver?__8__149">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Getting Player Choice__isGameOver?__8::Region1::Debug__B__Ac__Getting Player Choice__isGameOver?__8&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_CxArgK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Getting Player Choice__isGameOver?__8">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_CxArga3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Getting Player Choice__isGameOver?__8">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Getting Player Choice__isGameOver?__8&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Getting Player Choice__isGameOver?__8::Region1::Debug__A__Ac__Getting Player Choice__isGameOver?__8&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Cxo9oa3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Getting Player Choice__isGameOver?__8__150">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Getting Player Choice__isGameOver?__8::Region1::Debug__A__Ac__Getting Player Choice__isGameOver?__8&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_CxzVsK3jEeeHdMWUyAlTZg" name="Debug__Path__Waiting for Round__Starting Round__9" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_Cx9GsK3jEeeHdMWUyAlTZg" name="Debug__C__Waiting for Round__Starting Round__9">
                <connectionPoint xmi:id="_CyCmQa3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
                <connectionPoint xmi:id="_CyMXQa3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
                <region xmi:id="_Cx9Gsa3jEeeHdMWUyAlTZg" name="Region1">
                  <transition xmi:id="_CysGgK3jEeeHdMWUyAlTZg" name="Debug__init__trans__Waiting for Round__Starting Round__9" source="_CyCmQa3jEeeHdMWUyAlTZg" target="_Cyq4YK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CzkQQa3jEeeHdMWUyAlTZg" name="Debug__init__trans__Waiting for Round__Starting Round__9__174">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Waiting for Round__Starting Round__9::Region1::Debug__init__trans__Waiting for Round__Starting Round__9&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__Waiting for Round&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                    </effect>
                  </transition>
                  <transition xmi:id="_CysGga3jEeeHdMWUyAlTZg" name="Debug__Ex__Waiting for Round" source="_Cyq4YK3jEeeHdMWUyAlTZg" target="_Cyq4Yq3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CzleYK3jEeeHdMWUyAlTZg" name="Debug__Ex__Waiting for Round__176">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Waiting for Round__Starting Round__9::Region1::Debug__Ex__Waiting for Round&quot;,(char *)&quot;Debug__B__Ex__Waiting for Round&quot;,(char *)&quot;Debug__B__Ac__Waiting for Round__Starting Round__9&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_CysGgq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_CysGg63jEeeHdMWUyAlTZg" name="Debug__AC__Waiting for Round__Starting Round__9" source="_Cyq4Yq3jEeeHdMWUyAlTZg" target="_CyrfcK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CzmFcK3jEeeHdMWUyAlTZg" name="Debug__AC__Waiting for Round__Starting Round__9__178">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Waiting for Round__Starting Round__9::Region1::Debug__AC__Waiting for Round__Starting Round__9&quot;,(char *)&quot;Debug__B__Ac__Waiting for Round__Starting Round__9&quot;,(char *)&quot;Debug__A__Ac__Waiting for Round__Starting Round__9&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_CysGhK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_CysGha3jEeeHdMWUyAlTZg" name="Debug__En__Starting Round" source="_CyrfcK3jEeeHdMWUyAlTZg" target="_Cyrfcq3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CysGh63jEeeHdMWUyAlTZg" name="starting round" visibility="public" isReentrant="true">
                      <language>C++</language>
                      <body>log.show(&quot;\n-- Starting round %d --\n&quot;, this->round);&#xD;
play.go(this->round).send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Waiting for Round__Starting Round__9::Region1::Debug__En__Starting Round&quot;,(char *)&quot;Debug__A__Ac__Waiting for Round__Starting Round__9&quot;,(char *)&quot;Debug__A__En__Starting Round&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_CysGhq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_CysGiK3jEeeHdMWUyAlTZg" name="Debug__end__trans__Waiting for Round__Starting Round__9" source="_Cyrfcq3jEeeHdMWUyAlTZg" target="_CyMXQa3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CzqW4K3jEeeHdMWUyAlTZg" name="Debug__end__trans__Waiting for Round__Starting Round__9__181">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Waiting for Round__Starting Round__9::Region1::Debug__end__trans__Waiting for Round__Starting Round__9&quot;,(char *)&quot;Debug__A__En__Starting Round&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_CyvJ0K3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_Cyq4YK3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Waiting for Round">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Cyq4Ya3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Waiting for Round">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Waiting for Round&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Waiting for Round__Starting Round__9::Region1::Debug__B__Ex__Waiting for Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Cy1QcK3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Waiting for Round__169">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Waiting for Round__Starting Round__9::Region1::Debug__B__Ex__Waiting for Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_Cyq4Yq3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Waiting for Round__Starting Round__9">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Cyq4Y63jEeeHdMWUyAlTZg" name="Debug__B__Ac__Waiting for Round__Starting Round__9">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Waiting for Round&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;Waiting for Round__Starting Round__9&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Waiting for Round__Starting Round__9::Region1::Debug__B__Ac__Waiting for Round__Starting Round__9&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_CzIyca3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Waiting for Round__Starting Round__9__170">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Waiting for Round__Starting Round__9::Region1::Debug__B__Ac__Waiting for Round__Starting Round__9&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_CyrfcK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Waiting for Round__Starting Round__9">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Cyrfca3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Waiting for Round__Starting Round__9">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Waiting for Round__Starting Round__9&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Starting Round&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Waiting for Round__Starting Round__9::Region1::Debug__A__Ac__Waiting for Round__Starting Round__9&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_CzR8Ya3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Waiting for Round__Starting Round__9__171">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Waiting for Round__Starting Round__9::Region1::Debug__A__Ac__Waiting for Round__Starting Round__9&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_Cyrfcq3jEeeHdMWUyAlTZg" name="Debug__A__En__Starting Round">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Cyrfc63jEeeHdMWUyAlTZg" name="Debug__A__En__Starting Round">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Starting Round&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Waiting for Round__Starting Round__9::Region1::Debug__A__En__Starting Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_CzTKgK3jEeeHdMWUyAlTZg" name="Debug__A__En__Starting Round__172">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Waiting for Round__Starting Round__9::Region1::Debug__A__En__Starting Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_C4howK3jEeeHdMWUyAlTZg" name="Debug__Path__player 1 wins" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_C4vrMK3jEeeHdMWUyAlTZg" name="Debug__C__player 1 wins">
                <connectionPoint xmi:id="_C5FCYa3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
                <connectionPoint xmi:id="_C5U6Aa3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
                <region xmi:id="_C4vrMa3jEeeHdMWUyAlTZg" name="Region1">
                  <transition xmi:id="_C6APcq3jEeeHdMWUyAlTZg" name="Debug__init__trans__player 1 wins" source="_C5FCYa3jEeeHdMWUyAlTZg" target="_C5_oYa3jEeeHdMWUyAlTZg"/>
                  <transition xmi:id="_C6APc63jEeeHdMWUyAlTZg" name="Debug__Ac__player 1 wins" source="_C5_oYa3jEeeHdMWUyAlTZg" target="_C6APcK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C6A2gK3jEeeHdMWUyAlTZg" visibility="public" isReentrant="true">
                      <name xsi:nil="true"/>
                      <language>C++</language>
                      <body>log.show(&quot;\nplayer 1 wins the game!&quot;);</body>
                    </effect>
                    <trigger xmi:id="_C6APdK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_C6A2ga3jEeeHdMWUyAlTZg" name="Debug__end__trans__player 1 wins" source="_C6APcK3jEeeHdMWUyAlTZg" target="_C5U6Aa3jEeeHdMWUyAlTZg">
                    <trigger xmi:id="_C6A2gq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_C5_oYa3jEeeHdMWUyAlTZg" name="Debug__B__Ac__player 1 wins">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_C5_oYq3jEeeHdMWUyAlTZg" name="Debug__B__Ac__player 1 wins">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;player 1 wins&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                    </entry>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_C6APcK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__player 1 wins">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_C6APca3jEeeHdMWUyAlTZg" name="Debug__A__Ac__player 1 wins">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;player 1 wins&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}
</body>
                    </entry>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_C6qWwK3jEeeHdMWUyAlTZg" name="Debug__Path__in" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_C7CKMa3jEeeHdMWUyAlTZg" name="Debug__C__in">
                <connectionPoint xmi:id="_C7Qzsa3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
                <connectionPoint xmi:id="_C7kVsK3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
                <region xmi:id="_C7CKMq3jEeeHdMWUyAlTZg" name="Region1">
                  <transition xmi:id="_C8Ujoq3jEeeHdMWUyAlTZg" name="Debug__init__trans__in" source="_C7Qzsa3jEeeHdMWUyAlTZg" target="_C8T8kK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C9PJoK3jEeeHdMWUyAlTZg" name="Debug__init__trans__in__251">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__in::Region1::Debug__init__trans__in&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__in&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                    </effect>
                  </transition>
                  <transition xmi:id="_C8VKsK3jEeeHdMWUyAlTZg" name="Debug__Ac__in" source="_C8T8kK3jEeeHdMWUyAlTZg" target="_C8T8kq3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C9PwsK3jEeeHdMWUyAlTZg" name="Debug__Ac__in__253">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__in::Region1::Debug__Ac__in&quot;,(char *)&quot;Debug__B__Ac__in&quot;,(char *)&quot;Debug__A__Ac__in&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_C8VKsa3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_C8VKsq3jEeeHdMWUyAlTZg" name="Debug__En__Waiting for Round" source="_C8T8kq3jEeeHdMWUyAlTZg" target="_C8UjoK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C8VKtK3jEeeHdMWUyAlTZg" name="setting timer" visibility="public" isReentrant="true">
                      <language>C++</language>
                      <body>timer.informIn(UMLRTTimespec(2,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__in::Region1::Debug__En__Waiting for Round&quot;,(char *)&quot;Debug__A__Ac__in&quot;,(char *)&quot;Debug__A__En__in&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_C8VKs63jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_C8VKta3jEeeHdMWUyAlTZg" name="Debug__end__trans__in" source="_C8UjoK3jEeeHdMWUyAlTZg" target="_C7kVsK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C9UCIK3jEeeHdMWUyAlTZg" name="Debug__end__trans__in__256">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__in::Region1::Debug__end__trans__in&quot;,(char *)&quot;Debug__A__En__in&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_C8VKtq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_C8T8kK3jEeeHdMWUyAlTZg" name="Debug__B__Ac__in">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_C8T8ka3jEeeHdMWUyAlTZg" name="Debug__B__Ac__in">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;in&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__in::Region1::Debug__B__Ac__in&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_C8pTwa3jEeeHdMWUyAlTZg" name="Debug__B__Ac__in__247">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__in::Region1::Debug__B__Ac__in&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_C8T8kq3jEeeHdMWUyAlTZg" name="Debug__A__Ac__in">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_C8T8k63jEeeHdMWUyAlTZg" name="Debug__A__Ac__in">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;in&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Waiting for Round&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__in::Region1::Debug__A__Ac__in&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_C88Osa3jEeeHdMWUyAlTZg" name="Debug__A__Ac__in__248">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__in::Region1::Debug__A__Ac__in&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_C8UjoK3jEeeHdMWUyAlTZg" name="Debug__A__En__in">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_C8Ujoa3jEeeHdMWUyAlTZg" name="Debug__A__En__in">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Waiting for Round&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__in::Region1::Debug__A__En__in&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_C9Oika3jEeeHdMWUyAlTZg" name="Debug__A__En__in__249">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__in::Region1::Debug__A__En__in&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_DOU5oK3jEeeHdMWUyAlTZg" name="Debug__Path__game over" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_DOeqoa3jEeeHdMWUyAlTZg" name="Debug__C__game over">
                <connectionPoint xmi:id="_DOn0ka3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
                <connectionPoint xmi:id="_DOstEa3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
                <region xmi:id="_DOeqoq3jEeeHdMWUyAlTZg" name="Region1">
                  <transition xmi:id="_DPSi8q3jEeeHdMWUyAlTZg" name="Debug__init__trans__game over" source="_DOn0ka3jEeeHdMWUyAlTZg" target="_DPR74a3jEeeHdMWUyAlTZg"/>
                  <transition xmi:id="_DPSi863jEeeHdMWUyAlTZg" name="Debug__Ac__game over" source="_DPR74a3jEeeHdMWUyAlTZg" target="_DPSi8K3jEeeHdMWUyAlTZg">
                    <trigger xmi:id="_DPSi9K3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DPSi9a3jEeeHdMWUyAlTZg" name="Debug__end__trans__game over" source="_DPSi8K3jEeeHdMWUyAlTZg" target="_DOstEa3jEeeHdMWUyAlTZg">
                    <trigger xmi:id="_DPSi9q3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_DPR74a3jEeeHdMWUyAlTZg" name="Debug__B__Ac__game over">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DPR74q3jEeeHdMWUyAlTZg" name="Debug__B__Ac__game over">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;game over&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                    </entry>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DPSi8K3jEeeHdMWUyAlTZg" name="Debug__A__Ac__game over">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DPSi8a3jEeeHdMWUyAlTZg" name="Debug__A__Ac__game over">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;game over&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}
</body>
                    </entry>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_DP4Y0K3jEeeHdMWUyAlTZg" name="Debug__Path__Starting Round__Getting Player Choice__21" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_DQA7sa3jEeeHdMWUyAlTZg" name="Debug__C__Starting Round__Getting Player Choice__21">
                <connectionPoint xmi:id="_DQLTwa3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
                <connectionPoint xmi:id="_DQRaYa3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
                <region xmi:id="_DQA7sq3jEeeHdMWUyAlTZg" name="Region1">
                  <transition xmi:id="_DQ2CIq3jEeeHdMWUyAlTZg" name="Debug__init__trans__Starting Round__Getting Player Choice__21" source="_DQLTwa3jEeeHdMWUyAlTZg" target="_DQ00Aa3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DSIbkK3jEeeHdMWUyAlTZg" name="Debug__init__trans__Starting Round__Getting Player Choice__21__442">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Starting Round__Getting Player Choice__21::Region1::Debug__init__trans__Starting Round__Getting Player Choice__21&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__Starting Round&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                    </effect>
                  </transition>
                  <transition xmi:id="_DQ2CI63jEeeHdMWUyAlTZg" name="Debug__Ex__Starting Round" source="_DQ00Aa3jEeeHdMWUyAlTZg" target="_DQ00A63jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DSJCoK3jEeeHdMWUyAlTZg" name="Debug__Ex__Starting Round__444">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Starting Round__Getting Player Choice__21::Region1::Debug__Ex__Starting Round&quot;,(char *)&quot;Debug__B__Ex__Starting Round&quot;,(char *)&quot;Debug__B__Ac__Starting Round__Getting Player Choice__21&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DQ2CJK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DQ2CJa3jEeeHdMWUyAlTZg" name="Debug__AC__Starting Round__Getting Player Choice__21" source="_DQ00A63jEeeHdMWUyAlTZg" target="_DQ1bEK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DQ2pMK3jEeeHdMWUyAlTZg" visibility="public" isReentrant="true">
                      <name xsi:nil="true"/>
                      <language>C++</language>
                      <body>    int player = msg->sapIndex();&#xD;
    log.show(&quot;Player %d played: &quot;, player);&#xD;
    switch (choice) {&#xD;
        case ROCK		:	log.show(&quot;ROCK&quot;); break;&#xD;
        case PAPER		:	log.show(&quot;PAPER&quot;); break;&#xD;
        case SCISSORS	:	log.show(&quot;SCISSORS&quot;); break;&#xD;
    }&#xD;
    if (player == 1) {&#xD;
    this->firstPlayerChoice = choice;&#xD;
    }&#xD;
    else if (player == 2){&#xD;
    this->secondPlayerChoice = choice;&#xD;
    } &#xD;
    log.show(&quot;\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Starting Round__Getting Player Choice__21::Region1::Debug__AC__Starting Round__Getting Player Choice__21&quot;,(char *)&quot;Debug__B__Ac__Starting Round__Getting Player Choice__21&quot;,(char *)&quot;Debug__A__Ac__Starting Round__Getting Player Choice__21&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DQ2CJq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DQ2pMa3jEeeHdMWUyAlTZg" name="Debug__En__Getting Player Choice" source="_DQ1bEK3jEeeHdMWUyAlTZg" target="_DQ2CIK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DSSMkK3jEeeHdMWUyAlTZg" name="Debug__En__Getting Player Choice__447">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Starting Round__Getting Player Choice__21::Region1::Debug__En__Getting Player Choice&quot;,(char *)&quot;Debug__A__Ac__Starting Round__Getting Player Choice__21&quot;,(char *)&quot;Debug__A__En__Getting Player Choice&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DQ2pMq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DQ2pM63jEeeHdMWUyAlTZg" name="Debug__end__trans__Starting Round__Getting Player Choice__21" source="_DQ2CIK3jEeeHdMWUyAlTZg" target="_DQRaYa3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DSTasK3jEeeHdMWUyAlTZg" name="Debug__end__trans__Starting Round__Getting Player Choice__21__449">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Starting Round__Getting Player Choice__21::Region1::Debug__end__trans__Starting Round__Getting Player Choice__21&quot;,(char *)&quot;Debug__A__En__Getting Player Choice&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DQ2pNK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_DQ00Aa3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Starting Round">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DQ00Aq3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Starting Round">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Starting Round&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Starting Round__Getting Player Choice__21::Region1::Debug__B__Ex__Starting Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DRHH4K3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Starting Round__437">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Starting Round__Getting Player Choice__21::Region1::Debug__B__Ex__Starting Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DQ00A63jEeeHdMWUyAlTZg" name="Debug__B__Ac__Starting Round__Getting Player Choice__21">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DQ00BK3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Starting Round__Getting Player Choice__21">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Starting Round&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;Starting Round__Getting Player Choice__21&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Starting Round__Getting Player Choice__21::Region1::Debug__B__Ac__Starting Round__Getting Player Choice__21&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DRZbwa3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Starting Round__Getting Player Choice__21__438">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Starting Round__Getting Player Choice__21::Region1::Debug__B__Ac__Starting Round__Getting Player Choice__21&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DQ1bEK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Starting Round__Getting Player Choice__21">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DQ1bEa3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Starting Round__Getting Player Choice__21">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Starting Round__Getting Player Choice__21&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Getting Player Choice&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Starting Round__Getting Player Choice__21::Region1::Debug__A__Ac__Starting Round__Getting Player Choice__21&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DRp6ca3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Starting Round__Getting Player Choice__21__439">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Starting Round__Getting Player Choice__21::Region1::Debug__A__Ac__Starting Round__Getting Player Choice__21&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DQ2CIK3jEeeHdMWUyAlTZg" name="Debug__A__En__Getting Player Choice">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DQ2CIa3jEeeHdMWUyAlTZg" name="Debug__A__En__Getting Player Choice">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Getting Player Choice&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Starting Round__Getting Player Choice__21::Region1::Debug__A__En__Getting Player Choice&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DRydUK3jEeeHdMWUyAlTZg" name="Debug__A__En__Getting Player Choice__440">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 2::Region1::Debug__C__Starting Round__Getting Player Choice__21::Region1::Debug__A__En__Getting Player Choice&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_DbJNoK3jEeeHdMWUyAlTZg" name="Debug__Path__player 2 wins" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_DbTlsa3jEeeHdMWUyAlTZg" name="Debug__C__player 2 wins">
                <connectionPoint xmi:id="_DbhBEa3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
                <connectionPoint xmi:id="_DbsnQK3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
                <region xmi:id="_DbTlsq3jEeeHdMWUyAlTZg" name="Region1">
                  <transition xmi:id="_DcPZ0K3jEeeHdMWUyAlTZg" name="Debug__init__trans__player 2 wins" source="_DbhBEa3jEeeHdMWUyAlTZg" target="_DcLvca3jEeeHdMWUyAlTZg"/>
                  <transition xmi:id="_DcPZ0a3jEeeHdMWUyAlTZg" name="Debug__Ac__player 2 wins" source="_DcLvca3jEeeHdMWUyAlTZg" target="_DcLvc63jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DcPZ063jEeeHdMWUyAlTZg" visibility="public" isReentrant="true">
                      <name xsi:nil="true"/>
                      <language>C++</language>
                      <body>log.show(&quot;\nplayer 2 wins the game!&quot;);</body>
                    </effect>
                    <trigger xmi:id="_DcPZ0q3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DcPZ1K3jEeeHdMWUyAlTZg" name="Debug__end__trans__player 2 wins" source="_DcLvc63jEeeHdMWUyAlTZg" target="_DbsnQK3jEeeHdMWUyAlTZg">
                    <trigger xmi:id="_DcPZ1a3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_DcLvca3jEeeHdMWUyAlTZg" name="Debug__B__Ac__player 2 wins">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DcLvcq3jEeeHdMWUyAlTZg" name="Debug__B__Ac__player 2 wins">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;player 2 wins&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                    </entry>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DcLvc63jEeeHdMWUyAlTZg" name="Debug__A__Ac__player 2 wins">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DcMWgK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__player 2 wins">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;player 2 wins&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}
</body>
                    </entry>
                  </subvertex>
                </region>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_qkeTYExYEeeqN6OadgglSg" name="Round 3">
            <connectionPoint xmi:id="_HzVJdE05EeeqN6OadgglSg" name="Pseudo19" kind="entryPoint"/>
            <connectionPoint xmi:id="_HzeTYE05EeeqN6OadgglSg" name="Pseudo4" kind="exitPoint"/>
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DgUBgK3jEeeHdMWUyAlTZg" name="Round 3__594">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DgbWQK3jEeeHdMWUyAlTZg" name="Round 3__595">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
            <region xmi:id="_HzLYcE05EeeqN6OadgglSg" name="Region1">
              <transition xmi:id="_PxTFkE05EeeqN6OadgglSg" name="in" kind="local" source="_DJCxAK3jEeeHdMWUyAlTZg" target="_NMfmgE05EeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DK-DoK3jEeeHdMWUyAlTZg" name="in__370">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::in&quot;,(char *)&quot;Debug__Path__in&quot;,(char *)&quot;Waiting for Round&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_e06OsE05EeeqN6OadgglSg" name="Waiting for Round__Starting Round__22" source="_DSV28K3jEeeHdMWUyAlTZg" target="_aDJI0E05EeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DVvJMK3jEeeHdMWUyAlTZg" name="Waiting for Round__Starting Round__22__477">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Waiting for Round__Starting Round__22&quot;,(char *)&quot;Debug__Path__Waiting for Round__Starting Round__22&quot;,(char *)&quot;Starting Round&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_lbResE05EeeqN6OadgglSg" name="Starting Round__Getting Player Choice__23" source="_DW_tcK3jEeeHdMWUyAlTZg" target="_jaSeYE05EeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_soQp0E05EeeqN6OadgglSg">
                  <language>C++</language>
                  <body>    int player = msg->sapIndex();&#xD;
    log.show(&quot;Player %d played: &quot;, player);&#xD;
    switch (choice) {&#xD;
        case ROCK		:	log.show(&quot;ROCK&quot;); break;&#xD;
        case PAPER		:	log.show(&quot;PAPER&quot;); break;&#xD;
        case SCISSORS	:	log.show(&quot;SCISSORS&quot;); break;&#xD;
    }&#xD;
    if (player == 1) {&#xD;
    this->firstPlayerChoice = choice;&#xD;
    }&#xD;
    else if (player == 2){&#xD;
    this->secondPlayerChoice = choice;&#xD;
    } &#xD;
    log.show(&quot;\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Starting Round__Getting Player Choice__23&quot;,(char *)&quot;Debug__Path__Starting Round__Getting Player Choice__23&quot;,(char *)&quot;Getting Player Choice&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_aTYHwE06EeeqN6OadgglSg" name="Getting Player Choice__whoWon?__15" source="_DEGmoK3jEeeHdMWUyAlTZg" target="_XA5DUE06EeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_rGPA8E06EeeqN6OadgglSg">
                  <language>C++</language>
                  <body>    int player = msg->sapIndex();&#xD;
    log.show(&quot;Player %d played: &quot;, player);&#xD;
    switch (choice) {&#xD;
    case ROCK		:	log.show(&quot;ROCK&quot;); break;&#xD;
    case PAPER		:	log.show(&quot;PAPER&quot;); break;&#xD;
    case SCISSORS	:	log.show(&quot;SCISSORS&quot;); break;&#xD;
    }&#xD;
    if (player == 1) {&#xD;
    this->firstPlayerChoice = choice;&#xD;
    }&#xD;
    else if (player == 2){&#xD;
    this->secondPlayerChoice = choice;&#xD;
    } &#xD;
    log.show(&quot;\n&quot;);&#xD;
    if (this->firstPlayerChoice == this->secondPlayerChoice) {&#xD;
    log.show(&quot;Round %d Tied&quot;, this->round);&#xD;
    } else if ((this->secondPlayerChoice + 1) % 3 == this->firstPlayerChoice) {&#xD;
    log.show(&quot;Player 1 Wins Round %d!&quot;, this->round);&#xD;
    this->firstPlayerScore++;&#xD;
    } else {&#xD;
    log.show(&quot;Player 2 Wins Round %d!&quot;, this->round);&#xD;
    this->secondPlayerScore++;&#xD;
    }&#xD;
    log.show(&quot;\n&quot;);&#xD;
    this->round++;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Getting Player Choice__whoWon?__15&quot;,(char *)&quot;Debug__Path__Getting Player Choice__whoWon?__15&quot;,(char *)&quot;whoWon?&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_AsjpIE07EeeqN6OadgglSg" name="Tie" source="_C9g2cK3jEeeHdMWUyAlTZg" target="_HzeTYE05EeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IaF8kE07EeeqN6OadgglSg">
                  <language>C++</language>
                  <body>log.show(&quot;\nGame Tied!&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Tie&quot;,(char *)&quot;Debug__Path__Tie&quot;,(char *)&quot;Pseudo4&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_M5uwoE07EeeqN6OadgglSg" name="Player 2 Wins" source="_DNCgMK3jEeeHdMWUyAlTZg" target="_HzeTYE05EeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_smDYcE07EeeqN6OadgglSg">
                  <language>C++</language>
                  <body>log.show(&quot;\nPlayer 2 Wins!&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Player 2 Wins&quot;,(char *)&quot;Debug__Path__Player 2 Wins&quot;,(char *)&quot;Pseudo4&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_t44SQE07EeeqN6OadgglSg" name="Player 1 Wins" source="_DVzaoK3jEeeHdMWUyAlTZg" target="_HzeTYE05EeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DT1_AE08EeeqN6OadgglSg">
                  <language>C++</language>
                  <body>log.show(&quot;\nPlayer 1 Wins!&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Player 1 Wins&quot;,(char *)&quot;Debug__Path__Player 1 Wins&quot;,(char *)&quot;Pseudo4&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_C-OoIK3jEeeHdMWUyAlTZg" name="Debug__Tie" source="_XA5DUE06EeeqN6OadgglSg" target="_C9g2cK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C-OoIa3jEeeHdMWUyAlTZg" name="Debug__Tie__260">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__Tie&quot;,(char *)&quot;whoWon?&quot;,(char *)&quot;Debug__Path__Tie&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_C-PPMK3jEeeHdMWUyAlTZg" name="Debug__Tie__S" guard="_C-PPMq3jEeeHdMWUyAlTZg" source="_C9g2cK3jEeeHdMWUyAlTZg" target="_C97GIK3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_C-PPMq3jEeeHdMWUyAlTZg" name="Debug__GuardTie">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_C-PPMa3jEeeHdMWUyAlTZg" name="Debug__GuardTie">
                    <language>C++</language>
                    <body>return Debug__SRO.checkDebug(&quot;whoWon?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C-PPM63jEeeHdMWUyAlTZg" name="Debug__Tie__S__262">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__Tie__S&quot;,(char *)&quot;Debug__Path__Tie&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_C-S5kK3jEeeHdMWUyAlTZg" name="Debug__Tie__E" source="_C-GFQa3jEeeHdMWUyAlTZg" target="_HzeTYE05EeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C-TgoK3jEeeHdMWUyAlTZg" name="Debug__Tie__E__263">
                  <language>C++</language>
                  <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__Tie__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Pseudo4&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_C-UHsK3jEeeHdMWUyAlTZg" name="Debug__Tie__dbg__varChange" source="_C9m9Ea3jEeeHdMWUyAlTZg" target="_C9m9Ea3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C-UHsq3jEeeHdMWUyAlTZg" name="Debug__Tie__dbg__varChange__265">
                  <language>C++</language>
                  <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                </effect>
                <trigger xmi:id="_C-UHsa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_C-UHs63jEeeHdMWUyAlTZg" name="Debug__Tie__dbg__setBreakPoint" source="_C9m9Ea3jEeeHdMWUyAlTZg" target="_C9m9Ea3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C-UHta3jEeeHdMWUyAlTZg" name="Debug__Tie__dbg__setBreakPoint__266">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_C-UHtK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_C-UuwK3jEeeHdMWUyAlTZg" name="Debug__Tie__dbg__remBreakPoint" source="_C9m9Ea3jEeeHdMWUyAlTZg" target="_C9m9Ea3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C-Uuwq3jEeeHdMWUyAlTZg" name="Debug__Tie__dbg__remBreakPoint__267">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_C-Uuwa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_C-Uuw63jEeeHdMWUyAlTZg" name="Debug__Tie__dbg__viewBreakPoints" source="_C9m9Ea3jEeeHdMWUyAlTZg" target="_C9m9Ea3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C-Uuxa3jEeeHdMWUyAlTZg" name="Debug__Tie__dbg__viewBreakPoints__268">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_C-UuxK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_C-d4sK3jEeeHdMWUyAlTZg" name="Debug__Tie__dbg__dbgSetExecMode" source="_C9m9Ea3jEeeHdMWUyAlTZg" target="_C9m9Ea3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C-efwK3jEeeHdMWUyAlTZg" name="Debug__Tie__dbg__dbgSetExecMode__269">
                  <language>C++</language>
                  <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                </effect>
                <trigger xmi:id="_C-d4sa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_C-efwa3jEeeHdMWUyAlTZg" name="Debug__Tie__dbg__dbgDeferMsg" source="_C9m9Ea3jEeeHdMWUyAlTZg" target="_C9m9Ea3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C-efw63jEeeHdMWUyAlTZg" name="Debug__Tie__dbg__dbgDeferMsg__270">
                  <language>C++</language>
                  <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                </effect>
                <trigger xmi:id="_C-efwq3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_DFGsMa3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__whoWon?__15" source="_jaSeYE05EeeqN6OadgglSg" target="_DEGmoK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DFGsMq3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__whoWon?__15__299">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__Getting Player Choice__whoWon?__15&quot;,(char *)&quot;Getting Player Choice&quot;,(char *)&quot;Debug__Path__Getting Player Choice__whoWon?__15&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_gDtHoE06EeeqN6OadgglSg" event="_BhCxcMFfEeaVzb3gsu6Gyw" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_DFUHkK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__whoWon?__15__S" guard="_DFUHkq3jEeeHdMWUyAlTZg" source="_DEGmoK3jEeeHdMWUyAlTZg" target="_DEuRsa3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_DFUHkq3jEeeHdMWUyAlTZg" name="Debug__GuardGetting Player Choice__whoWon?__15">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_DFUHka3jEeeHdMWUyAlTZg" name="Debug__GuardGetting Player Choice__whoWon?__15">
                    <language>C++</language>
                    <body>return Debug__SRO.checkDebug(&quot;Getting Player Choice&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DFUuoK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__whoWon?__15__S__301">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__Getting Player Choice__whoWon?__15__S&quot;,(char *)&quot;Debug__Path__Getting Player Choice__whoWon?__15&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DFVVsK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__whoWon?__15__E" source="_DFAlka3jEeeHdMWUyAlTZg" target="_XA5DUE06EeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DFVVsa3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__whoWon?__15__E__302">
                  <language>C++</language>
                  <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__Getting Player Choice__whoWon?__15__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;whoWon?&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DFV8wK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__whoWon?__15__dbg__varChange" source="_DEUCAK3jEeeHdMWUyAlTZg" target="_DEUCAK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DFV8wq3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__whoWon?__15__dbg__varChange__304">
                  <language>C++</language>
                  <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                </effect>
                <trigger xmi:id="_DFV8wa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DFYZAK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__whoWon?__15__dbg__setBreakPoint" source="_DEUCAK3jEeeHdMWUyAlTZg" target="_DEUCAK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DFZAEa3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__whoWon?__15__dbg__setBreakPoint__305">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DFZAEK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DFZAEq3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__whoWon?__15__dbg__remBreakPoint" source="_DEUCAK3jEeeHdMWUyAlTZg" target="_DEUCAK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DFZAFK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__whoWon?__15__dbg__remBreakPoint__306">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DFZAE63jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DFZAFa3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__whoWon?__15__dbg__viewBreakPoints" source="_DEUCAK3jEeeHdMWUyAlTZg" target="_DEUCAK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DFZnIK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__whoWon?__15__dbg__viewBreakPoints__307">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DFZAFq3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DFZnIa3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__whoWon?__15__dbg__dbgSetExecMode" source="_DEUCAK3jEeeHdMWUyAlTZg" target="_DEUCAK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DFZnI63jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__whoWon?__15__dbg__dbgSetExecMode__308">
                  <language>C++</language>
                  <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                </effect>
                <trigger xmi:id="_DFZnIq3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DFZnJK3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__whoWon?__15__dbg__dbgDeferMsg" source="_DEUCAK3jEeeHdMWUyAlTZg" target="_DEUCAK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DFZnJq3jEeeHdMWUyAlTZg" name="Debug__Getting Player Choice__whoWon?__15__dbg__dbgDeferMsg__309">
                  <language>C++</language>
                  <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DFZnJa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_DJtfYa3jEeeHdMWUyAlTZg" name="Debug__in" source="_HzVJdE05EeeqN6OadgglSg" target="_DJCxAK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DJtfYq3jEeeHdMWUyAlTZg" name="Debug__in__348">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__in&quot;,(char *)&quot;Pseudo19&quot;,(char *)&quot;Debug__Path__in&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DJuGcK3jEeeHdMWUyAlTZg" name="Debug__in__S" guard="_DJuGcq3jEeeHdMWUyAlTZg" source="_DJCxAK3jEeeHdMWUyAlTZg" target="_DJZWUa3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_DJuGcq3jEeeHdMWUyAlTZg" name="Debug__Guardin">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_DJuGca3jEeeHdMWUyAlTZg" name="Debug__Guardin">
                    <language>C++</language>
                    <body>return Debug__SRO.checkDebug(&quot;Pseudo19&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DJutgK3jEeeHdMWUyAlTZg" name="Debug__in__S__350">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__in__S&quot;,(char *)&quot;Debug__Path__in&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DJv7oK3jEeeHdMWUyAlTZg" name="Debug__in__E" source="_DJjuYK3jEeeHdMWUyAlTZg" target="_NMfmgE05EeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DJwisK3jEeeHdMWUyAlTZg" name="Debug__in__E__351">
                  <language>C++</language>
                  <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__in__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Waiting for Round&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DJxJwK3jEeeHdMWUyAlTZg" name="Debug__in__dbg__varChange" source="_DJL68a3jEeeHdMWUyAlTZg" target="_DJL68a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DJ0NEa3jEeeHdMWUyAlTZg" name="Debug__in__dbg__varChange__353">
                  <language>C++</language>
                  <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                </effect>
                <trigger xmi:id="_DJ0NEK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DJ0NEq3jEeeHdMWUyAlTZg" name="Debug__in__dbg__setBreakPoint" source="_DJL68a3jEeeHdMWUyAlTZg" target="_DJL68a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DJ00IK3jEeeHdMWUyAlTZg" name="Debug__in__dbg__setBreakPoint__354">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DJ0NE63jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DJ00Ia3jEeeHdMWUyAlTZg" name="Debug__in__dbg__remBreakPoint" source="_DJL68a3jEeeHdMWUyAlTZg" target="_DJL68a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DJ00I63jEeeHdMWUyAlTZg" name="Debug__in__dbg__remBreakPoint__355">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DJ00Iq3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DJ00JK3jEeeHdMWUyAlTZg" name="Debug__in__dbg__viewBreakPoints" source="_DJL68a3jEeeHdMWUyAlTZg" target="_DJL68a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DJ00Jq3jEeeHdMWUyAlTZg" name="Debug__in__dbg__viewBreakPoints__356">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DJ00Ja3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DJ1bMK3jEeeHdMWUyAlTZg" name="Debug__in__dbg__dbgSetExecMode" source="_DJL68a3jEeeHdMWUyAlTZg" target="_DJL68a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DJ1bMq3jEeeHdMWUyAlTZg" name="Debug__in__dbg__dbgSetExecMode__357">
                  <language>C++</language>
                  <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                </effect>
                <trigger xmi:id="_DJ1bMa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DJ1bM63jEeeHdMWUyAlTZg" name="Debug__in__dbg__dbgDeferMsg" source="_DJL68a3jEeeHdMWUyAlTZg" target="_DJL68a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DJ1bNa3jEeeHdMWUyAlTZg" name="Debug__in__dbg__dbgDeferMsg__358">
                  <language>C++</language>
                  <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DJ1bNK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_DNl50a3jEeeHdMWUyAlTZg" name="Debug__Player 2 Wins" guard="_UEtJkE07EeeqN6OadgglSg" source="_XA5DUE06EeeqN6OadgglSg" target="_DNCgMK3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_UEtJkE07EeeqN6OadgglSg">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_dXlqME07EeeqN6OadgglSg">
                    <language>C++</language>
                    <body>bool player2Wins = secondPlayerScore > firstPlayerScore;&#xD;
return player2Wins;</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DNl50q3jEeeHdMWUyAlTZg" name="Debug__Player 2 Wins__399">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__Player 2 Wins&quot;,(char *)&quot;whoWon?&quot;,(char *)&quot;Debug__Path__Player 2 Wins&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DNmg4K3jEeeHdMWUyAlTZg" name="Debug__Player 2 Wins__S" guard="_DNnH8a3jEeeHdMWUyAlTZg" source="_DNCgMK3jEeeHdMWUyAlTZg" target="_DNU0Ea3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_DNnH8a3jEeeHdMWUyAlTZg" name="Debug__GuardPlayer 2 Wins">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_DNnH8K3jEeeHdMWUyAlTZg" name="Debug__GuardPlayer 2 Wins">
                    <language>C++</language>
                    <body>return Debug__SRO.checkDebug(&quot;whoWon?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DNnH8q3jEeeHdMWUyAlTZg" name="Debug__Player 2 Wins__S__401">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__Player 2 Wins__S&quot;,(char *)&quot;Debug__Path__Player 2 Wins&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DNrZYK3jEeeHdMWUyAlTZg" name="Debug__Player 2 Wins__E" source="_DNa6sa3jEeeHdMWUyAlTZg" target="_HzeTYE05EeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DNrZYa3jEeeHdMWUyAlTZg" name="Debug__Player 2 Wins__E__402">
                  <language>C++</language>
                  <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__Player 2 Wins__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Pseudo4&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DNsAcK3jEeeHdMWUyAlTZg" name="Debug__Player 2 Wins__dbg__varChange" source="_DNLqIK3jEeeHdMWUyAlTZg" target="_DNLqIK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DNsAcq3jEeeHdMWUyAlTZg" name="Debug__Player 2 Wins__dbg__varChange__404">
                  <language>C++</language>
                  <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                </effect>
                <trigger xmi:id="_DNsAca3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DNsngK3jEeeHdMWUyAlTZg" name="Debug__Player 2 Wins__dbg__setBreakPoint" source="_DNLqIK3jEeeHdMWUyAlTZg" target="_DNLqIK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DNsngq3jEeeHdMWUyAlTZg" name="Debug__Player 2 Wins__dbg__setBreakPoint__405">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DNsnga3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DNxgAK3jEeeHdMWUyAlTZg" name="Debug__Player 2 Wins__dbg__remBreakPoint" source="_DNLqIK3jEeeHdMWUyAlTZg" target="_DNLqIK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DNyHEK3jEeeHdMWUyAlTZg" name="Debug__Player 2 Wins__dbg__remBreakPoint__406">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DNxgAa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DNyHEa3jEeeHdMWUyAlTZg" name="Debug__Player 2 Wins__dbg__viewBreakPoints" source="_DNLqIK3jEeeHdMWUyAlTZg" target="_DNLqIK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DNyHE63jEeeHdMWUyAlTZg" name="Debug__Player 2 Wins__dbg__viewBreakPoints__407">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DNyHEq3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DNyHFK3jEeeHdMWUyAlTZg" name="Debug__Player 2 Wins__dbg__dbgSetExecMode" source="_DNLqIK3jEeeHdMWUyAlTZg" target="_DNLqIK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DNyHFq3jEeeHdMWUyAlTZg" name="Debug__Player 2 Wins__dbg__dbgSetExecMode__408">
                  <language>C++</language>
                  <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                </effect>
                <trigger xmi:id="_DNyHFa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DNyuIK3jEeeHdMWUyAlTZg" name="Debug__Player 2 Wins__dbg__dbgDeferMsg" source="_DNLqIK3jEeeHdMWUyAlTZg" target="_DNLqIK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DNyuIq3jEeeHdMWUyAlTZg" name="Debug__Player 2 Wins__dbg__dbgDeferMsg__409">
                  <language>C++</language>
                  <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DNyuIa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_DUfMAa3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__22" source="_NMfmgE05EeeqN6OadgglSg" target="_DSV28K3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DUfMAq3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__22__452">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__Waiting for Round__Starting Round__22&quot;,(char *)&quot;Waiting for Round&quot;,(char *)&quot;Debug__Path__Waiting for Round__Starting Round__22&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_gSveoE05EeeqN6OadgglSg" port="_WP3dwN9XEeaslsNogbStzw">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:id="_DUfzEK3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__22__S" guard="_DUgaIa3jEeeHdMWUyAlTZg" source="_DSV28K3jEeeHdMWUyAlTZg" target="_DStDUa3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_DUgaIa3jEeeHdMWUyAlTZg" name="Debug__GuardWaiting for Round__Starting Round__22">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_DUgaIK3jEeeHdMWUyAlTZg" name="Debug__GuardWaiting for Round__Starting Round__22">
                    <language>C++</language>
                    <body>return Debug__SRO.checkDebug(&quot;Waiting for Round&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DUgaIq3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__22__S__454">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__Waiting for Round__Starting Round__22__S&quot;,(char *)&quot;Debug__Path__Waiting for Round__Starting Round__22&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DUhBMK3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__22__E" source="_DUUz8a3jEeeHdMWUyAlTZg" target="_aDJI0E05EeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DUhBMa3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__22__E__455">
                  <language>C++</language>
                  <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__Waiting for Round__Starting Round__22__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Starting Round&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DUnu4K3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__22__dbg__varChange" source="_DSeZ0a3jEeeHdMWUyAlTZg" target="_DSeZ0a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DUnu4q3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__22__dbg__varChange__457">
                  <language>C++</language>
                  <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                </effect>
                <trigger xmi:id="_DUnu4a3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DUoV8K3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__22__dbg__setBreakPoint" source="_DSeZ0a3jEeeHdMWUyAlTZg" target="_DSeZ0a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DUoV8q3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__22__dbg__setBreakPoint__458">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DUoV8a3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DUoV863jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__22__dbg__remBreakPoint" source="_DSeZ0a3jEeeHdMWUyAlTZg" target="_DSeZ0a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DUoV9a3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__22__dbg__remBreakPoint__459">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DUoV9K3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DUo9AK3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__22__dbg__viewBreakPoints" source="_DSeZ0a3jEeeHdMWUyAlTZg" target="_DSeZ0a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DUo9Aq3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__22__dbg__viewBreakPoints__460">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DUo9Aa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DUo9A63jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__22__dbg__dbgSetExecMode" source="_DSeZ0a3jEeeHdMWUyAlTZg" target="_DSeZ0a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DUo9Ba3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__22__dbg__dbgSetExecMode__461">
                  <language>C++</language>
                  <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                </effect>
                <trigger xmi:id="_DUo9BK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DUo9Bq3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__22__dbg__dbgDeferMsg" source="_DSeZ0a3jEeeHdMWUyAlTZg" target="_DSeZ0a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DUo9CK3jEeeHdMWUyAlTZg" name="Debug__Waiting for Round__Starting Round__22__dbg__dbgDeferMsg__462">
                  <language>C++</language>
                  <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DUo9B63jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_DWTw8a3jEeeHdMWUyAlTZg" name="Debug__Player 1 Wins" guard="_zhYL0E07EeeqN6OadgglSg" source="_XA5DUE06EeeqN6OadgglSg" target="_DVzaoK3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_zhYL0E07EeeqN6OadgglSg">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_7EhNIE07EeeqN6OadgglSg">
                    <language>C++</language>
                    <body>bool player1Wins = firstPlayerScore > secondPlayerScore;&#xD;
return player1Wins;</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DWTw8q3jEeeHdMWUyAlTZg" name="Debug__Player 1 Wins__479">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__Player 1 Wins&quot;,(char *)&quot;whoWon?&quot;,(char *)&quot;Debug__Path__Player 1 Wins&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DWXbUK3jEeeHdMWUyAlTZg" name="Debug__Player 1 Wins__S" guard="_DWXbUq3jEeeHdMWUyAlTZg" source="_DVzaoK3jEeeHdMWUyAlTZg" target="_DV9ysa3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_DWXbUq3jEeeHdMWUyAlTZg" name="Debug__GuardPlayer 1 Wins">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_DWXbUa3jEeeHdMWUyAlTZg" name="Debug__GuardPlayer 1 Wins">
                    <language>C++</language>
                    <body>return Debug__SRO.checkDebug(&quot;whoWon?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DWXbU63jEeeHdMWUyAlTZg" name="Debug__Player 1 Wins__S__481">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__Player 1 Wins__S&quot;,(char *)&quot;Debug__Path__Player 1 Wins&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DWYpcK3jEeeHdMWUyAlTZg" name="Debug__Player 1 Wins__E" source="_DWNqUa3jEeeHdMWUyAlTZg" target="_HzeTYE05EeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DWYpca3jEeeHdMWUyAlTZg" name="Debug__Player 1 Wins__E__482">
                  <language>C++</language>
                  <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__Player 1 Wins__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Pseudo4&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DWZQgK3jEeeHdMWUyAlTZg" name="Debug__Player 1 Wins__dbg__varChange" source="_DV6IUa3jEeeHdMWUyAlTZg" target="_DV6IUa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DWbswa3jEeeHdMWUyAlTZg" name="Debug__Player 1 Wins__dbg__varChange__484">
                  <language>C++</language>
                  <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                </effect>
                <trigger xmi:id="_DWbswK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DWbswq3jEeeHdMWUyAlTZg" name="Debug__Player 1 Wins__dbg__setBreakPoint" source="_DV6IUa3jEeeHdMWUyAlTZg" target="_DV6IUa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DWcT0K3jEeeHdMWUyAlTZg" name="Debug__Player 1 Wins__dbg__setBreakPoint__485">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DWbsw63jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DWcT0a3jEeeHdMWUyAlTZg" name="Debug__Player 1 Wins__dbg__remBreakPoint" source="_DV6IUa3jEeeHdMWUyAlTZg" target="_DV6IUa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DWcT063jEeeHdMWUyAlTZg" name="Debug__Player 1 Wins__dbg__remBreakPoint__486">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DWcT0q3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DWcT1K3jEeeHdMWUyAlTZg" name="Debug__Player 1 Wins__dbg__viewBreakPoints" source="_DV6IUa3jEeeHdMWUyAlTZg" target="_DV6IUa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DWcT1q3jEeeHdMWUyAlTZg" name="Debug__Player 1 Wins__dbg__viewBreakPoints__487">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DWcT1a3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DWc64K3jEeeHdMWUyAlTZg" name="Debug__Player 1 Wins__dbg__dbgSetExecMode" source="_DV6IUa3jEeeHdMWUyAlTZg" target="_DV6IUa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DWc64q3jEeeHdMWUyAlTZg" name="Debug__Player 1 Wins__dbg__dbgSetExecMode__488">
                  <language>C++</language>
                  <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                </effect>
                <trigger xmi:id="_DWc64a3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DWc6463jEeeHdMWUyAlTZg" name="Debug__Player 1 Wins__dbg__dbgDeferMsg" source="_DV6IUa3jEeeHdMWUyAlTZg" target="_DV6IUa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DWc65a3jEeeHdMWUyAlTZg" name="Debug__Player 1 Wins__dbg__dbgDeferMsg__489">
                  <language>C++</language>
                  <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DWc65K3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_DXv7YK3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__23" source="_aDJI0E05EeeqN6OadgglSg" target="_DW_tcK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DXv7Ya3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__23__492">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__Starting Round__Getting Player Choice__23&quot;,(char *)&quot;Starting Round&quot;,(char *)&quot;Debug__Path__Starting Round__Getting Player Choice__23&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_mCIqYE05EeeqN6OadgglSg" event="_BhCxcMFfEeaVzb3gsu6Gyw" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <transition xmi:id="_DXwicK3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__23__S" guard="_DXwicq3jEeeHdMWUyAlTZg" source="_DW_tcK3jEeeHdMWUyAlTZg" target="_DXbLQK3jEeeHdMWUyAlTZg">
                <ownedRule xmi:id="_DXwicq3jEeeHdMWUyAlTZg" name="Debug__GuardStarting Round__Getting Player Choice__23">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_DXwica3jEeeHdMWUyAlTZg" name="Debug__GuardStarting Round__Getting Player Choice__23">
                    <language>C++</language>
                    <body>return Debug__SRO.checkDebug(&quot;Starting Round&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DXxJgK3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__23__S__494">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__Starting Round__Getting Player Choice__23__S&quot;,(char *)&quot;Debug__Path__Starting Round__Getting Player Choice__23&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DX0M0K3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__23__E" source="_DXmxca3jEeeHdMWUyAlTZg" target="_jaSeYE05EeeqN6OadgglSg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DX0z4K3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__23__E__495">
                  <language>C++</language>
                  <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__Starting Round__Getting Player Choice__23__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Getting Player Choice&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_DX1a8K3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__23__dbg__varChange" source="_DXJeca3jEeeHdMWUyAlTZg" target="_DXJeca3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DX1a8q3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__23__dbg__varChange__497">
                  <language>C++</language>
                  <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                </effect>
                <trigger xmi:id="_DX1a8a3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DX1a863jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__23__dbg__setBreakPoint" source="_DXJeca3jEeeHdMWUyAlTZg" target="_DXJeca3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DX2CAa3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__23__dbg__setBreakPoint__498">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DX2CAK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DX4eQK3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__23__dbg__remBreakPoint" source="_DXJeca3jEeeHdMWUyAlTZg" target="_DXJeca3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DX66gK3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__23__dbg__remBreakPoint__499">
                  <language>C++</language>
                  <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DX4eQa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DX7hkK3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__23__dbg__viewBreakPoints" source="_DXJeca3jEeeHdMWUyAlTZg" target="_DXJeca3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DX7hkq3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__23__dbg__viewBreakPoints__500">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DX7hka3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DX7hk63jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__23__dbg__dbgSetExecMode" source="_DXJeca3jEeeHdMWUyAlTZg" target="_DXJeca3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DX7hla3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__23__dbg__dbgSetExecMode__501">
                  <language>C++</language>
                  <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                </effect>
                <trigger xmi:id="_DX7hlK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DX7hlq3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__23__dbg__dbgDeferMsg" source="_DXJeca3jEeeHdMWUyAlTZg" target="_DXJeca3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DX8Ioa3jEeeHdMWUyAlTZg" name="Debug__Starting Round__Getting Player Choice__23__dbg__dbgDeferMsg__502">
                  <language>C++</language>
                  <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                </effect>
                <trigger xmi:id="_DX8IoK3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_oanfkMFeEeaVzb3gsu6Gyw"/>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_NMfmgE05EeeqN6OadgglSg" name="Waiting for Round">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Wl9QQE05EeeqN6OadgglSg" name="setting timer">
                  <language>C++</language>
                  <body>if( not Debug__SRO.checkDebug(&quot;Waiting for Round&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
timer.informIn(UMLRTTimespec(2,0));
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Waiting for Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DgSzYK3jEeeHdMWUyAlTZg" name="Waiting for Round__592">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Waiting for Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_aDJI0E05EeeqN6OadgglSg" name="Starting Round">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_qr0D4E08EeeqN6OadgglSg" name="starting round">
                  <language>C++</language>
                  <body>if( not Debug__SRO.checkDebug(&quot;Starting Round&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
log.show(&quot;\n-- Starting round %d --\n&quot;, this->round);&#xD;
play.go(this->round).send();
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Starting Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DgN64K3jEeeHdMWUyAlTZg" name="Starting Round__589">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Starting Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_jaSeYE05EeeqN6OadgglSg" name="Getting Player Choice">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DgOh8K3jEeeHdMWUyAlTZg" name="Getting Player Choice__590">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Getting Player Choice&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DgOh8a3jEeeHdMWUyAlTZg" name="Getting Player Choice__591">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Getting Player Choice&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_XA5DUE06EeeqN6OadgglSg" name="whoWon?" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_C9g2cK3jEeeHdMWUyAlTZg" name="Debug__Path__Tie" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_C9m9Ea3jEeeHdMWUyAlTZg" name="Debug__C__Tie">
                <connectionPoint xmi:id="_C97GIK3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
                <connectionPoint xmi:id="_C-GFQa3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
                <region xmi:id="_C9m9Eq3jEeeHdMWUyAlTZg" name="Region1">
                  <transition xmi:id="_C-rUFK3jEeeHdMWUyAlTZg" name="Debug__init__trans__Tie" source="_C97GIK3jEeeHdMWUyAlTZg" target="_C-rUEK3jEeeHdMWUyAlTZg"/>
                  <transition xmi:id="_C-r7IK3jEeeHdMWUyAlTZg" name="Debug__Ac__Tie" source="_C-rUEK3jEeeHdMWUyAlTZg" target="_C-rUEq3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C-r7Iq3jEeeHdMWUyAlTZg" visibility="public" isReentrant="true">
                      <name xsi:nil="true"/>
                      <language>C++</language>
                      <body>log.show(&quot;\nGame Tied!&quot;);</body>
                    </effect>
                    <trigger xmi:id="_C-r7Ia3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_C-r7I63jEeeHdMWUyAlTZg" name="Debug__end__trans__Tie" source="_C-rUEq3jEeeHdMWUyAlTZg" target="_C-GFQa3jEeeHdMWUyAlTZg">
                    <trigger xmi:id="_C-r7JK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_C-rUEK3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Tie">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_C-rUEa3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Tie">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Tie&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                    </entry>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_C-rUEq3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Tie">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_C-rUE63jEeeHdMWUyAlTZg" name="Debug__A__Ac__Tie">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Tie&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}
</body>
                    </entry>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_DEGmoK3jEeeHdMWUyAlTZg" name="Debug__Path__Getting Player Choice__whoWon?__15" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_DEUCAK3jEeeHdMWUyAlTZg" name="Debug__C__Getting Player Choice__whoWon?__15">
                <connectionPoint xmi:id="_DEuRsa3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
                <connectionPoint xmi:id="_DFAlka3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
                <region xmi:id="_DEUCAa3jEeeHdMWUyAlTZg" name="Region1">
                  <transition xmi:id="_DFhi8K3jEeeHdMWUyAlTZg" name="Debug__init__trans__Getting Player Choice__whoWon?__15" source="_DEuRsa3jEeeHdMWUyAlTZg" target="_DFgU0a3jEeeHdMWUyAlTZg"/>
                  <transition xmi:id="_DFhi8a3jEeeHdMWUyAlTZg" name="Debug__Ex__Getting Player Choice" source="_DFgU0a3jEeeHdMWUyAlTZg" target="_DFgU063jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DGGxwK3jEeeHdMWUyAlTZg" name="Debug__Ex__Getting Player Choice__314">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Getting Player Choice__whoWon?__15::Region1::Debug__Ex__Getting Player Choice&quot;,(char *)&quot;Debug__B__Ex__Getting Player Choice&quot;,(char *)&quot;Debug__B__Ac__Getting Player Choice__whoWon?__15&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DFhi8q3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DFhi863jEeeHdMWUyAlTZg" name="Debug__AC__Getting Player Choice__whoWon?__15" source="_DFgU063jEeeHdMWUyAlTZg" target="_DFg74K3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DFhi9a3jEeeHdMWUyAlTZg" visibility="public" isReentrant="true">
                      <name xsi:nil="true"/>
                      <language>C++</language>
                      <body>    int player = msg->sapIndex();&#xD;
    log.show(&quot;Player %d played: &quot;, player);&#xD;
    switch (choice) {&#xD;
    case ROCK		:	log.show(&quot;ROCK&quot;); break;&#xD;
    case PAPER		:	log.show(&quot;PAPER&quot;); break;&#xD;
    case SCISSORS	:	log.show(&quot;SCISSORS&quot;); break;&#xD;
    }&#xD;
    if (player == 1) {&#xD;
    this->firstPlayerChoice = choice;&#xD;
    }&#xD;
    else if (player == 2){&#xD;
    this->secondPlayerChoice = choice;&#xD;
    } &#xD;
    log.show(&quot;\n&quot;);&#xD;
    if (this->firstPlayerChoice == this->secondPlayerChoice) {&#xD;
    log.show(&quot;Round %d Tied&quot;, this->round);&#xD;
    } else if ((this->secondPlayerChoice + 1) % 3 == this->firstPlayerChoice) {&#xD;
    log.show(&quot;Player 1 Wins Round %d!&quot;, this->round);&#xD;
    this->firstPlayerScore++;&#xD;
    } else {&#xD;
    log.show(&quot;Player 2 Wins Round %d!&quot;, this->round);&#xD;
    this->secondPlayerScore++;&#xD;
    }&#xD;
    log.show(&quot;\n&quot;);&#xD;
    this->round++;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Getting Player Choice__whoWon?__15::Region1::Debug__AC__Getting Player Choice__whoWon?__15&quot;,(char *)&quot;Debug__B__Ac__Getting Player Choice__whoWon?__15&quot;,(char *)&quot;Debug__A__Ac__Getting Player Choice__whoWon?__15&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DFhi9K3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DFhi9q3jEeeHdMWUyAlTZg" name="Debug__end__trans__Getting Player Choice__whoWon?__15" source="_DFg74K3jEeeHdMWUyAlTZg" target="_DFAlka3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DGH_4K3jEeeHdMWUyAlTZg" name="Debug__end__trans__Getting Player Choice__whoWon?__15__317">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Getting Player Choice__whoWon?__15::Region1::Debug__end__trans__Getting Player Choice__whoWon?__15&quot;,(char *)&quot;Debug__A__Ac__Getting Player Choice__whoWon?__15&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DFhi963jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_DFgU0a3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Getting Player Choice">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DFgU0q3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Getting Player Choice">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Getting Player Choice&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Getting Player Choice__whoWon?__15::Region1::Debug__B__Ex__Getting Player Choice&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DFyBoa3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Getting Player Choice__310">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Getting Player Choice__whoWon?__15::Region1::Debug__B__Ex__Getting Player Choice&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DFgU063jEeeHdMWUyAlTZg" name="Debug__B__Ac__Getting Player Choice__whoWon?__15">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DFgU1K3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Getting Player Choice__whoWon?__15">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Getting Player Choice&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;Getting Player Choice__whoWon?__15&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Getting Player Choice__whoWon?__15::Region1::Debug__B__Ac__Getting Player Choice__whoWon?__15&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DF8Zsa3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Getting Player Choice__whoWon?__15__311">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Getting Player Choice__whoWon?__15::Region1::Debug__B__Ac__Getting Player Choice__whoWon?__15&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DFg74K3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Getting Player Choice__whoWon?__15">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DFg74a3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Getting Player Choice__whoWon?__15">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Getting Player Choice__whoWon?__15&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Getting Player Choice__whoWon?__15::Region1::Debug__A__Ac__Getting Player Choice__whoWon?__15&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DGGKsK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Getting Player Choice__whoWon?__15__312">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Getting Player Choice__whoWon?__15::Region1::Debug__A__Ac__Getting Player Choice__whoWon?__15&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_DJCxAK3jEeeHdMWUyAlTZg" name="Debug__Path__in" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_DJL68a3jEeeHdMWUyAlTZg" name="Debug__C__in">
                <connectionPoint xmi:id="_DJZWUa3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
                <connectionPoint xmi:id="_DJjuYK3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
                <region xmi:id="_DJL68q3jEeeHdMWUyAlTZg" name="Region1">
                  <transition xmi:id="_DKIWIK3jEeeHdMWUyAlTZg" name="Debug__init__trans__in" source="_DJZWUa3jEeeHdMWUyAlTZg" target="_DJ_zQa3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DKvaIK3jEeeHdMWUyAlTZg" name="Debug__init__trans__in__363">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__in::Region1::Debug__init__trans__in&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__in&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                    </effect>
                  </transition>
                  <transition xmi:id="_DKIWIa3jEeeHdMWUyAlTZg" name="Debug__Ac__in" source="_DJ_zQa3jEeeHdMWUyAlTZg" target="_DKErwK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DKwBMK3jEeeHdMWUyAlTZg" name="Debug__Ac__in__365">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__in::Region1::Debug__Ac__in&quot;,(char *)&quot;Debug__B__Ac__in&quot;,(char *)&quot;Debug__A__Ac__in&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DKIWIq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DKIWI63jEeeHdMWUyAlTZg" name="Debug__En__Waiting for Round" source="_DKErwK3jEeeHdMWUyAlTZg" target="_DKHvEa3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DKIWJa3jEeeHdMWUyAlTZg" name="setting timer" visibility="public" isReentrant="true">
                      <language>C++</language>
                      <body>timer.informIn(UMLRTTimespec(2,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__in::Region1::Debug__En__Waiting for Round&quot;,(char *)&quot;Debug__A__Ac__in&quot;,(char *)&quot;Debug__A__En__in&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DKIWJK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DKIWJq3jEeeHdMWUyAlTZg" name="Debug__end__trans__in" source="_DKHvEa3jEeeHdMWUyAlTZg" target="_DJjuYK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DK9ckK3jEeeHdMWUyAlTZg" name="Debug__end__trans__in__368">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__in::Region1::Debug__end__trans__in&quot;,(char *)&quot;Debug__A__En__in&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DKI9MK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_DJ_zQa3jEeeHdMWUyAlTZg" name="Debug__B__Ac__in">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DJ_zQq3jEeeHdMWUyAlTZg" name="Debug__B__Ac__in">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;in&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__in::Region1::Debug__B__Ac__in&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DKTVQa3jEeeHdMWUyAlTZg" name="Debug__B__Ac__in__359">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__in::Region1::Debug__B__Ac__in&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DKErwK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__in">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DKHvEK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__in">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;in&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Waiting for Round&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__in::Region1::Debug__A__Ac__in&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DKdGQa3jEeeHdMWUyAlTZg" name="Debug__A__Ac__in__360">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__in::Region1::Debug__A__Ac__in&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DKHvEa3jEeeHdMWUyAlTZg" name="Debug__A__En__in">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DKHvEq3jEeeHdMWUyAlTZg" name="Debug__A__En__in">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Waiting for Round&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__in::Region1::Debug__A__En__in&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DKmQMa3jEeeHdMWUyAlTZg" name="Debug__A__En__in__361">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__in::Region1::Debug__A__En__in&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_DNCgMK3jEeeHdMWUyAlTZg" name="Debug__Path__Player 2 Wins" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_DNLqIK3jEeeHdMWUyAlTZg" name="Debug__C__Player 2 Wins">
                <connectionPoint xmi:id="_DNU0Ea3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
                <connectionPoint xmi:id="_DNa6sa3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
                <region xmi:id="_DNLqIa3jEeeHdMWUyAlTZg" name="Region1">
                  <transition xmi:id="_DN6p8a3jEeeHdMWUyAlTZg" name="Debug__init__trans__Player 2 Wins" source="_DNU0Ea3jEeeHdMWUyAlTZg" target="_DN6C4K3jEeeHdMWUyAlTZg"/>
                  <transition xmi:id="_DN6p8q3jEeeHdMWUyAlTZg" name="Debug__Ac__Player 2 Wins" source="_DN6C4K3jEeeHdMWUyAlTZg" target="_DN6C4q3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DN6p9K3jEeeHdMWUyAlTZg" visibility="public" isReentrant="true">
                      <name xsi:nil="true"/>
                      <language>C++</language>
                      <body>log.show(&quot;\nPlayer 2 Wins!&quot;);</body>
                    </effect>
                    <trigger xmi:id="_DN6p863jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DN6p9a3jEeeHdMWUyAlTZg" name="Debug__end__trans__Player 2 Wins" source="_DN6C4q3jEeeHdMWUyAlTZg" target="_DNa6sa3jEeeHdMWUyAlTZg">
                    <trigger xmi:id="_DN6p9q3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_DN6C4K3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Player 2 Wins">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DN6C4a3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Player 2 Wins">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Player 2 Wins&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                    </entry>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DN6C4q3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Player 2 Wins">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DN6p8K3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Player 2 Wins">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Player 2 Wins&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}
</body>
                    </entry>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_DSV28K3jEeeHdMWUyAlTZg" name="Debug__Path__Waiting for Round__Starting Round__22" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_DSeZ0a3jEeeHdMWUyAlTZg" name="Debug__C__Waiting for Round__Starting Round__22">
                <connectionPoint xmi:id="_DStDUa3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
                <connectionPoint xmi:id="_DUUz8a3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
                <region xmi:id="_DSeZ0q3jEeeHdMWUyAlTZg" name="Region1">
                  <transition xmi:id="_DU2_cK3jEeeHdMWUyAlTZg" name="Debug__init__trans__Waiting for Round__Starting Round__22" source="_DStDUa3jEeeHdMWUyAlTZg" target="_DUyuAa3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DVpCkK3jEeeHdMWUyAlTZg" name="Debug__init__trans__Waiting for Round__Starting Round__22__468">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Waiting for Round__Starting Round__22::Region1::Debug__init__trans__Waiting for Round__Starting Round__22&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__Waiting for Round&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                    </effect>
                  </transition>
                  <transition xmi:id="_DU2_ca3jEeeHdMWUyAlTZg" name="Debug__Ex__Waiting for Round" source="_DUyuAa3jEeeHdMWUyAlTZg" target="_DU1xUK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DVppoK3jEeeHdMWUyAlTZg" name="Debug__Ex__Waiting for Round__470">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Waiting for Round__Starting Round__22::Region1::Debug__Ex__Waiting for Round&quot;,(char *)&quot;Debug__B__Ex__Waiting for Round&quot;,(char *)&quot;Debug__B__Ac__Waiting for Round__Starting Round__22&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DU2_cq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DU2_c63jEeeHdMWUyAlTZg" name="Debug__AC__Waiting for Round__Starting Round__22" source="_DU1xUK3jEeeHdMWUyAlTZg" target="_DU2YYK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DVqQsK3jEeeHdMWUyAlTZg" name="Debug__AC__Waiting for Round__Starting Round__22__472">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Waiting for Round__Starting Round__22::Region1::Debug__AC__Waiting for Round__Starting Round__22&quot;,(char *)&quot;Debug__B__Ac__Waiting for Round__Starting Round__22&quot;,(char *)&quot;Debug__A__Ac__Waiting for Round__Starting Round__22&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DU2_dK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DU2_da3jEeeHdMWUyAlTZg" name="Debug__En__Starting Round" source="_DU2YYK3jEeeHdMWUyAlTZg" target="_DU2YYq3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DU2_d63jEeeHdMWUyAlTZg" name="starting round" visibility="public" isReentrant="true">
                      <language>C++</language>
                      <body>log.show(&quot;\n-- Starting round %d --\n&quot;, this->round);&#xD;
play.go(this->round).send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Waiting for Round__Starting Round__22::Region1::Debug__En__Starting Round&quot;,(char *)&quot;Debug__A__Ac__Waiting for Round__Starting Round__22&quot;,(char *)&quot;Debug__A__En__Starting Round&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DU2_dq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DU2_eK3jEeeHdMWUyAlTZg" name="Debug__end__trans__Waiting for Round__Starting Round__22" source="_DU2YYq3jEeeHdMWUyAlTZg" target="_DUUz8a3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DVuiIK3jEeeHdMWUyAlTZg" name="Debug__end__trans__Waiting for Round__Starting Round__22__475">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Waiting for Round__Starting Round__22::Region1::Debug__end__trans__Waiting for Round__Starting Round__22&quot;,(char *)&quot;Debug__A__En__Starting Round&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DU2_ea3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_DUyuAa3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Waiting for Round">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DUyuAq3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Waiting for Round">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Waiting for Round&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Waiting for Round__Starting Round__22::Region1::Debug__B__Ex__Waiting for Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DVDzwa3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Waiting for Round__463">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Waiting for Round__Starting Round__22::Region1::Debug__B__Ex__Waiting for Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DU1xUK3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Waiting for Round__Starting Round__22">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DU1xUa3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Waiting for Round__Starting Round__22">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Waiting for Round&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;Waiting for Round__Starting Round__22&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Waiting for Round__Starting Round__22::Region1::Debug__B__Ac__Waiting for Round__Starting Round__22&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DVKhca3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Waiting for Round__Starting Round__22__464">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Waiting for Round__Starting Round__22::Region1::Debug__B__Ac__Waiting for Round__Starting Round__22&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DU2YYK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Waiting for Round__Starting Round__22">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DU2YYa3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Waiting for Round__Starting Round__22">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Waiting for Round__Starting Round__22&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Starting Round&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Waiting for Round__Starting Round__22::Region1::Debug__A__Ac__Waiting for Round__Starting Round__22&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DVUSca3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Waiting for Round__Starting Round__22__465">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Waiting for Round__Starting Round__22::Region1::Debug__A__Ac__Waiting for Round__Starting Round__22&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DU2YYq3jEeeHdMWUyAlTZg" name="Debug__A__En__Starting Round">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DU2YY63jEeeHdMWUyAlTZg" name="Debug__A__En__Starting Round">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Starting Round&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Waiting for Round__Starting Round__22::Region1::Debug__A__En__Starting Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DVaZEK3jEeeHdMWUyAlTZg" name="Debug__A__En__Starting Round__466">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Waiting for Round__Starting Round__22::Region1::Debug__A__En__Starting Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_DVzaoK3jEeeHdMWUyAlTZg" name="Debug__Path__Player 1 Wins" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_DV6IUa3jEeeHdMWUyAlTZg" name="Debug__C__Player 1 Wins">
                <connectionPoint xmi:id="_DV9ysa3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
                <connectionPoint xmi:id="_DWNqUa3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
                <region xmi:id="_DV6IUq3jEeeHdMWUyAlTZg" name="Region1">
                  <transition xmi:id="_DWmr4K3jEeeHdMWUyAlTZg" name="Debug__init__trans__Player 1 Wins" source="_DV9ysa3jEeeHdMWUyAlTZg" target="_DWmE0a3jEeeHdMWUyAlTZg"/>
                  <transition xmi:id="_DWmr4a3jEeeHdMWUyAlTZg" name="Debug__Ac__Player 1 Wins" source="_DWmE0a3jEeeHdMWUyAlTZg" target="_DWmE063jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DWmr463jEeeHdMWUyAlTZg" visibility="public" isReentrant="true">
                      <name xsi:nil="true"/>
                      <language>C++</language>
                      <body>log.show(&quot;\nPlayer 1 Wins!&quot;);</body>
                    </effect>
                    <trigger xmi:id="_DWmr4q3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DWmr5K3jEeeHdMWUyAlTZg" name="Debug__end__trans__Player 1 Wins" source="_DWmE063jEeeHdMWUyAlTZg" target="_DWNqUa3jEeeHdMWUyAlTZg">
                    <trigger xmi:id="_DWmr5a3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_DWmE0a3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Player 1 Wins">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DWmE0q3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Player 1 Wins">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Player 1 Wins&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                    </entry>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DWmE063jEeeHdMWUyAlTZg" name="Debug__A__Ac__Player 1 Wins">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DWmE1K3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Player 1 Wins">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Player 1 Wins&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}
</body>
                    </entry>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_DW_tcK3jEeeHdMWUyAlTZg" name="Debug__Path__Starting Round__Getting Player Choice__23" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_DXJeca3jEeeHdMWUyAlTZg" name="Debug__C__Starting Round__Getting Player Choice__23">
                <connectionPoint xmi:id="_DXbLQK3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
                <connectionPoint xmi:id="_DXmxca3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
                <region xmi:id="_DXJecq3jEeeHdMWUyAlTZg" name="Region1">
                  <transition xmi:id="_DYKyIq3jEeeHdMWUyAlTZg" name="Debug__init__trans__Starting Round__Getting Player Choice__23" source="_DXbLQK3jEeeHdMWUyAlTZg" target="_DYI88a3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DY_Rga3jEeeHdMWUyAlTZg" name="Debug__init__trans__Starting Round__Getting Player Choice__23__508">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Starting Round__Getting Player Choice__23::Region1::Debug__init__trans__Starting Round__Getting Player Choice__23&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__Starting Round&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                    </effect>
                  </transition>
                  <transition xmi:id="_DYKyI63jEeeHdMWUyAlTZg" name="Debug__Ex__Starting Round" source="_DYI88a3jEeeHdMWUyAlTZg" target="_DYJkAK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DZK3sK3jEeeHdMWUyAlTZg" name="Debug__Ex__Starting Round__510">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Starting Round__Getting Player Choice__23::Region1::Debug__Ex__Starting Round&quot;,(char *)&quot;Debug__B__Ex__Starting Round&quot;,(char *)&quot;Debug__B__Ac__Starting Round__Getting Player Choice__23&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DYKyJK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DYKyJa3jEeeHdMWUyAlTZg" name="Debug__AC__Starting Round__Getting Player Choice__23" source="_DYJkAK3jEeeHdMWUyAlTZg" target="_DYKLEK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DYLZMK3jEeeHdMWUyAlTZg" visibility="public" isReentrant="true">
                      <name xsi:nil="true"/>
                      <language>C++</language>
                      <body>    int player = msg->sapIndex();&#xD;
    log.show(&quot;Player %d played: &quot;, player);&#xD;
    switch (choice) {&#xD;
        case ROCK		:	log.show(&quot;ROCK&quot;); break;&#xD;
        case PAPER		:	log.show(&quot;PAPER&quot;); break;&#xD;
        case SCISSORS	:	log.show(&quot;SCISSORS&quot;); break;&#xD;
    }&#xD;
    if (player == 1) {&#xD;
    this->firstPlayerChoice = choice;&#xD;
    }&#xD;
    else if (player == 2){&#xD;
    this->secondPlayerChoice = choice;&#xD;
    } &#xD;
    log.show(&quot;\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Starting Round__Getting Player Choice__23::Region1::Debug__AC__Starting Round__Getting Player Choice__23&quot;,(char *)&quot;Debug__B__Ac__Starting Round__Getting Player Choice__23&quot;,(char *)&quot;Debug__A__Ac__Starting Round__Getting Player Choice__23&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DYKyJq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DYLZMa3jEeeHdMWUyAlTZg" name="Debug__En__Getting Player Choice" source="_DYKLEK3jEeeHdMWUyAlTZg" target="_DYKyIK3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DZMF0K3jEeeHdMWUyAlTZg" name="Debug__En__Getting Player Choice__513">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Starting Round__Getting Player Choice__23::Region1::Debug__En__Getting Player Choice&quot;,(char *)&quot;Debug__A__Ac__Starting Round__Getting Player Choice__23&quot;,(char *)&quot;Debug__A__En__Getting Player Choice&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DYLZMq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <transition xmi:id="_DYLZM63jEeeHdMWUyAlTZg" name="Debug__end__trans__Starting Round__Getting Player Choice__23" source="_DYKyIK3jEeeHdMWUyAlTZg" target="_DXmxca3jEeeHdMWUyAlTZg">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DZMs4K3jEeeHdMWUyAlTZg" name="Debug__end__trans__Starting Round__Getting Player Choice__23__515">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Starting Round__Getting Player Choice__23::Region1::Debug__end__trans__Starting Round__Getting Player Choice__23&quot;,(char *)&quot;Debug__A__En__Getting Player Choice&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                    </effect>
                    <trigger xmi:id="_DYLZNK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_DYI88a3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Starting Round">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DYI88q3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Starting Round">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Starting Round&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Starting Round__Getting Player Choice__23::Region1::Debug__B__Ex__Starting Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DYZboa3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Starting Round__503">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Starting Round__Getting Player Choice__23::Region1::Debug__B__Ex__Starting Round&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DYJkAK3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Starting Round__Getting Player Choice__23">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DYJkAa3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Starting Round__Getting Player Choice__23">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Starting Round&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;Starting Round__Getting Player Choice__23&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Starting Round__Getting Player Choice__23::Region1::Debug__B__Ac__Starting Round__Getting Player Choice__23&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DYh-ga3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Starting Round__Getting Player Choice__23__504">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Starting Round__Getting Player Choice__23::Region1::Debug__B__Ac__Starting Round__Getting Player Choice__23&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DYKLEK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Starting Round__Getting Player Choice__23">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DYKLEa3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Starting Round__Getting Player Choice__23">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Starting Round__Getting Player Choice__23&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Getting Player Choice&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Starting Round__Getting Player Choice__23::Region1::Debug__A__Ac__Starting Round__Getting Player Choice__23&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DYs9oK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Starting Round__Getting Player Choice__23__505">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Starting Round__Getting Player Choice__23::Region1::Debug__A__Ac__Starting Round__Getting Player Choice__23&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_DYKyIK3jEeeHdMWUyAlTZg" name="Debug__A__En__Getting Player Choice">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DYKyIa3jEeeHdMWUyAlTZg" name="Debug__A__En__Getting Player Choice">
                      <language>C++</language>
                      <body>if (not(Debug__SRO.checkDebug(&quot;Getting Player Choice&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Starting Round__Getting Player Choice__23::Region1::Debug__A__En__Getting Player Choice&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </entry>
                    <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DYtksK3jEeeHdMWUyAlTZg" name="Debug__A__En__Getting Player Choice__506">
                      <language>C++</language>
                      <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Round 3::Region1::Debug__C__Starting Round__Getting Player Choice__23::Region1::Debug__A__En__Getting Player Choice&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                    </exit>
                  </subvertex>
                </region>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_2OZucExZEeeqN6OadgglSg" name="Game Over">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_C0js4E06EeeqN6OadgglSg" name="reset game">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;Game Over&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
log.show(&quot;\n\nStarting next game...\n\n&quot;);&#xD;
this->firstPlayerScore = 0;&#xD;
this->secondPlayerScore = 0;&#xD;
this->round = 1;
timer.informIn(UMLRTTimespec(2,0));
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Game Over&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Df2HcK3jEeeHdMWUyAlTZg" name="Game Over__580">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Game Over&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_CoCVsK3jEeeHdMWUyAlTZg" name="Debug__Path__none__Game Over__3" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_CoPxEa3jEeeHdMWUyAlTZg" name="Debug__C__none__Game Over__3">
            <connectionPoint xmi:id="_Cofosa3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_Cou5QK3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
            <region xmi:id="_CoPxEq3jEeeHdMWUyAlTZg" name="Region1">
              <transition xmi:id="_CpJwAq3jEeeHdMWUyAlTZg" name="Debug__init__trans__none__Game Over__3" source="_Cofosa3jEeeHdMWUyAlTZg" target="_CpIh4a3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CqCg0K3jEeeHdMWUyAlTZg" name="Debug__init__trans__none__Game Over__3__93">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__none__Game Over__3::Region1::Debug__init__trans__none__Game Over__3&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__none__Game Over__3&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_CpJwA63jEeeHdMWUyAlTZg" name="Debug__Ac__none__Game Over__3" source="_CpIh4a3jEeeHdMWUyAlTZg" target="_CpJI8K3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CqIAYK3jEeeHdMWUyAlTZg" name="Debug__Ac__none__Game Over__3__95">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__none__Game Over__3::Region1::Debug__Ac__none__Game Over__3&quot;,(char *)&quot;Debug__B__Ac__none__Game Over__3&quot;,(char *)&quot;Debug__A__Ac__none__Game Over__3&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_CpJwBK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CpJwBa3jEeeHdMWUyAlTZg" name="Debug__En__Game Over" source="_CpJI8K3jEeeHdMWUyAlTZg" target="_CpJwAK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CpJwB63jEeeHdMWUyAlTZg" name="reset game" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>log.show(&quot;\n\nStarting next game...\n\n&quot;);&#xD;
this->firstPlayerScore = 0;&#xD;
this->secondPlayerScore = 0;&#xD;
this->round = 1;
timer.informIn(UMLRTTimespec(2,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__none__Game Over__3::Region1::Debug__En__Game Over&quot;,(char *)&quot;Debug__A__Ac__none__Game Over__3&quot;,(char *)&quot;Debug__A__En__none__Game Over__3&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_CpJwBq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CpKXEK3jEeeHdMWUyAlTZg" name="Debug__end__trans__none__Game Over__3" source="_CpJwAK3jEeeHdMWUyAlTZg" target="_Cou5QK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CqJOgK3jEeeHdMWUyAlTZg" name="Debug__end__trans__none__Game Over__3__98">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__none__Game Over__3::Region1::Debug__end__trans__none__Game Over__3&quot;,(char *)&quot;Debug__A__En__none__Game Over__3&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_CpKXEa3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_CpIh4a3jEeeHdMWUyAlTZg" name="Debug__B__Ac__none__Game Over__3">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_CpIh4q3jEeeHdMWUyAlTZg" name="Debug__B__Ac__none__Game Over__3">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;none__Game Over__3&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__none__Game Over__3::Region1::Debug__B__Ac__none__Game Over__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_CpS58a3jEeeHdMWUyAlTZg" name="Debug__B__Ac__none__Game Over__3__89">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__none__Game Over__3::Region1::Debug__B__Ac__none__Game Over__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_CpJI8K3jEeeHdMWUyAlTZg" name="Debug__A__Ac__none__Game Over__3">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_CpJI8a3jEeeHdMWUyAlTZg" name="Debug__A__Ac__none__Game Over__3">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;none__Game Over__3&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Game Over&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__none__Game Over__3::Region1::Debug__A__Ac__none__Game Over__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_CpnqEK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__none__Game Over__3__90">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__none__Game Over__3::Region1::Debug__A__Ac__none__Game Over__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_CpJwAK3jEeeHdMWUyAlTZg" name="Debug__A__En__none__Game Over__3">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_CpJwAa3jEeeHdMWUyAlTZg" name="Debug__A__En__none__Game Over__3">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Game Over&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__none__Game Over__3::Region1::Debug__A__En__none__Game Over__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Cp1sga3jEeeHdMWUyAlTZg" name="Debug__A__En__none__Game Over__3__91">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__none__Game Over__3::Region1::Debug__A__En__none__Game Over__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_Cz9R0K3jEeeHdMWUyAlTZg" name="Debug__Path__Pseudo7__none__10" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_C0HC0a3jEeeHdMWUyAlTZg" name="Debug__C__Pseudo7__none__10">
            <connectionPoint xmi:id="_C0KtMa3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_C0TQEa3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
            <region xmi:id="_C0HC0q3jEeeHdMWUyAlTZg" name="Region1">
              <transition xmi:id="_C1EFEK3jEeeHdMWUyAlTZg" name="Debug__init__trans__Pseudo7__none__10" source="_C0KtMa3jEeeHdMWUyAlTZg" target="_C1C28a3jEeeHdMWUyAlTZg"/>
              <transition xmi:id="_C1EFEa3jEeeHdMWUyAlTZg" name="Debug__Ac__Pseudo7__none__10" source="_C1C28a3jEeeHdMWUyAlTZg" target="_C1DeAK3jEeeHdMWUyAlTZg">
                <trigger xmi:id="_C1EFEq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_C1EFE63jEeeHdMWUyAlTZg" name="Debug__end__trans__Pseudo7__none__10" source="_C1DeAK3jEeeHdMWUyAlTZg" target="_C0TQEa3jEeeHdMWUyAlTZg">
                <trigger xmi:id="_C1EFFK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_C1C28a3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Pseudo7__none__10">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_C1C28q3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Pseudo7__none__10">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Pseudo7__none__10&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_C1DeAK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Pseudo7__none__10">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_C1DeAa3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Pseudo7__none__10">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Pseudo7__none__10&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_C17AsK3jEeeHdMWUyAlTZg" name="Debug__Path__none__Game Over__12" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_C2PJwK3jEeeHdMWUyAlTZg" name="Debug__C__none__Game Over__12">
            <connectionPoint xmi:id="_C2clIa3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_C2nkQa3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
            <region xmi:id="_C2PJwa3jEeeHdMWUyAlTZg" name="Region1">
              <transition xmi:id="_C3hjMK3jEeeHdMWUyAlTZg" name="Debug__init__trans__none__Game Over__12" source="_C2clIa3jEeeHdMWUyAlTZg" target="_C3YZQK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C4WpoK3jEeeHdMWUyAlTZg" name="Debug__init__trans__none__Game Over__12__214">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__none__Game Over__12::Region1::Debug__init__trans__none__Game Over__12&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__none__Game Over__12&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_C3hjMa3jEeeHdMWUyAlTZg" name="Debug__Ac__none__Game Over__12" source="_C3YZQK3jEeeHdMWUyAlTZg" target="_C3YZQq3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C4XQsK3jEeeHdMWUyAlTZg" name="Debug__Ac__none__Game Over__12__216">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__none__Game Over__12::Region1::Debug__Ac__none__Game Over__12&quot;,(char *)&quot;Debug__B__Ac__none__Game Over__12&quot;,(char *)&quot;Debug__A__Ac__none__Game Over__12&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_C3hjMq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_C3hjM63jEeeHdMWUyAlTZg" name="Debug__En__Game Over" source="_C3YZQq3jEeeHdMWUyAlTZg" target="_C3g8IK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C3hjNa3jEeeHdMWUyAlTZg" name="reset game" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>log.show(&quot;\n\nStarting next game...\n\n&quot;);&#xD;
this->firstPlayerScore = 0;&#xD;
this->secondPlayerScore = 0;&#xD;
this->round = 1;
timer.informIn(UMLRTTimespec(2,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__none__Game Over__12::Region1::Debug__En__Game Over&quot;,(char *)&quot;Debug__A__Ac__none__Game Over__12&quot;,(char *)&quot;Debug__A__En__none__Game Over__12&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_C3hjNK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_C3hjNq3jEeeHdMWUyAlTZg" name="Debug__end__trans__none__Game Over__12" source="_C3g8IK3jEeeHdMWUyAlTZg" target="_C2nkQa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_C4fzkK3jEeeHdMWUyAlTZg" name="Debug__end__trans__none__Game Over__12__219">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__none__Game Over__12::Region1::Debug__end__trans__none__Game Over__12&quot;,(char *)&quot;Debug__A__En__none__Game Over__12&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_C3iKQK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_C3YZQK3jEeeHdMWUyAlTZg" name="Debug__B__Ac__none__Game Over__12">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_C3YZQa3jEeeHdMWUyAlTZg" name="Debug__B__Ac__none__Game Over__12">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;none__Game Over__12&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__none__Game Over__12::Region1::Debug__B__Ac__none__Game Over__12&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_C39oEa3jEeeHdMWUyAlTZg" name="Debug__B__Ac__none__Game Over__12__210">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__none__Game Over__12::Region1::Debug__B__Ac__none__Game Over__12&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_C3YZQq3jEeeHdMWUyAlTZg" name="Debug__A__Ac__none__Game Over__12">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_C3YZQ63jEeeHdMWUyAlTZg" name="Debug__A__Ac__none__Game Over__12">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;none__Game Over__12&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Game Over&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__none__Game Over__12::Region1::Debug__A__Ac__none__Game Over__12&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_C4M4oa3jEeeHdMWUyAlTZg" name="Debug__A__Ac__none__Game Over__12__211">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__none__Game Over__12::Region1::Debug__A__Ac__none__Game Over__12&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_C3g8IK3jEeeHdMWUyAlTZg" name="Debug__A__En__none__Game Over__12">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_C3g8Ia3jEeeHdMWUyAlTZg" name="Debug__A__En__none__Game Over__12">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Game Over&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__none__Game Over__12::Region1::Debug__A__En__none__Game Over__12&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_C4S_Qa3jEeeHdMWUyAlTZg" name="Debug__A__En__none__Game Over__12__212">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__none__Game Over__12::Region1::Debug__A__En__none__Game Over__12&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_DGNfcK3jEeeHdMWUyAlTZg" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_DGWCUa3jEeeHdMWUyAlTZg" name="Debug__C__Initial">
            <connectionPoint xmi:id="_DGjdsa3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_DGxgIa3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
            <region xmi:id="_DGWCUq3jEeeHdMWUyAlTZg" name="Region1">
              <transition xmi:id="_DHTroK3jEeeHdMWUyAlTZg" name="Debug__init__trans__Initial" source="_DGjdsa3jEeeHdMWUyAlTZg" target="_DHLIwa3jEeeHdMWUyAlTZg"/>
              <transition xmi:id="_DHTroa3jEeeHdMWUyAlTZg" name="Debug__Ac__Initial" source="_DHLIwa3jEeeHdMWUyAlTZg" target="_DHQBQK3jEeeHdMWUyAlTZg">
                <trigger xmi:id="_DHTroq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DHTro63jEeeHdMWUyAlTZg" name="Debug__end__trans__Initial" source="_DHQBQK3jEeeHdMWUyAlTZg" target="_DGxgIa3jEeeHdMWUyAlTZg">
                <trigger xmi:id="_DHTrpK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_DHLIwa3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DHLIwq3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_DHQBQK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DHQBQa3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_DHq4AK3jEeeHdMWUyAlTZg" name="Debug__Path__Pseudo5__none__18" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_DHxlsa3jEeeHdMWUyAlTZg" name="Debug__C__Pseudo5__none__18">
            <connectionPoint xmi:id="_DH79wa3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_DIG84a3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
            <region xmi:id="_DHxlsq3jEeeHdMWUyAlTZg" name="Region1">
              <transition xmi:id="_DIn6Qq3jEeeHdMWUyAlTZg" name="Debug__init__trans__Pseudo5__none__18" source="_DH79wa3jEeeHdMWUyAlTZg" target="_DInTMa3jEeeHdMWUyAlTZg"/>
              <transition xmi:id="_DIohUK3jEeeHdMWUyAlTZg" name="Debug__Ac__Pseudo5__none__18" source="_DInTMa3jEeeHdMWUyAlTZg" target="_DIn6QK3jEeeHdMWUyAlTZg">
                <trigger xmi:id="_DIohUa3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_DIohUq3jEeeHdMWUyAlTZg" name="Debug__end__trans__Pseudo5__none__18" source="_DIn6QK3jEeeHdMWUyAlTZg" target="_DIG84a3jEeeHdMWUyAlTZg">
                <trigger xmi:id="_DIohU63jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_DInTMa3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Pseudo5__none__18">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DInTMq3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Pseudo5__none__18">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Pseudo5__none__18&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_DIn6QK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Pseudo5__none__18">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DIn6Qa3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Pseudo5__none__18">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Pseudo5__none__18&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_Dcn0UK3jEeeHdMWUyAlTZg" name="Debug__Path__Game Over__Pseudo2__24" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_DcuiAK3jEeeHdMWUyAlTZg" name="Debug__C__Game Over__Pseudo2__24">
            <connectionPoint xmi:id="_Dc6IMa3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_DdDSIa3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
            <region xmi:id="_DcuiAa3jEeeHdMWUyAlTZg" name="Region1">
              <transition xmi:id="_DdjocK3jEeeHdMWUyAlTZg" name="Debug__init__trans__Game Over__Pseudo2__24" source="_Dc6IMa3jEeeHdMWUyAlTZg" target="_DdiaUa3jEeeHdMWUyAlTZg"/>
              <transition xmi:id="_Ddjoca3jEeeHdMWUyAlTZg" name="Debug__Ex__Game Over" source="_DdiaUa3jEeeHdMWUyAlTZg" target="_DdjBYK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Dev7QK3jEeeHdMWUyAlTZg" name="Debug__Ex__Game Over__570">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__Game Over__Pseudo2__24::Region1::Debug__Ex__Game Over&quot;,(char *)&quot;Debug__B__Ex__Game Over&quot;,(char *)&quot;Debug__B__Ac__Game Over__Pseudo2__24&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_Ddjocq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_Ddjoc63jEeeHdMWUyAlTZg" name="Debug__AC__Game Over__Pseudo2__24" source="_DdjBYK3jEeeHdMWUyAlTZg" target="_DdjBYq3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DexJYK3jEeeHdMWUyAlTZg" name="Debug__AC__Game Over__Pseudo2__24__572">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__Game Over__Pseudo2__24::Region1::Debug__AC__Game Over__Pseudo2__24&quot;,(char *)&quot;Debug__B__Ac__Game Over__Pseudo2__24&quot;,(char *)&quot;Debug__A__Ac__Game Over__Pseudo2__24&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_DdjodK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_Ddjoda3jEeeHdMWUyAlTZg" name="Debug__end__trans__Game Over__Pseudo2__24" source="_DdjBYq3jEeeHdMWUyAlTZg" target="_DdDSIa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DexwcK3jEeeHdMWUyAlTZg" name="Debug__end__trans__Game Over__Pseudo2__24__574">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__Game Over__Pseudo2__24::Region1::Debug__end__trans__Game Over__Pseudo2__24&quot;,(char *)&quot;Debug__A__Ac__Game Over__Pseudo2__24&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_Ddjodq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_CPD1AK3jEeeHdMWUyAlTZg"/>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_DdiaUa3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Game Over">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DdiaUq3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Game Over">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Game Over&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__Game Over__Pseudo2__24::Region1::Debug__B__Ex__Game Over&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Dd5msa3jEeeHdMWUyAlTZg" name="Debug__B__Ex__Game Over__566">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__Game Over__Pseudo2__24::Region1::Debug__B__Ex__Game Over&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_DdjBYK3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Game Over__Pseudo2__24">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DdjBYa3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Game Over__Pseudo2__24">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Game Over&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;Game Over__Pseudo2__24&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__Game Over__Pseudo2__24::Region1::Debug__B__Ac__Game Over__Pseudo2__24&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_DednYK3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Game Over__Pseudo2__24__567">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__Game Over__Pseudo2__24::Region1::Debug__B__Ac__Game Over__Pseudo2__24&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_DdjBYq3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Game Over__Pseudo2__24">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_DdjBY63jEeeHdMWUyAlTZg" name="Debug__A__Ac__Game Over__Pseudo2__24">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Game Over__Pseudo2__24&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__Game Over__Pseudo2__24::Region1::Debug__A__Ac__Game Over__Pseudo2__24&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Des38a3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Game Over__Pseudo2__24__568">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Referee::RefereeStateMachine::Region::Debug__C__Game Over__Pseudo2__24::Region1::Debug__A__Ac__Game Over__Pseudo2__24&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_De_L0K3jEeeHdMWUyAlTZg" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CPDN8K3jEeeHdMWUyAlTZg" name="Debug__recallAllMsg" specification="_CO4O0K3jEeeHdMWUyAlTZg">
        <language>C++</language>
        <body>play.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CXD6ca3jEeeHdMWUyAlTZg" name="Debug__variablesViewMethod" specification="_CXD6cK3jEeeHdMWUyAlTZg">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;round,&quot;);
tempS.append(&quot;Integer,&quot;);
if(round!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,round);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
tempS.append(&quot;firstPlayerScore,&quot;);
tempS.append(&quot;Integer,&quot;);
if(firstPlayerScore!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,firstPlayerScore);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
tempS.append(&quot;secondPlayerScore,&quot;);
tempS.append(&quot;Integer,&quot;);
if(secondPlayerScore!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,secondPlayerScore);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CXgmY63jEeeHdMWUyAlTZg" name="Debug__variablesChange" specification="_CXYDgK3jEeeHdMWUyAlTZg">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;secondPlayerScore&quot;==tempVarName){
    secondPlayerScore=atoi(varValue);
    return true;
}else if (&quot;firstPlayerScore&quot;==tempVarName){
    firstPlayerScore=atoi(varValue);
    return true;
}else if (&quot;round&quot;==tempVarName){
    round=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_Cbz3kK3jEeeHdMWUyAlTZg" name="Debug__sendEvent" specification="_CZWZcK3jEeeHdMWUyAlTZg">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
this->Debug__event.setPayloadField(&quot;SenderCapsule&quot;,reserve3);
this->Debug__event.setPayloadField(&quot;Port&quot;,reserve4);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_CO4O0K3jEeeHdMWUyAlTZg" name="Debug__recallAllMsg" visibility="private" method="_CPDN8K3jEeeHdMWUyAlTZg"/>
      <ownedOperation xmi:id="_CXD6cK3jEeeHdMWUyAlTZg" name="Debug__variablesView" visibility="private" method="_CXD6ca3jEeeHdMWUyAlTZg"/>
      <ownedOperation xmi:id="_CXYDgK3jEeeHdMWUyAlTZg" name="Debug__variablesChange" visibility="private" method="_CXgmY63jEeeHdMWUyAlTZg">
        <ownedParameter xmi:id="_CXgmYK3jEeeHdMWUyAlTZg" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CXgmYa3jEeeHdMWUyAlTZg" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CXgmYq3jEeeHdMWUyAlTZg" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_CZWZcK3jEeeHdMWUyAlTZg" name="Debug__sendEvent" visibility="private" method="_Cbz3kK3jEeeHdMWUyAlTZg">
        <ownedParameter xmi:id="_CZXAgK3jEeeHdMWUyAlTZg" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CZqigK3jEeeHdMWUyAlTZg" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CZ82YK3jEeeHdMWUyAlTZg" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CaXGEK3jEeeHdMWUyAlTZg" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CadMsK3jEeeHdMWUyAlTZg" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CbCbgK3jEeeHdMWUyAlTZg" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CbVWcK3jEeeHdMWUyAlTZg" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CbVWca3jEeeHdMWUyAlTZg" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CbV9gK3jEeeHdMWUyAlTZg" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CbV9ga3jEeeHdMWUyAlTZg" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CboRYK3jEeeHdMWUyAlTZg" name="reserve4">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_Yr3HsMFeEeaVzb3gsu6Gyw" name="Player" classifierBehavior="_SYFAAMFfEeaVzb3gsu6Gyw" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_r5uDsMFeEeaVzb3gsu6Gyw" name="play" visibility="public" type="_b9R1IMFeEeaVzb3gsu6Gyw" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_GZ4TMMFgEeaVzb3gsu6Gyw" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_Cb_dwa3jEeeHdMWUyAlTZg" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_CchCMa3jEeeHdMWUyAlTZg" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_CchpQK3jEeeHdMWUyAlTZg" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_CdLJgq3jEeeHdMWUyAlTZg" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_CdLJg63jEeeHdMWUyAlTZg" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_CdLwkK3jEeeHdMWUyAlTZg" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_CdddYK3jEeeHdMWUyAlTZg" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_SYFAAMFfEeaVzb3gsu6Gyw" name="PlayerStateMachine" isReentrant="false">
        <region xmi:id="_SYLGoMFfEeaVzb3gsu6Gyw" name="Region">
          <transition xmi:id="_SYTpgMFfEeaVzb3gsu6Gyw" name="Initial" source="_Ci1FkK3jEeeHdMWUyAlTZg" target="_SYRNQMFfEeaVzb3gsu6Gyw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_grlLwMFoEeaVzb3gsu6Gyw">
              <language>C++</language>
              <body>srand(time(0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="__hrFQMFfEeaVzb3gsu6Gyw" name="picking" source="_CgbR0K3jEeeHdMWUyAlTZg" target="_SYRNQMFfEeaVzb3gsu6Gyw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_mowZAMFhEeaVzb3gsu6Gyw">
              <language>C++</language>
              <body>    int random = rand() % 4;&#xD;
&#xD;
    // send choice to referee&#xD;
    play.picked(static_cast&lt;Choice>(random)).send();&#xD;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::picking&quot;,(char *)&quot;Debug__Path__picking&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_ChAgoa3jEeeHdMWUyAlTZg" name="Debug__picking" source="_SYRNQMFfEeaVzb3gsu6Gyw" target="_CgbR0K3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ChAgoq3jEeeHdMWUyAlTZg" name="Debug__picking__3">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__picking&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;Debug__Path__picking&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_CBn5gMFgEeaVzb3gsu6Gyw" event="_CYqV8MFfEeaVzb3gsu6Gyw" port="_r5uDsMFeEeaVzb3gsu6Gyw"/>
          </transition>
          <transition xmi:id="_ChFZIK3jEeeHdMWUyAlTZg" name="Debug__picking__S" guard="_ChGAMa3jEeeHdMWUyAlTZg" source="_CgbR0K3jEeeHdMWUyAlTZg" target="_CguMwa3jEeeHdMWUyAlTZg">
            <ownedRule xmi:id="_ChGAMa3jEeeHdMWUyAlTZg" name="Debug__Guardpicking">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ChGAMK3jEeeHdMWUyAlTZg" name="Debug__Guardpicking">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ChGAMq3jEeeHdMWUyAlTZg" name="Debug__picking__S__5">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__picking__S&quot;,(char *)&quot;Debug__Path__picking&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_ChK4sK3jEeeHdMWUyAlTZg" name="Debug__picking__E" source="_Cg3Wsa3jEeeHdMWUyAlTZg" target="_SYRNQMFfEeaVzb3gsu6Gyw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ChK4sa3jEeeHdMWUyAlTZg" name="Debug__picking__E__6">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__picking__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_ChQYQK3jEeeHdMWUyAlTZg" name="Debug__picking__dbg__varChange" source="_CglC0K3jEeeHdMWUyAlTZg" target="_CglC0K3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ChQYQq3jEeeHdMWUyAlTZg" name="Debug__picking__dbg__varChange__8">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_ChQYQa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_Cb_dwa3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_ChUCoK3jEeeHdMWUyAlTZg" name="Debug__picking__dbg__setBreakPoint" source="_CglC0K3jEeeHdMWUyAlTZg" target="_CglC0K3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ChUCoq3jEeeHdMWUyAlTZg" name="Debug__picking__dbg__setBreakPoint__9">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_ChUCoa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_Cb_dwa3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_ChUpsK3jEeeHdMWUyAlTZg" name="Debug__picking__dbg__remBreakPoint" source="_CglC0K3jEeeHdMWUyAlTZg" target="_CglC0K3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ChUpsq3jEeeHdMWUyAlTZg" name="Debug__picking__dbg__remBreakPoint__10">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_ChUpsa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_Cb_dwa3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_ChVQwK3jEeeHdMWUyAlTZg" name="Debug__picking__dbg__viewBreakPoints" source="_CglC0K3jEeeHdMWUyAlTZg" target="_CglC0K3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ChVQwq3jEeeHdMWUyAlTZg" name="Debug__picking__dbg__viewBreakPoints__11">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_ChVQwa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_Cb_dwa3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_ChYUEK3jEeeHdMWUyAlTZg" name="Debug__picking__dbg__dbgSetExecMode" source="_CglC0K3jEeeHdMWUyAlTZg" target="_CglC0K3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ChY7IK3jEeeHdMWUyAlTZg" name="Debug__picking__dbg__dbgSetExecMode__12">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_ChYUEa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_Cb_dwa3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_ChY7Ia3jEeeHdMWUyAlTZg" name="Debug__picking__dbg__dbgDeferMsg" source="_CglC0K3jEeeHdMWUyAlTZg" target="_CglC0K3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ChZiMK3jEeeHdMWUyAlTZg" name="Debug__picking__dbg__dbgDeferMsg__13">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_ChY7Iq3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_r5uDsMFeEeaVzb3gsu6Gyw"/>
          </transition>
          <transition xmi:id="_CkAxUa3jEeeHdMWUyAlTZg" name="Debug__Initial" source="_ClhNMK3jEeeHdMWUyAlTZg" target="_Ci1FkK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CkBYYK3jEeeHdMWUyAlTZg" name="Debug__Initial__29">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;picking&quot;,&quot;IDLE&quot;,&quot;go&quot;,&quot;Play&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_Cln64q3jEeeHdMWUyAlTZg" name="ConnectionEstablished" port="_Cb_dwa3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_CkCmgK3jEeeHdMWUyAlTZg" name="Debug__Initial__S" guard="_CkDNka3jEeeHdMWUyAlTZg" source="_Ci1FkK3jEeeHdMWUyAlTZg" target="_Cjnvwa3jEeeHdMWUyAlTZg">
            <ownedRule xmi:id="_CkDNka3jEeeHdMWUyAlTZg" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_CkDNkK3jEeeHdMWUyAlTZg" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo1&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CkDNkq3jEeeHdMWUyAlTZg" name="Debug__Initial__S__31">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_CkEbsK3jEeeHdMWUyAlTZg" name="Debug__Initial__E" source="_Cj1LIa3jEeeHdMWUyAlTZg" target="_SYRNQMFfEeaVzb3gsu6Gyw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CkFCwK3jEeeHdMWUyAlTZg" name="Debug__Initial__E__32">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_CkJ7QK3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__varChange" source="_CjQjYK3jEeeHdMWUyAlTZg" target="_CjQjYK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CkJ7Qq3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__varChange__34">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_CkJ7Qa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_Cb_dwa3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_CkKiUK3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__setBreakPoint" source="_CjQjYK3jEeeHdMWUyAlTZg" target="_CjQjYK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CkQB4K3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__setBreakPoint__35">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_CkPa0K3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_Cb_dwa3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_CkQB4a3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__remBreakPoint" source="_CjQjYK3jEeeHdMWUyAlTZg" target="_CjQjYK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CkQo8K3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__remBreakPoint__36">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_CkQB4q3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_Cb_dwa3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_CkQo8a3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__viewBreakPoints" source="_CjQjYK3jEeeHdMWUyAlTZg" target="_CjQjYK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CkQo863jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__viewBreakPoints__37">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_CkQo8q3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_Cb_dwa3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_CkRQAK3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__dbgSetExecMode" source="_CjQjYK3jEeeHdMWUyAlTZg" target="_CjQjYK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CkRQAq3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__dbgSetExecMode__38">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_CkRQAa3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_Cb_dwa3jEeeHdMWUyAlTZg"/>
          </transition>
          <transition xmi:id="_CkR3EK3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__dbgDeferMsg" source="_CjQjYK3jEeeHdMWUyAlTZg" target="_CjQjYK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CkR3Eq3jEeeHdMWUyAlTZg" name="Debug__Initial__dbg__dbgDeferMsg__39">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_CkR3Ea3jEeeHdMWUyAlTZg" name="Debug__MSG" port="_r5uDsMFeEeaVzb3gsu6Gyw"/>
          </transition>
          <transition xmi:id="_Cln64K3jEeeHdMWUyAlTZg" name="Debug__InitDebug" source="_SYNi4MFfEeaVzb3gsu6Gyw" target="_ClhNMK3jEeeHdMWUyAlTZg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Cln64a3jEeeHdMWUyAlTZg" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_SYNi4MFfEeaVzb3gsu6Gyw" name="Pseudo1"/>
          <subvertex xmi:type="uml:State" xmi:id="_SYRNQMFfEeaVzb3gsu6Gyw" name="IDLE">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ClpJAK3jEeeHdMWUyAlTZg" name="IDLE__51">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ClpJAa3jEeeHdMWUyAlTZg" name="IDLE__52">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_CgbR0K3jEeeHdMWUyAlTZg" name="Debug__Path__picking" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_CglC0K3jEeeHdMWUyAlTZg" name="Debug__C__picking">
            <connectionPoint xmi:id="_CguMwa3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_Cg3Wsa3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
            <region xmi:id="_CglC0a3jEeeHdMWUyAlTZg" name="Region1">
              <transition xmi:id="_ChrPAK3jEeeHdMWUyAlTZg" name="Debug__init__trans__picking" source="_CguMwa3jEeeHdMWUyAlTZg" target="_ChlIYK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CiaO0K3jEeeHdMWUyAlTZg" name="Debug__init__trans__picking__19">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__picking::Region1::Debug__init__trans__picking&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_ChrPAa3jEeeHdMWUyAlTZg" name="Debug__Ex__IDLE" source="_ChlIYK3jEeeHdMWUyAlTZg" target="_ChlvcK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CicrEK3jEeeHdMWUyAlTZg" name="Debug__Ex__IDLE__21">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__picking::Region1::Debug__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ac__picking&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_ChrPAq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_Cb_dwa3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_ChrPA63jEeeHdMWUyAlTZg" name="Debug__AC__picking" source="_ChlvcK3jEeeHdMWUyAlTZg" target="_ChmWgK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Chr2EK3jEeeHdMWUyAlTZg" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>    int random = rand() % 4;&#xD;
&#xD;
    // send choice to referee&#xD;
    play.picked(static_cast&lt;Choice>(random)).send();&#xD;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__picking::Region1::Debug__AC__picking&quot;,(char *)&quot;Debug__B__Ac__picking&quot;,(char *)&quot;Debug__A__Ac__picking&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_ChrPBK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_Cb_dwa3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_ChuSUK3jEeeHdMWUyAlTZg" name="Debug__En__IDLE" source="_ChmWgK3jEeeHdMWUyAlTZg" target="_Chqn8K3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Cikm4K3jEeeHdMWUyAlTZg" name="Debug__En__IDLE__24">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__picking::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__picking&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_ChuSUa3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_Cb_dwa3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_Chu5YK3jEeeHdMWUyAlTZg" name="Debug__end__trans__picking" source="_Chqn8K3jEeeHdMWUyAlTZg" target="_Cg3Wsa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Cil1AK3jEeeHdMWUyAlTZg" name="Debug__end__trans__picking__26">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__picking::Region1::Debug__end__trans__picking&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_Chu5Ya3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_Cb_dwa3jEeeHdMWUyAlTZg"/>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_ChlIYK3jEeeHdMWUyAlTZg" name="Debug__B__Ex__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ChlIYa3jEeeHdMWUyAlTZg" name="Debug__B__Ex__IDLE">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__picking::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Ch1nEa3jEeeHdMWUyAlTZg" name="Debug__B__Ex__IDLE__14">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__picking::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ChlvcK3jEeeHdMWUyAlTZg" name="Debug__B__Ac__picking">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Chlvca3jEeeHdMWUyAlTZg" name="Debug__B__Ac__picking">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;picking&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__picking::Region1::Debug__B__Ac__picking&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_CiCbYK3jEeeHdMWUyAlTZg" name="Debug__B__Ac__picking__15">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__picking::Region1::Debug__B__Ac__picking&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ChmWgK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__picking">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ChmWga3jEeeHdMWUyAlTZg" name="Debug__A__Ac__picking">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;picking&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__picking::Region1::Debug__A__Ac__picking&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_CiMzcK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__picking__16">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__picking::Region1::Debug__A__Ac__picking&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_Chqn8K3jEeeHdMWUyAlTZg" name="Debug__A__En__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Chqn8a3jEeeHdMWUyAlTZg" name="Debug__A__En__IDLE">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__picking::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_CiNagK3jEeeHdMWUyAlTZg" name="Debug__A__En__IDLE__17">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__picking::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_Ci1FkK3jEeeHdMWUyAlTZg" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_CjQjYK3jEeeHdMWUyAlTZg" name="Debug__C__Initial">
            <connectionPoint xmi:id="_Cjnvwa3jEeeHdMWUyAlTZg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_Cj1LIa3jEeeHdMWUyAlTZg" name="ex" kind="exitPoint"/>
            <region xmi:id="_CjQjYa3jEeeHdMWUyAlTZg" name="Region1">
              <transition xmi:id="_CkmAIK3jEeeHdMWUyAlTZg" name="Debug__init__trans__Initial" source="_Cjnvwa3jEeeHdMWUyAlTZg" target="_CkYkwa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ClLO8K3jEeeHdMWUyAlTZg" name="Debug__init__trans__Initial__44">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_CkmAIa3jEeeHdMWUyAlTZg" name="Debug__Ac__Initial" source="_CkYkwa3jEeeHdMWUyAlTZg" target="_Ckjj4K3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CkmnMK3jEeeHdMWUyAlTZg" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>srand(time(0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_CkmAIq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_Cb_dwa3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CkmnMa3jEeeHdMWUyAlTZg" name="Debug__En__IDLE" source="_Ckjj4K3jEeeHdMWUyAlTZg" target="_CklZEK3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ClWOEK3jEeeHdMWUyAlTZg" name="Debug__En__IDLE__47">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__Initial::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_CkmnMq3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_Cb_dwa3jEeeHdMWUyAlTZg"/>
              </transition>
              <transition xmi:id="_CkmnM63jEeeHdMWUyAlTZg" name="Debug__end__trans__Initial" source="_CklZEK3jEeeHdMWUyAlTZg" target="_Cj1LIa3jEeeHdMWUyAlTZg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ClYDQK3jEeeHdMWUyAlTZg" name="Debug__end__trans__Initial__49">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_CkmnNK3jEeeHdMWUyAlTZg" name="Debug__Exec" port="_Cb_dwa3jEeeHdMWUyAlTZg"/>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_CkYkwa3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_CkYkwq3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Ckzbga3jEeeHdMWUyAlTZg" name="Debug__B__Ac__Initial__40">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_Ckjj4K3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Ckjj4a3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Ck_owK3jEeeHdMWUyAlTZg" name="Debug__A__Ac__Initial__41">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_CklZEK3jEeeHdMWUyAlTZg" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_CklZEa3jEeeHdMWUyAlTZg" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ClKA0K3jEeeHdMWUyAlTZg" name="Debug__A__En__Initial__42">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;RootElement::Player::PlayerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_ClhNMK3jEeeHdMWUyAlTZg" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_Cb_dwK3jEeeHdMWUyAlTZg" name="Debug__recallAllMsg" specification="_Cb-2sK3jEeeHdMWUyAlTZg">
        <language>C++</language>
        <body>play.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_Cc2ZYK3jEeeHdMWUyAlTZg" name="Debug__variablesViewMethod" specification="_Cc1yUK3jEeeHdMWUyAlTZg">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CdLJga3jEeeHdMWUyAlTZg" name="Debug__variablesChange" specification="_CdKicK3jEeeHdMWUyAlTZg">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);

    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_CgQSsK3jEeeHdMWUyAlTZg" name="Debug__sendEvent" specification="_CeW1QK3jEeeHdMWUyAlTZg">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
this->Debug__event.setPayloadField(&quot;SenderCapsule&quot;,reserve3);
this->Debug__event.setPayloadField(&quot;Port&quot;,reserve4);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_Cb-2sK3jEeeHdMWUyAlTZg" name="Debug__recallAllMsg" visibility="private" method="_Cb_dwK3jEeeHdMWUyAlTZg"/>
      <ownedOperation xmi:id="_Cc1yUK3jEeeHdMWUyAlTZg" name="Debug__variablesView" visibility="private" method="_Cc2ZYK3jEeeHdMWUyAlTZg"/>
      <ownedOperation xmi:id="_CdKicK3jEeeHdMWUyAlTZg" name="Debug__variablesChange" visibility="private" method="_CdLJga3jEeeHdMWUyAlTZg">
        <ownedParameter xmi:id="_CdKica3jEeeHdMWUyAlTZg" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CdKicq3jEeeHdMWUyAlTZg" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CdLJgK3jEeeHdMWUyAlTZg" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_CeW1QK3jEeeHdMWUyAlTZg" name="Debug__sendEvent" visibility="private" method="_CgQSsK3jEeeHdMWUyAlTZg">
        <ownedParameter xmi:id="_CeW1Qa3jEeeHdMWUyAlTZg" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CepJIK3jEeeHdMWUyAlTZg" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Ce7dAK3jEeeHdMWUyAlTZg" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CfPmEK3jEeeHdMWUyAlTZg" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CfQNIK3jEeeHdMWUyAlTZg" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CffdsK3jEeeHdMWUyAlTZg" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CfsSAK3jEeeHdMWUyAlTZg" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CfsSAa3jEeeHdMWUyAlTZg" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_CfsSAq3jEeeHdMWUyAlTZg" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Cfs5EK3jEeeHdMWUyAlTZg" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Cf_M8K3jEeeHdMWUyAlTZg" name="reserve4">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_b9a_EMFeEeaVzb3gsu6Gyw" name="Play">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_b9R1IMFeEeaVzb3gsu6Gyw" name="Play">
        <interfaceRealization xmi:id="_b9oacMFeEeaVzb3gsu6Gyw" client="_b9R1IMFeEeaVzb3gsu6Gyw" supplier="_b9hswMFeEeaVzb3gsu6Gyw" contract="_b9hswMFeEeaVzb3gsu6Gyw"/>
        <interfaceRealization xmi:id="_b91OwMFeEeaVzb3gsu6Gyw" client="_b9R1IMFeEeaVzb3gsu6Gyw" supplier="_b9w9UMFeEeaVzb3gsu6Gyw" contract="_b9w9UMFeEeaVzb3gsu6Gyw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_b9hswMFeEeaVzb3gsu6Gyw" name="Play">
        <ownedOperation xmi:id="_B7RPUMFfEeaVzb3gsu6Gyw" name="go">
          <ownedParameter xmi:id="_2HWcQOGSEeaj6NjEGxxytQ" name="round">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_b9q2sMFeEeaVzb3gsu6Gyw" name="Play~">
        <ownedOperation xmi:id="_3IRm0MFeEeaVzb3gsu6Gyw" name="picked">
          <ownedParameter xmi:id="_9jzf0MFeEeaVzb3gsu6Gyw" name="choice" type="_hKm9MMGAEeaVzb3gsu6Gyw"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_b9vIIMFeEeaVzb3gsu6Gyw" client="_b9R1IMFeEeaVzb3gsu6Gyw" supplier="_b9q2sMFeEeaVzb3gsu6Gyw"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_b9vvMMFeEeaVzb3gsu6Gyw" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_b9w9UMFeEeaVzb3gsu6Gyw" name="PlayIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_b92c4MFeEeaVzb3gsu6Gyw" client="_b9R1IMFeEeaVzb3gsu6Gyw" supplier="_b9w9UMFeEeaVzb3gsu6Gyw"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_BhCxcMFfEeaVzb3gsu6Gyw" operation="_3IRm0MFeEeaVzb3gsu6Gyw"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_CYqV8MFfEeaVzb3gsu6Gyw" operation="_B7RPUMFfEeaVzb3gsu6Gyw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_hKm9MMGAEeaVzb3gsu6Gyw" name="Choice">
      <ownedLiteral xmi:id="_m3dLQMGAEeaVzb3gsu6Gyw" name="ROCK"/>
      <ownedLiteral xmi:id="_1ivT8MGAEeaVzb3gsu6Gyw" name="PAPER"/>
      <ownedLiteral xmi:id="_2psU8MGAEeaVzb3gsu6Gyw" name="SCISSORS"/>
    </packagedElement>
    <profileApplication xmi:id="_M9rCQMFeEeaVzb3gsu6Gyw">
      <eAnnotations xmi:id="_M9v6wMFeEeaVzb3gsu6Gyw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_S5m1MMFeEeaVzb3gsu6Gyw">
      <eAnnotations xmi:id="_S5oDUMFeEeaVzb3gsu6Gyw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLRT_CPP/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
    <profileApplication xmi:id="_S5sUwMFeEeaVzb3gsu6Gyw">
      <eAnnotations xmi:id="_S5sUwcFeEeaVzb3gsu6Gyw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
    <profileApplication xmi:id="__JGMMMFqEeaVzb3gsu6Gyw">
      <eAnnotations xmi:id="__JGzQMFqEeaVzb3gsu6Gyw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://PAPYRUS_ACTIONLANGUAGE_PROFILE/ActionLanguage-Profile.profile.uml#_Kv8EIKFXEeS_KNX0nfvIVQ"/>
      </eAnnotations>
      <appliedProfile href="pathmap://PAPYRUS_ACTIONLANGUAGE_PROFILE/ActionLanguage-Profile.profile.uml#ActionLanguage"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:Capsule xmi:id="_TzfqkMFeEeaVzb3gsu6Gyw" base_Class="_Tvla8MFeEeaVzb3gsu6Gyw"/>
  <UMLRealTime:Capsule xmi:id="_VhD_oMFeEeaVzb3gsu6Gyw" base_Class="_VgfX4MFeEeaVzb3gsu6Gyw"/>
  <UMLRealTime:Capsule xmi:id="_YsahUMFeEeaVzb3gsu6Gyw" base_Class="_Yr3HsMFeEeaVzb3gsu6Gyw"/>
  <UMLRealTime:ProtocolContainer xmi:id="_b9fQgMFeEeaVzb3gsu6Gyw" base_Package="_b9a_EMFeEeaVzb3gsu6Gyw"/>
  <UMLRealTime:RTMessageSet xmi:id="_b9l-MMFeEeaVzb3gsu6Gyw" base_Interface="_b9hswMFeEeaVzb3gsu6Gyw"/>
  <UMLRealTime:RTMessageSet xmi:id="_b9t6AMFeEeaVzb3gsu6Gyw" base_Interface="_b9q2sMFeEeaVzb3gsu6Gyw" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_b9zZkMFeEeaVzb3gsu6Gyw" base_Interface="_b9w9UMFeEeaVzb3gsu6Gyw" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_b93D8MFeEeaVzb3gsu6Gyw" base_Collaboration="_b9R1IMFeEeaVzb3gsu6Gyw"/>
  <UMLRealTime:RTPort xmi:id="_oazs0MFeEeaVzb3gsu6Gyw" base_Port="_oanfkMFeEeaVzb3gsu6Gyw"/>
  <UMLRealTime:RTPort xmi:id="_r5zjQMFeEeaVzb3gsu6Gyw" base_Port="_r5uDsMFeEeaVzb3gsu6Gyw"/>
  <UMLRealTime:CapsulePart xmi:id="_t3TKsMFeEeaVzb3gsu6Gyw" base_Property="_t3O5QMFeEeaVzb3gsu6Gyw"/>
  <UMLRealTime:CapsulePart xmi:id="_uwjG4MFeEeaVzb3gsu6Gyw" base_Property="_uwfcgMFeEeaVzb3gsu6Gyw"/>
  <UMLRealTime:RTConnector xmi:id="_xwg38MFeEeaVzb3gsu6Gyw" base_Connector="_xwZjMMFeEeaVzb3gsu6Gyw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_HflzgMFfEeaVzb3gsu6Gyw" base_Pseudostate="_HfhiEMFfEeaVzb3gsu6Gyw"/>
  <UMLRTStateMachines:RTRegion xmi:id="_Hf25QMFfEeaVzb3gsu6Gyw" base_Region="_HfbbcMFfEeaVzb3gsu6Gyw"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_HgUzUMFfEeaVzb3gsu6Gyw" base_StateMachine="_HfQcUMFfEeaVzb3gsu6Gyw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_SYP_IMFfEeaVzb3gsu6Gyw" base_Pseudostate="_SYNi4MFfEeaVzb3gsu6Gyw"/>
  <UMLRTStateMachines:RTState xmi:id="_SYTCcMFfEeaVzb3gsu6Gyw" base_State="_SYRNQMFfEeaVzb3gsu6Gyw"/>
  <UMLRTStateMachines:RTRegion xmi:id="_SYUQkMFfEeaVzb3gsu6Gyw" base_Region="_SYLGoMFfEeaVzb3gsu6Gyw"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_SYxjkMFfEeaVzb3gsu6Gyw" base_StateMachine="_SYFAAMFfEeaVzb3gsu6Gyw"/>
  <UMLRealTime:RTPort xmi:id="_GZ8koMFgEeaVzb3gsu6Gyw" isWired="false" base_Port="_GZ4TMMFgEeaVzb3gsu6Gyw"/>
  <UMLRealTime:RTPort xmi:id="_Dk9CkMFiEeaVzb3gsu6Gyw" isWired="false" base_Port="_Dk4xIMFiEeaVzb3gsu6Gyw"/>
  <UMLRealTime:RTPort xmi:id="_WP56AN9XEeaslsNogbStzw" isWired="false" base_Port="_WP3dwN9XEeaslsNogbStzw"/>
  <UMLRTStateMachines:RTState xmi:id="_6tI1gExXEeeqN6OadgglSg" base_State="_6tCH0ExXEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_RKi2sExYEeeqN6OadgglSg" base_State="_RKZswExYEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_qkoEYExYEeeqN6OadgglSg" base_State="_qkeTYExYEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_2Oi4YExZEeeqN6OadgglSg" base_State="_2OZucExZEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_0bctoExaEeeqN6OadgglSg" base_Region="_0bTjsExaEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_0bctpkxaEeeqN6OadgglSg" base_Pseudostate="_0bctpUxaEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_0bmep0xaEeeqN6OadgglSg" base_Pseudostate="_0bmepkxaEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_7SAVwExaEeeqN6OadgglSg" base_State="_7R2kwExaEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_IBC-wUxcEeeqN6OadgglSg" base_State="_IBC-wExcEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_EyRgMUxdEeeqN6OadgglSg" base_State="_EyRgMExdEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_aNKfAExeEeeqN6OadgglSg" base_Region="_aNHbsExeEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_aNRMsExeEeeqN6OadgglSg" base_Pseudostate="_aNM7QExeEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_aNa9sExeEeeqN6OadgglSg" base_Pseudostate="_aNWFMExeEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_aNkusExeEeeqN6OadgglSg" base_Pseudostate="_aNfPIExeEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_vmxO8ExgEeeqN6OadgglSg" base_State="_vmuLoExgEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_bCA8AUxhEeeqN6OadgglSg" base_State="_bCA8AExhEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_wdBFAUxhEeeqN6OadgglSg" base_State="_wdBFAExhEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_SzN5IExiEeeqN6OadgglSg" base_Pseudostate="_SzEvMExiEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_oFwiUExlEeeqN6OadgglSg" base_Pseudostate="_oFnYYExlEeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_HzLYg005EeeqN6OadgglSg" base_Region="_HzLYcE05EeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_HzVJdU05EeeqN6OadgglSg" base_Pseudostate="_HzVJdE05EeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_HzeTYU05EeeqN6OadgglSg" base_Pseudostate="_HzeTYE05EeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_NMfmgU05EeeqN6OadgglSg" base_State="_NMfmgE05EeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_aDJI0U05EeeqN6OadgglSg" base_State="_aDJI0E05EeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTState xmi:id="_jacPYE05EeeqN6OadgglSg" base_State="_jaSeYE05EeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_XBC0UE06EeeqN6OadgglSg" base_Pseudostate="_XA5DUE06EeeqN6OadgglSg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_-AFJ4E08EeeqN6OadgglSg" base_Pseudostate="_9_7Y4E08EeeqN6OadgglSg"/>
  <UMLRealTime:RTPort xmi:id="_CVlTwK3jEeeHdMWUyAlTZg" isNotification="true" isWired="false" base_Port="_CPD1AK3jEeeHdMWUyAlTZg"/>
  <RTCppProperties:AttributeProperties xmi:id="_CX3LsK3jEeeHdMWUyAlTZg" type="debugEvents::Event" base_Property="_CXmF8K3jEeeHdMWUyAlTZg"/>
  <RTCppProperties:AttributeProperties xmi:id="_CYI4gK3jEeeHdMWUyAlTZg" type="SROManager" base_Property="_CYAVoK3jEeeHdMWUyAlTZg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_CYbMYK3jEeeHdMWUyAlTZg" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_VgfX4MFeEeaVzb3gsu6Gyw"/>
  <RTCppProperties:ParameterProperties xmi:id="_CZkb4K3jEeeHdMWUyAlTZg" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_CZXAgK3jEeeHdMWUyAlTZg"/>
  <RTCppProperties:ParameterProperties xmi:id="_CZzscK3jEeeHdMWUyAlTZg" type="debugEvents::EVENTTYPE" base_Parameter="_CZqigK3jEeeHdMWUyAlTZg"/>
  <RTCppProperties:ParameterProperties xmi:id="_CaDkEK3jEeeHdMWUyAlTZg" type="const char *" base_Parameter="_CZ82YK3jEeeHdMWUyAlTZg"/>
  <RTCppProperties:ParameterProperties xmi:id="_CauScK3jEeeHdMWUyAlTZg" type="const char *" base_Parameter="_CadMsK3jEeeHdMWUyAlTZg"/>
  <RTCppProperties:ParameterProperties xmi:id="_CbMzkK3jEeeHdMWUyAlTZg" type="const char *" base_Parameter="_CbCbgK3jEeeHdMWUyAlTZg"/>
  <RTCppProperties:ParameterProperties xmi:id="_CbfHcK3jEeeHdMWUyAlTZg" type="const char *" base_Parameter="_CbV9ga3jEeeHdMWUyAlTZg"/>
  <RTCppProperties:ParameterProperties xmi:id="_CbuYAK3jEeeHdMWUyAlTZg" type="const char *" base_Parameter="_CboRYK3jEeeHdMWUyAlTZg"/>
  <UMLRealTime:RTPort xmi:id="_CchCMK3jEeeHdMWUyAlTZg" isNotification="true" isWired="false" base_Port="_Cb_dwa3jEeeHdMWUyAlTZg"/>
  <RTCppProperties:AttributeProperties xmi:id="_CdU6gK3jEeeHdMWUyAlTZg" type="debugEvents::Event" base_Property="_CdLwkK3jEeeHdMWUyAlTZg"/>
  <RTCppProperties:AttributeProperties xmi:id="_CdnOYK3jEeeHdMWUyAlTZg" type="SROManager" base_Property="_CdddYK3jEeeHdMWUyAlTZg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_Cd2e8K3jEeeHdMWUyAlTZg" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_Yr3HsMFeEeaVzb3gsu6Gyw"/>
  <RTCppProperties:ParameterProperties xmi:id="_Cef_MK3jEeeHdMWUyAlTZg" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_CeW1Qa3jEeeHdMWUyAlTZg"/>
  <RTCppProperties:ParameterProperties xmi:id="_Cev20K3jEeeHdMWUyAlTZg" type="debugEvents::EVENTTYPE" base_Parameter="_CepJIK3jEeeHdMWUyAlTZg"/>
  <RTCppProperties:ParameterProperties xmi:id="_CfD_4K3jEeeHdMWUyAlTZg" type="const char *" base_Parameter="_Ce7dAK3jEeeHdMWUyAlTZg"/>
  <RTCppProperties:ParameterProperties xmi:id="_CfT3gK3jEeeHdMWUyAlTZg" type="const char *" base_Parameter="_CfQNIK3jEeeHdMWUyAlTZg"/>
  <RTCppProperties:ParameterProperties xmi:id="_CfjIEK3jEeeHdMWUyAlTZg" type="const char *" base_Parameter="_CffdsK3jEeeHdMWUyAlTZg"/>
  <RTCppProperties:ParameterProperties xmi:id="_Cf4fQK3jEeeHdMWUyAlTZg" type="const char *" base_Parameter="_Cfs5EK3jEeeHdMWUyAlTZg"/>
  <RTCppProperties:ParameterProperties xmi:id="_CgKMEK3jEeeHdMWUyAlTZg" type="const char *" base_Parameter="_Cf_M8K3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CgkbwK3jEeeHdMWUyAlTZg" base_Pseudostate="_CgbR0K3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CguMwK3jEeeHdMWUyAlTZg" base_State="_CglC0K3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Cg3WsK3jEeeHdMWUyAlTZg" base_Pseudostate="_CguMwa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ChAgoK3jEeeHdMWUyAlTZg" base_Pseudostate="_Cg3Wsa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_ChkhUK3jEeeHdMWUyAlTZg" base_Region="_CglC0a3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_Ch1nEK3jEeeHdMWUyAlTZg" base_State="_ChlIYK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CiB0UK3jEeeHdMWUyAlTZg" base_State="_ChlvcK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CiMMYK3jEeeHdMWUyAlTZg" base_State="_ChmWgK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CiXykK3jEeeHdMWUyAlTZg" base_State="_Chqn8K3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CjP8UK3jEeeHdMWUyAlTZg" base_Pseudostate="_Ci1FkK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CjnvwK3jEeeHdMWUyAlTZg" base_State="_CjQjYK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Cj1LIK3jEeeHdMWUyAlTZg" base_Pseudostate="_Cjnvwa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CkAxUK3jEeeHdMWUyAlTZg" base_Pseudostate="_Cj1LIa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_CkYkwK3jEeeHdMWUyAlTZg" base_Region="_CjQjYa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CkzbgK3jEeeHdMWUyAlTZg" base_State="_CkYkwa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_Ck-aoK3jEeeHdMWUyAlTZg" base_State="_Ckjj4K3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_ClHkkK3jEeeHdMWUyAlTZg" base_State="_CklZEK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_Clk3kK3jEeeHdMWUyAlTZg" base_State="_ClhNMK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CmBjgK3jEeeHdMWUyAlTZg" base_Pseudostate="_Cl95IK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CmNJsK3jEeeHdMWUyAlTZg" base_State="_CmBjga3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CmalEK3jEeeHdMWUyAlTZg" base_Pseudostate="_CmNJsa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CmmyUK3jEeeHdMWUyAlTZg" base_Pseudostate="_Cmig4K3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_CnMoMK3jEeeHdMWUyAlTZg" base_Region="_CmBjgq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CnbRsK3jEeeHdMWUyAlTZg" base_State="_CnMoMa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CnkboK3jEeeHdMWUyAlTZg" base_State="_CnNPQK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CnqiQK3jEeeHdMWUyAlTZg" base_State="_CnNPQq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CoPxEK3jEeeHdMWUyAlTZg" base_Pseudostate="_CoCVsK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CofosK3jEeeHdMWUyAlTZg" base_State="_CoPxEa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CouSMK3jEeeHdMWUyAlTZg" base_Pseudostate="_Cofosa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CozxwK3jEeeHdMWUyAlTZg" base_Pseudostate="_Cou5QK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_CpIh4K3jEeeHdMWUyAlTZg" base_Region="_CoPxEq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CpS58K3jEeeHdMWUyAlTZg" base_State="_CpIh4a3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CpnDAK3jEeeHdMWUyAlTZg" base_State="_CpJI8K3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_Cp1sgK3jEeeHdMWUyAlTZg" base_State="_CpJwAK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CqZtMK3jEeeHdMWUyAlTZg" base_Pseudostate="_CqOuEK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CqiQEK3jEeeHdMWUyAlTZg" base_State="_CqZtMa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Cr-agK3jEeeHdMWUyAlTZg" base_Pseudostate="_Cry0UK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CsTxsK3jEeeHdMWUyAlTZg" base_Pseudostate="_Cr_BkK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_Cs6OoK3jEeeHdMWUyAlTZg" base_Region="_CqZtMq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CtNJkK3jEeeHdMWUyAlTZg" base_State="_Cs6Ooa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CtjH0K3jEeeHdMWUyAlTZg" base_State="_Cs6Oo63jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Ct3Q4K3jEeeHdMWUyAlTZg" base_Pseudostate="_Ctk9AK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CuTVwK3jEeeHdMWUyAlTZg" base_State="_Ct3Q4a3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Cum3wK3jEeeHdMWUyAlTZg" base_Pseudostate="_CuT80K3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Cu3WcK3jEeeHdMWUyAlTZg" base_Pseudostate="_Cum3wa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_CvLfgK3jEeeHdMWUyAlTZg" base_Region="_Ct3Q4q3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CvYT0K3jEeeHdMWUyAlTZg" base_State="_CvMGkK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CveacK3jEeeHdMWUyAlTZg" base_State="_CvOi0a3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_Cvx8cK3jEeeHdMWUyAlTZg" base_State="_CvPJ4K3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CwMMIK3jEeeHdMWUyAlTZg" base_Pseudostate="_Cv9ioK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CwRrsK3jEeeHdMWUyAlTZg" base_State="_CwMMIa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CwcDwK3jEeeHdMWUyAlTZg" base_Pseudostate="_CwSSwK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CwjYgK3jEeeHdMWUyAlTZg" base_Pseudostate="_CwcDwa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_Cw_dYK3jEeeHdMWUyAlTZg" base_Region="_CwMMIq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CxJ1cK3jEeeHdMWUyAlTZg" base_State="_Cw_dYa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CxZtEK3jEeeHdMWUyAlTZg" base_State="_CxAEcK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_Cxo9oK3jEeeHdMWUyAlTZg" base_State="_CxArgK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Cx8foK3jEeeHdMWUyAlTZg" base_Pseudostate="_CxzVsK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CyCmQK3jEeeHdMWUyAlTZg" base_State="_Cx9GsK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CyMXQK3jEeeHdMWUyAlTZg" base_Pseudostate="_CyCmQa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CyU6IK3jEeeHdMWUyAlTZg" base_Pseudostate="_CyMXQa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_CyqRUK3jEeeHdMWUyAlTZg" base_Region="_Cx9Gsa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_Cy0pYK3jEeeHdMWUyAlTZg" base_State="_Cyq4YK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CzIycK3jEeeHdMWUyAlTZg" base_State="_Cyq4Yq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CzR8YK3jEeeHdMWUyAlTZg" base_State="_CyrfcK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_CzkQQK3jEeeHdMWUyAlTZg" base_State="_Cyrfcq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_C0HC0K3jEeeHdMWUyAlTZg" base_Pseudostate="_Cz9R0K3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_C0KtMK3jEeeHdMWUyAlTZg" base_State="_C0HC0a3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_C0TQEK3jEeeHdMWUyAlTZg" base_Pseudostate="_C0KtMa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_C0lj8K3jEeeHdMWUyAlTZg" base_Pseudostate="_C0TQEa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_C1C28K3jEeeHdMWUyAlTZg" base_Region="_C0HC0q3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_C1PrQK3jEeeHdMWUyAlTZg" base_State="_C1C28a3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_C1Y1MK3jEeeHdMWUyAlTZg" base_State="_C1DeAK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_C2OisK3jEeeHdMWUyAlTZg" base_Pseudostate="_C17AsK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_C2clIK3jEeeHdMWUyAlTZg" base_State="_C2PJwK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_C2nkQK3jEeeHdMWUyAlTZg" base_Pseudostate="_C2clIa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_C21msK3jEeeHdMWUyAlTZg" base_Pseudostate="_C2nkQa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_C3XyMK3jEeeHdMWUyAlTZg" base_Region="_C2PJwa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_C39oEK3jEeeHdMWUyAlTZg" base_State="_C3YZQK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_C4M4oK3jEeeHdMWUyAlTZg" base_State="_C3YZQq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_C4S_QK3jEeeHdMWUyAlTZg" base_State="_C3g8IK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_C4vEIK3jEeeHdMWUyAlTZg" base_Pseudostate="_C4howK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_C5FCYK3jEeeHdMWUyAlTZg" base_State="_C4vrMK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_C5U6AK3jEeeHdMWUyAlTZg" base_Pseudostate="_C5FCYa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_C5nN4K3jEeeHdMWUyAlTZg" base_Pseudostate="_C5U6Aa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_C5_oYK3jEeeHdMWUyAlTZg" base_Region="_C4vrMa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_C6SjUK3jEeeHdMWUyAlTZg" base_State="_C5_oYa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_C6dicK3jEeeHdMWUyAlTZg" base_State="_C6APcK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_C7CKMK3jEeeHdMWUyAlTZg" base_Pseudostate="_C6qWwK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_C7QzsK3jEeeHdMWUyAlTZg" base_State="_C7CKMa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_C7gEQK3jEeeHdMWUyAlTZg" base_Pseudostate="_C7Qzsa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_C7xxEK3jEeeHdMWUyAlTZg" base_Pseudostate="_C7kVsK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_C8MAwK3jEeeHdMWUyAlTZg" base_Region="_C7CKMq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_C8pTwK3jEeeHdMWUyAlTZg" base_State="_C8T8kK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_C88OsK3jEeeHdMWUyAlTZg" base_State="_C8T8kq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_C9OikK3jEeeHdMWUyAlTZg" base_State="_C8UjoK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_C9m9EK3jEeeHdMWUyAlTZg" base_Pseudostate="_C9g2cK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_C96fEK3jEeeHdMWUyAlTZg" base_State="_C9m9Ea3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_C-GFQK3jEeeHdMWUyAlTZg" base_Pseudostate="_C97GIK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_C-OBEK3jEeeHdMWUyAlTZg" base_Pseudostate="_C-GFQa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_C-qtAK3jEeeHdMWUyAlTZg" base_Region="_C9m9Eq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_C-6koK3jEeeHdMWUyAlTZg" base_State="_C-rUEK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_C_E8sK3jEeeHdMWUyAlTZg" base_State="_C-rUEq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_C_X3oK3jEeeHdMWUyAlTZg" base_Pseudostate="_C_JOIK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_C_cwIK3jEeeHdMWUyAlTZg" base_State="_C_X3oa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DAPaUK3jEeeHdMWUyAlTZg" base_Pseudostate="_C_dXMK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DAfR8K3jEeeHdMWUyAlTZg" base_Pseudostate="_DAPaUa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_DA3scK3jEeeHdMWUyAlTZg" base_Region="_C_X3oq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DBL1gK3jEeeHdMWUyAlTZg" base_State="_DA3sca3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DDQSEK3jEeeHdMWUyAlTZg" base_State="_DA3sc63jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DDoFgK3jEeeHdMWUyAlTZg" base_State="_DA4TgK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DD3WEK3jEeeHdMWUyAlTZg" base_State="_DBAPUK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DETa8K3jEeeHdMWUyAlTZg" base_Pseudostate="_DEGmoK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DEuRsK3jEeeHdMWUyAlTZg" base_State="_DEUCAK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DFAlkK3jEeeHdMWUyAlTZg" base_Pseudostate="_DEuRsa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DFGsMK3jEeeHdMWUyAlTZg" base_Pseudostate="_DFAlka3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_DFgU0K3jEeeHdMWUyAlTZg" base_Region="_DEUCAa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DFyBoK3jEeeHdMWUyAlTZg" base_State="_DFgU0a3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DF8ZsK3jEeeHdMWUyAlTZg" base_State="_DFgU063jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DGFjoK3jEeeHdMWUyAlTZg" base_State="_DFg74K3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DGWCUK3jEeeHdMWUyAlTZg" base_Pseudostate="_DGNfcK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DGjdsK3jEeeHdMWUyAlTZg" base_State="_DGWCUa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DGxgIK3jEeeHdMWUyAlTZg" base_Pseudostate="_DGjdsa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DG4N0K3jEeeHdMWUyAlTZg" base_Pseudostate="_DGxgIa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_DHLIwK3jEeeHdMWUyAlTZg" base_Region="_DGWCUq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DHc1kK3jEeeHdMWUyAlTZg" base_State="_DHLIwa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DHpC0K3jEeeHdMWUyAlTZg" base_State="_DHQBQK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DHxlsK3jEeeHdMWUyAlTZg" base_Pseudostate="_DHq4AK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DH79wK3jEeeHdMWUyAlTZg" base_State="_DHxlsa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DIG84K3jEeeHdMWUyAlTZg" base_Pseudostate="_DH79wa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DIQt4K3jEeeHdMWUyAlTZg" base_Pseudostate="_DIG84a3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_DInTMK3jEeeHdMWUyAlTZg" base_Region="_DHxlsq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DIxEMK3jEeeHdMWUyAlTZg" base_State="_DInTMa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DJA70K3jEeeHdMWUyAlTZg" base_State="_DIn6QK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DJL68K3jEeeHdMWUyAlTZg" base_Pseudostate="_DJCxAK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DJZWUK3jEeeHdMWUyAlTZg" base_State="_DJL68a3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DJgEAK3jEeeHdMWUyAlTZg" base_Pseudostate="_DJZWUa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DJtfYK3jEeeHdMWUyAlTZg" base_Pseudostate="_DJjuYK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_DJ_zQK3jEeeHdMWUyAlTZg" base_Region="_DJL68q3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DKTVQK3jEeeHdMWUyAlTZg" base_State="_DJ_zQa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DKdGQK3jEeeHdMWUyAlTZg" base_State="_DKErwK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DKmQMK3jEeeHdMWUyAlTZg" base_State="_DKHvEa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DLIbsK3jEeeHdMWUyAlTZg" base_Pseudostate="_DLCVEK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DLLfAK3jEeeHdMWUyAlTZg" base_State="_DLIbsa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DLaIgK3jEeeHdMWUyAlTZg" base_Pseudostate="_DLLfAa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DLdy4K3jEeeHdMWUyAlTZg" base_Pseudostate="_DLavkK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_DLwGwK3jEeeHdMWUyAlTZg" base_Region="_DLIbsq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DMBMgK3jEeeHdMWUyAlTZg" base_State="_DLwt0K3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DMFd8K3jEeeHdMWUyAlTZg" base_State="_DLwt0q3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DMXKwK3jEeeHdMWUyAlTZg" base_State="_DLxU4K3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DM4vMK3jEeeHdMWUyAlTZg" base_State="_DLxU4q3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DNLDEK3jEeeHdMWUyAlTZg" base_Pseudostate="_DNCgMK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DNU0EK3jEeeHdMWUyAlTZg" base_State="_DNLqIK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DNa6sK3jEeeHdMWUyAlTZg" base_Pseudostate="_DNU0Ea3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DNl50K3jEeeHdMWUyAlTZg" base_Pseudostate="_DNa6sa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_DN2YgK3jEeeHdMWUyAlTZg" base_Region="_DNLqIa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DOM90K3jEeeHdMWUyAlTZg" base_State="_DN6C4K3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DOQBIK3jEeeHdMWUyAlTZg" base_State="_DN6C4q3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DOeqoK3jEeeHdMWUyAlTZg" base_Pseudostate="_DOU5oK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DOn0kK3jEeeHdMWUyAlTZg" base_State="_DOeqoa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DOstEK3jEeeHdMWUyAlTZg" base_Pseudostate="_DOn0ka3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DO3sMK3jEeeHdMWUyAlTZg" base_Pseudostate="_DOstEa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_DPR74K3jEeeHdMWUyAlTZg" base_Region="_DOeqoq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DPk20K3jEeeHdMWUyAlTZg" base_State="_DPR74a3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DPv18K3jEeeHdMWUyAlTZg" base_State="_DPSi8K3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DQA7sK3jEeeHdMWUyAlTZg" base_Pseudostate="_DP4Y0K3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DQLTwK3jEeeHdMWUyAlTZg" base_State="_DQA7sa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DQRaYK3jEeeHdMWUyAlTZg" base_Pseudostate="_DQLTwa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DQe1wK3jEeeHdMWUyAlTZg" base_Pseudostate="_DQRaYa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_DQ00AK3jEeeHdMWUyAlTZg" base_Region="_DQA7sq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DRGg0K3jEeeHdMWUyAlTZg" base_State="_DQ00Aa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DRZbwK3jEeeHdMWUyAlTZg" base_State="_DQ00A63jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DRp6cK3jEeeHdMWUyAlTZg" base_State="_DQ1bEK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DSH0gK3jEeeHdMWUyAlTZg" base_State="_DQ2CIK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DSeZ0K3jEeeHdMWUyAlTZg" base_Pseudostate="_DSV28K3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DStDUK3jEeeHdMWUyAlTZg" base_State="_DSeZ0a3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DUUz8K3jEeeHdMWUyAlTZg" base_Pseudostate="_DStDUa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DUfMAK3jEeeHdMWUyAlTZg" base_Pseudostate="_DUUz8a3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_DUyuAK3jEeeHdMWUyAlTZg" base_Region="_DSeZ0q3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DVDzwK3jEeeHdMWUyAlTZg" base_State="_DUyuAa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DVKhcK3jEeeHdMWUyAlTZg" base_State="_DU1xUK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DVUScK3jEeeHdMWUyAlTZg" base_State="_DU2YYK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DVl_QK3jEeeHdMWUyAlTZg" base_State="_DU2YYq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DV6IUK3jEeeHdMWUyAlTZg" base_Pseudostate="_DVzaoK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DV9ysK3jEeeHdMWUyAlTZg" base_State="_DV6IUa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DWNqUK3jEeeHdMWUyAlTZg" base_Pseudostate="_DV9ysa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DWTw8K3jEeeHdMWUyAlTZg" base_Pseudostate="_DWNqUa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_DWmE0K3jEeeHdMWUyAlTZg" base_Region="_DV6IUq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DWxD8K3jEeeHdMWUyAlTZg" base_State="_DWmE0a3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DW94QK3jEeeHdMWUyAlTZg" base_State="_DWmE063jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DXJecK3jEeeHdMWUyAlTZg" base_Pseudostate="_DW_tcK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DXYvAK3jEeeHdMWUyAlTZg" base_State="_DXJeca3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DXmxcK3jEeeHdMWUyAlTZg" base_Pseudostate="_DXbLQK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DXvUUK3jEeeHdMWUyAlTZg" base_Pseudostate="_DXmxca3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_DYI88K3jEeeHdMWUyAlTZg" base_Region="_DXJecq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DYZboK3jEeeHdMWUyAlTZg" base_State="_DYI88a3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DYh-gK3jEeeHdMWUyAlTZg" base_State="_DYJkAK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DYrvgK3jEeeHdMWUyAlTZg" base_State="_DYKLEK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DY_RgK3jEeeHdMWUyAlTZg" base_State="_DYKyIK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DZg18K3jEeeHdMWUyAlTZg" base_Pseudostate="_DZUBoK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DZx7sK3jEeeHdMWUyAlTZg" base_State="_DZg18a3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DZ6ekK3jEeeHdMWUyAlTZg" base_Pseudostate="_DZx7sa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DaH58K3jEeeHdMWUyAlTZg" base_Pseudostate="_DZ6eka3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_DaYYoK3jEeeHdMWUyAlTZg" base_Region="_DZg18q3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DalM8K3jEeeHdMWUyAlTZg" base_State="_DaYYoa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DawzIK3jEeeHdMWUyAlTZg" base_State="_DaY_sK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_Da6kIK3jEeeHdMWUyAlTZg" base_State="_DaY_sq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DbTlsK3jEeeHdMWUyAlTZg" base_Pseudostate="_DbJNoK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DbhBEK3jEeeHdMWUyAlTZg" base_State="_DbTlsa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DbnuwK3jEeeHdMWUyAlTZg" base_Pseudostate="_DbhBEa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DbwRoK3jEeeHdMWUyAlTZg" base_Pseudostate="_DbsnQK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_DcLvcK3jEeeHdMWUyAlTZg" base_Region="_DbTlsq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DcaY8K3jEeeHdMWUyAlTZg" base_State="_DcLvca3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_Dcji4K3jEeeHdMWUyAlTZg" base_State="_DcLvc63jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Dct68K3jEeeHdMWUyAlTZg" base_Pseudostate="_Dcn0UK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_Dc6IMK3jEeeHdMWUyAlTZg" base_State="_DcuiAK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DdDSIK3jEeeHdMWUyAlTZg" base_Pseudostate="_Dc6IMa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DdPfYK3jEeeHdMWUyAlTZg" base_Pseudostate="_DdDSIa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_DdiaUK3jEeeHdMWUyAlTZg" base_Region="_DcuiAa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_Dd5msK3jEeeHdMWUyAlTZg" base_State="_DdiaUa3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DedAUK3jEeeHdMWUyAlTZg" base_State="_DdjBYK3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_Des38K3jEeeHdMWUyAlTZg" base_State="_DdjBYq3jEeeHdMWUyAlTZg"/>
  <UMLRTStateMachines:RTState xmi:id="_DfFScK3jEeeHdMWUyAlTZg" base_State="_De_L0K3jEeeHdMWUyAlTZg"/>
</xmi:XMI>
